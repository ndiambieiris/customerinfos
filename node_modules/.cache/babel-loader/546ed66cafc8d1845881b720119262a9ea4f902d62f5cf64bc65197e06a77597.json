{"ast":null,"code":"/**\n * Bundle of @devexpress/dx-react-grid\n * Generated: 2022-07-12\n * Version: 3.0.4\n * License: https://js.devexpress.com/Licensing\n */\n\nimport { memo, createElement, useCallback, createRef, PureComponent, Fragment, forwardRef } from 'react';\nimport { Plugin, Getter, Template, TemplatePlaceholder, PluginHost, TemplateConnector, createStateHelper, Action, DragDropProvider as DragDropProvider$1, withComponents, PlaceholderWithRef, DropTarget, DragSource, Sizer } from '@devexpress/dx-react-core';\nimport { tableColumnsWithGrouping, rowIdGetter, cellValueGetter, tableColumnsWithDataRows, checkTableColumnExtensions, visibleTableColumns, orderedColumns, columnChooserItems, changeColumnFilter, getColumnExtensionValueGetter, filterExpression, defaultFilterPredicate, filteredCollapsedRowsGetter, unwrappedFilteredRows, filteredRows, getColumnExtension, startEditRows, stopEditRows, startEditCells, stopEditCells, changeRow, cancelChanges, changedRowsByIds, addRow, changeAddedRow, cancelAddedRows, addedRowsByIds, deleteRows, cancelDeletedRows, createRowChangeGetter, setCurrentPage, setPageSize, rowsWithPageHeaders, rowCount, paginatedRows, currentPage, toggleExpandedGroups, draftColumnGrouping, cancelColumnGroupingDraft, adjustSortIndex, changeColumnGrouping, groupRowChecker, groupRowLevelKeyGetter, groupCollapsedRowsGetter, expandedGroupRows, groupedRows, customGroupingRowIdGetter, customGroupedRows, toggleSelection, rowsWithAvailableToSelect, allSelected, someSelected, unwrapSelectedRows, getPersistentSortedColumns, calculateKeepOther, changeColumnSorting, sortedRows, draftOrder, TABLE_DATA_TYPE, getTableTargetColumnIndex, changeColumnOrder, TABLE_REORDERING_TYPE, tableHeaderRowsWithReordering, tableCellColSpanGetter, isHeaderStubTableCell, isDataTableCell, isNoDataTableRow, isNoDataTableCell, isDataTableRow, TABLE_NODATA_TYPE, tableRowsWithDataRows, isSelectAllTableCell, isSelectTableCell, isRowHighlighted, TABLE_SELECT_TYPE, tableColumnsWithSelection, toggleDetailRowExpanded, isDetailToggleTableCell, isDetailRowExpanded, isDetailTableRow, isDetailTableCell, TABLE_DETAIL_TYPE, tableDetailCellColSpanGetter, tableColumnsWithDetail, tableRowsWithExpandedDetail, defaultFormatlessSummaries, getGroupInlineSummaries, isGroupTableRow, isGroupTableCell, calculateGroupCellIndent, isGroupIndentTableCell, isGroupIndentStubTableCell, isGroupRowOrdinaryCell, isRowSummaryCell, getColumnSummaries, isPreviousCellContainSummary, TABLE_FLEX_TYPE, TABLE_GROUP_TYPE, tableRowsWithGrouping, tableGroupCellColSpanGetter, isHeadingTableCell, getNextColumnName, getColumnSortingDirection, isHeadingTableRow, TABLE_HEADING_TYPE, tableRowsWithHeading, columnBandLevels, isBandedOrHeaderRow, getBandComponent, BAND_FILL_LEVEL_CELL, BAND_HEADER_CELL, BAND_GROUP_CELL, BAND_EMPTY_CELL, BAND_DUPLICATE_RENDER, isBandedTableRow, TABLE_BAND_TYPE, bandLevelsVisibility, columnVisibleIntervals, tableRowsWithBands, tableHeaderColumnChainsWithBands, isFilterTableCell, getColumnFilterConfig, getColumnFilterOperations, getSelectedFilterOperation, isFilterTableRow, TABLE_FILTER_TYPE, tableHeaderRowsWithFilter, TOP_POSITION, isFilterValueEmpty, isEditTableCell, isAddedTableRow, getRowChange, isEditTableRow, TABLE_ADDED_TYPE, TABLE_EDIT_TYPE, tableRowsWithEditing, isHeadingEditCommandsTableCell, isEditCommandsTableCell, TABLE_EDIT_COMMAND_TYPE, tableColumnsWithEditing, tableColumnsWithWidths, tableColumnsWithDraftWidths, changeTableColumnWidth, draftTableColumnWidth, cancelTableColumnWidthDraft, pageCount, getGroupCellTargetIndex, groupingPanelItems, getAvailableFilterOperationsGetter, toggleColumn, tableDataColumnsExist, toggleRowExpanded, expandedTreeRows, customTreeRowIdGetter, customTreeRowLevelKeyGetter, isTreeRowLeafGetter, getTreeRowLevelGetter, collapsedTreeRowsGetter, unwrappedCustomTreeRows, customTreeRowsWithMeta, isTreeTableCell, changeSearchValue, searchFilterExpression, calculateFixedColumnProps, isFixedTableRow, tableHeaderRowsWithFixed, tableHeaderColumnChainsWithFixed, tableColumnsWithFixed, prepareGroupSummaryItems, defaultSummaryCalculator, totalSummaryValues, groupSummaryValues, treeSummaryValues, isTotalSummaryTableCell, isGroupSummaryTableCell, isFooterSummary, isTreeSummaryTableCell, isTotalSummaryTableRow, isGroupSummaryTableRow, isTreeSummaryTableRow, TABLE_TREE_SUMMARY_TYPE, TABLE_GROUP_SUMMARY_TYPE, TABLE_TOTAL_SUMMARY_TYPE, tableRowsWithSummaries, tableRowsWithTotalSummaries, getReferenceIndex, needFetchMorePages, getRequestMeta, shouldSendRequest, emptyVirtualRows, trimRowsToInterval, getAvailableRowCount, virtualRowsWithCache, plainRows, loadedRowsStart, rowsWithEditingCells, columnsWithEditingCells, filterHeaderRows, focus, isCellExist, getClosestCellByRow, isTabArrowUpDown, getNextFocusedCell, LEFT_POSITION, RIGHT_POSITION, getPart, getIndexToFocus, isCellFocused, isRowFocused, getFocusing, getAnimations, filterActiveAnimations, evalAnimations, isColumnsWidthDifferent, getViewport, getCollapsedGrids, getScrollLeft, getColumnWidthGetter, getTopRowId, getScrollTop, isStubTableCell, BOTTOM_POSITION, checkColumnWidths } from '@devexpress/dx-grid-core';\nimport { getMessagesFormatter, memoize, shallowEqual } from '@devexpress/dx-core';\nimport { createPortal, flushSync } from 'react-dom';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n  };\n  return _extendStatics(d, b);\n};\nfunction __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  _extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return _assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\nfunction __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n}\n\n/** @deprecated */\nfunction __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\nvar showColumnWhenGroupedGetter = function showColumnWhenGroupedGetter(showColumnsWhenGrouped, columnExtensions) {\n  if (columnExtensions === void 0) {\n    columnExtensions = [];\n  }\n  var map = columnExtensions.reduce(function (acc, columnExtension) {\n    acc[columnExtension.columnName] = columnExtension.showWhenGrouped;\n    return acc;\n  }, {});\n  return function (columnName) {\n    return map[columnName] || showColumnsWhenGrouped;\n  };\n};\n/** @internal */\nvar TableColumnsWithGrouping = memo(function (_a) {\n  var indentColumnWidth = _a.indentColumnWidth,\n    showColumnsWhenGrouped = _a.showColumnsWhenGrouped,\n    columnExtensions = _a.columnExtensions;\n  var tableColumnsComputed = function tableColumnsComputed(_a) {\n    var columns = _a.columns,\n      tableColumns = _a.tableColumns,\n      grouping = _a.grouping,\n      draftGrouping = _a.draftGrouping;\n    return tableColumnsWithGrouping(columns, tableColumns, grouping, draftGrouping, indentColumnWidth, showColumnWhenGroupedGetter(showColumnsWhenGrouped, columnExtensions));\n  };\n  return createElement(Plugin, null, createElement(Getter, {\n    name: \"tableColumns\",\n    computed: tableColumnsComputed\n  }));\n});\nTableColumnsWithGrouping.defaultProps = {\n  indentColumnWidth: 0\n};\nvar GridCoreGetters = memo(function (_a) {\n  var rows = _a.rows,\n    columns = _a.columns,\n    getRowId = _a.getRowId,\n    getCellValue = _a.getCellValue;\n  return createElement(Plugin, null, createElement(Getter, {\n    name: \"rows\",\n    value: rows\n  }), createElement(Getter, {\n    name: \"getRowId\",\n    value: rowIdGetter(getRowId, rows)\n  }), createElement(Getter, {\n    name: \"columns\",\n    value: columns\n  }), createElement(Getter, {\n    name: \"getCellValue\",\n    value: cellValueGetter(getCellValue, columns)\n  }));\n});\nvar TableColumnsWithDataRowsGetter = memo(function (_a) {\n  var columnExtensions = _a.columnExtensions;\n  var tableColumnsComputed = useCallback(function (_a) {\n    var columns = _a.columns;\n    return tableColumnsWithDataRows(columns, columnExtensions);\n  }, [columnExtensions]);\n  checkTableColumnExtensions(columnExtensions);\n  return createElement(Plugin, null, createElement(Getter, {\n    name: \"tableColumns\",\n    computed: tableColumnsComputed\n  }));\n});\nvar visibleTableColumnsComputed = function visibleTableColumnsComputed(_a) {\n  var tableColumns = _a.tableColumns,\n    hiddenColumnNames = _a.hiddenColumnNames;\n  return visibleTableColumns(tableColumns, hiddenColumnNames);\n};\n/** @internal */\nvar VisibleTableColumns = memo(function (_a) {\n  var hiddenColumnNames = _a.hiddenColumnNames;\n  return createElement(Plugin, null, createElement(Getter, {\n    name: \"hiddenColumnNames\",\n    value: hiddenColumnNames\n  }), createElement(Getter, {\n    name: \"tableColumns\",\n    computed: visibleTableColumnsComputed\n  }));\n});\nVisibleTableColumns.defaultProps = {\n  hiddenColumnNames: []\n};\n\n/** @internal */\nvar OrderedTableColumns = function OrderedTableColumns(_a) {\n  var order = _a.order;\n  var columnsComputed = function columnsComputed(_a) {\n    var tableColumns = _a.tableColumns;\n    return orderedColumns(tableColumns, order);\n  };\n  return createElement(Plugin, null, createElement(Getter, {\n    name: \"tableColumns\",\n    computed: columnsComputed\n  }));\n};\nOrderedTableColumns.defaultProps = {\n  order: []\n};\nvar GridCore = /*#__PURE__*/function (_super) {\n  __extends(GridCore, _super);\n  function GridCore(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      ref: {}\n    };\n    _this.rootRef = createRef();\n    return _this;\n  }\n  GridCore.prototype.componentDidMount = function () {\n    this.setState({\n      ref: this.rootRef\n    });\n  };\n  GridCore.prototype.render = function () {\n    var _a = this.props,\n      Root = _a.rootComponent,\n      restProps = __rest(_a, [\"rootComponent\"]);\n    var ref = this.state.ref;\n    return createElement(Plugin, null, createElement(Getter, {\n      name: \"skip\",\n      value: 0\n    }), createElement(Getter, {\n      name: \"loadedRowsStart\",\n      value: 0\n    }), createElement(Getter, {\n      name: \"rootRef\",\n      value: ref\n    }), createElement(GridCoreGetters, _assign({}, restProps)), createElement(Template, {\n      name: \"root\"\n    }, createElement(Root, {\n      rootRef: this.rootRef\n    }, createElement(TemplatePlaceholder, {\n      name: \"header\"\n    }), createElement(TemplatePlaceholder, {\n      name: \"body\"\n    }), createElement(TemplatePlaceholder, {\n      name: \"footer\"\n    }))));\n  };\n  return GridCore;\n}(PureComponent);\nvar GridBase = function GridBase(_a) {\n  var rows = _a.rows,\n    columns = _a.columns,\n    getRowId = _a.getRowId,\n    getCellValue = _a.getCellValue,\n    rootComponent = _a.rootComponent,\n    children = _a.children;\n  return createElement(PluginHost, null, createElement(GridCore, {\n    rows: rows,\n    columns: columns,\n    getRowId: getRowId,\n    getCellValue: getCellValue,\n    rootComponent: rootComponent\n  }), children);\n};\n/***\r\n * The Grid is a root container component designed to process and display data specified via\r\n * the `rows` property. You can configure columns using the `columns` property. The Grid's\r\n * functionality  is implemented in several plugins specified as child components.\r\n * See the plugins concept for details.\r\n * */\nvar Grid = GridBase;\nvar pluginDependencies = [{\n  name: 'TableColumnVisibility'\n}, {\n  name: 'Toolbar'\n}];\nvar ColumnChooserBase = /*#__PURE__*/function (_super) {\n  __extends(ColumnChooserBase, _super);\n  function ColumnChooserBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      visible: false\n    };\n    _this.handleToggle = _this.handleToggle.bind(_this);\n    _this.handleHide = _this.handleHide.bind(_this);\n    _this.setButtonRef = _this.setButtonRef.bind(_this);\n    return _this;\n  }\n  ColumnChooserBase.prototype.setButtonRef = function (button) {\n    this.button = button;\n  };\n  ColumnChooserBase.prototype.handleToggle = function () {\n    var visible = this.state.visible;\n    this.setState({\n      visible: !visible\n    });\n  };\n  ColumnChooserBase.prototype.handleHide = function () {\n    this.setState({\n      visible: false\n    });\n  };\n  ColumnChooserBase.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      Overlay = _a.overlayComponent,\n      Container = _a.containerComponent,\n      Item = _a.itemComponent,\n      ToggleButton = _a.toggleButtonComponent,\n      messages = _a.messages;\n    var getMessage = getMessagesFormatter(messages);\n    var visible = this.state.visible;\n    return createElement(Plugin, {\n      name: \"ColumnChooser\",\n      dependencies: pluginDependencies\n    }, createElement(Template, {\n      name: \"toolbarContent\"\n    }, createElement(TemplatePlaceholder, null), createElement(TemplateConnector, null, function (_a, _b) {\n      var columns = _a.columns,\n        hiddenColumnNames = _a.hiddenColumnNames,\n        isColumnTogglingEnabled = _a.isColumnTogglingEnabled;\n      var toggleColumnVisibility = _b.toggleColumnVisibility;\n      return createElement(Fragment, null, createElement(ToggleButton, {\n        buttonRef: _this.setButtonRef,\n        onToggle: _this.handleToggle,\n        getMessage: getMessage,\n        active: visible\n      }), createElement(Overlay, {\n        visible: visible,\n        target: _this.button,\n        onHide: _this.handleHide\n      }, createElement(Container, null, columnChooserItems(columns, hiddenColumnNames).map(function (item) {\n        var columnName = item.column.name;\n        var togglingEnabled = isColumnTogglingEnabled(columnName);\n        return createElement(Item, {\n          key: columnName,\n          item: item,\n          disabled: !togglingEnabled,\n          onToggle: function onToggle() {\n            return toggleColumnVisibility(columnName);\n          }\n        });\n      }))));\n    })));\n  };\n  ColumnChooserBase.defaultProps = {\n    messages: {}\n  };\n  ColumnChooserBase.components = {\n    overlayComponent: 'Overlay',\n    containerComponent: 'Container',\n    itemComponent: 'Item',\n    toggleButtonComponent: 'ToggleButton'\n  };\n  return ColumnChooserBase;\n}(PureComponent);\n/***\r\n * The ColumnChooser plugin allows a user to toggle grid columns' visibility at runtime.\r\n * The column chooser lists columns with checkboxes that control a corresponding\r\n * column's visibility.\r\n * */\nvar ColumnChooser = ColumnChooserBase;\nvar columnExtensionValueGetter = function columnExtensionValueGetter(columnExtensions, defaultValue) {\n  return getColumnExtensionValueGetter(columnExtensions, 'filteringEnabled', defaultValue);\n};\nvar filterExpressionComputed = function filterExpressionComputed(_a) {\n  var filters = _a.filters,\n    filterExpressionValue = _a.filterExpression;\n  return filterExpression(filters, filterExpressionValue);\n};\nvar FilteringStateBase = /*#__PURE__*/function (_super) {\n  __extends(FilteringStateBase, _super);\n  function FilteringStateBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      filters: props.filters || props.defaultFilters\n    };\n    var stateHelper = createStateHelper(_this, {\n      filters: function filters() {\n        var onFiltersChange = _this.props.onFiltersChange;\n        return onFiltersChange;\n      }\n    });\n    _this.changeColumnFilter = stateHelper.applyFieldReducer.bind(stateHelper, 'filters', changeColumnFilter);\n    return _this;\n  }\n  // tslint:disable-next-line:member-ordering\n  FilteringStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.filters,\n      filters = _a === void 0 ? prevState.filters : _a;\n    return {\n      filters: filters\n    };\n  };\n  FilteringStateBase.prototype.render = function () {\n    var filters = this.state.filters;\n    var _a = this.props,\n      columnExtensions = _a.columnExtensions,\n      columnFilteringEnabled = _a.columnFilteringEnabled;\n    return createElement(Plugin, {\n      name: \"FilteringState\"\n    }, createElement(Getter, {\n      name: \"filters\",\n      value: filters\n    }), createElement(Getter, {\n      name: \"filterExpression\",\n      computed: filterExpressionComputed\n    }), createElement(Getter, {\n      name: \"isColumnFilteringEnabled\",\n      value: columnExtensionValueGetter(columnExtensions, columnFilteringEnabled)\n    }), createElement(Action, {\n      name: \"changeColumnFilter\",\n      action: this.changeColumnFilter\n    }));\n  };\n  FilteringStateBase.defaultProps = {\n    defaultFilters: [],\n    columnFilteringEnabled: true\n  };\n  return FilteringStateBase;\n}(PureComponent);\n/** A plugin that manages the filtering state. */\nvar FilteringState = FilteringStateBase;\nvar pluginDependencies$1 = [{\n  name: 'FilteringState',\n  optional: true\n}, {\n  name: 'SearchState',\n  optional: true\n}];\nvar getCollapsedRowsComputed = function getCollapsedRowsComputed(_a) {\n  var rows = _a.rows;\n  return filteredCollapsedRowsGetter(rows);\n};\nvar unwrappedRowsComputed = function unwrappedRowsComputed(_a) {\n  var rows = _a.rows;\n  return unwrappedFilteredRows(rows);\n};\nvar IntegratedFilteringBase = /*#__PURE__*/function (_super) {\n  __extends(IntegratedFilteringBase, _super);\n  function IntegratedFilteringBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  IntegratedFilteringBase.prototype.render = function () {\n    var columnExtensions = this.props.columnExtensions;\n    var getColumnPredicate = function getColumnPredicate(columnName) {\n      return getColumnExtension(columnExtensions, columnName).predicate;\n    };\n    var rowsComputed = function rowsComputed(_a) {\n      var rows = _a.rows,\n        filterExpression = _a.filterExpression,\n        getCellValue = _a.getCellValue,\n        getRowLevelKey = _a.getRowLevelKey,\n        getCollapsedRows = _a.getCollapsedRows;\n      return filteredRows(rows, filterExpression, getCellValue, getColumnPredicate, getRowLevelKey, getCollapsedRows);\n    };\n    return createElement(Plugin, {\n      name: \"IntegratedFiltering\",\n      dependencies: pluginDependencies$1\n    }, createElement(Getter, {\n      name: \"rows\",\n      computed: rowsComputed\n    }), createElement(Getter, {\n      name: \"getCollapsedRows\",\n      computed: getCollapsedRowsComputed\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: unwrappedRowsComputed\n    }));\n  };\n  return IntegratedFilteringBase;\n}(PureComponent);\nIntegratedFilteringBase.defaultPredicate = defaultFilterPredicate;\nvar IntegratedFiltering = IntegratedFilteringBase;\nvar columnExtensionValueGetter$1 = function columnExtensionValueGetter$1(columnExtensions, defaultValue) {\n  return getColumnExtensionValueGetter(columnExtensions, 'editingEnabled', defaultValue);\n};\nvar EditingStateBase = /*#__PURE__*/function (_super) {\n  __extends(EditingStateBase, _super);\n  function EditingStateBase(props) {\n    var _this = _super.call(this, props) || this;\n    var rowChanges = props.rowChanges || props.defaultRowChanges;\n    var addedRows = props.addedRows || props.defaultAddedRows;\n    var getRowChanges = function getRowChanges() {\n      var stateRowChanges = _this.state.rowChanges;\n      return stateRowChanges;\n    };\n    var getAddedRows = function getAddedRows() {\n      var stateAddedRows = _this.state.addedRows;\n      return stateAddedRows;\n    };\n    _this.state = {\n      addedRows: addedRows,\n      rowChanges: rowChanges,\n      editingRowIds: props.editingRowIds || props.defaultEditingRowIds,\n      deletedRowIds: props.deletedRowIds || props.defaultDeletedRowIds,\n      editingCells: props.editingCells || props.defaultEditingCells\n    };\n    var stateHelper = createStateHelper(_this, {\n      editingRowIds: function editingRowIds() {\n        var onEditingRowIdsChange = _this.props.onEditingRowIdsChange;\n        return onEditingRowIdsChange;\n      },\n      editingCells: function editingCells() {\n        var onEditingCellsChange = _this.props.onEditingCellsChange;\n        return onEditingCellsChange;\n      },\n      addedRows: function addedRows() {\n        var onAddedRowsChange = _this.props.onAddedRowsChange;\n        return onAddedRowsChange;\n      },\n      rowChanges: function rowChanges() {\n        var onRowChangesChange = _this.props.onRowChangesChange;\n        return onRowChangesChange;\n      },\n      deletedRowIds: function deletedRowIds() {\n        var onDeletedRowIdsChange = _this.props.onDeletedRowIdsChange;\n        return onDeletedRowIdsChange;\n      }\n    });\n    _this.startEditRows = stateHelper.applyFieldReducer.bind(stateHelper, 'editingRowIds', startEditRows);\n    _this.stopEditRows = stateHelper.applyFieldReducer.bind(stateHelper, 'editingRowIds', stopEditRows);\n    _this.startEditCells = stateHelper.applyFieldReducer.bind(stateHelper, 'editingCells', startEditCells);\n    _this.stopEditCells = stateHelper.applyFieldReducer.bind(stateHelper, 'editingCells', stopEditCells);\n    _this.changeRow = stateHelper.applyFieldReducer.bind(stateHelper, 'rowChanges', changeRow);\n    _this.cancelChangedRows = stateHelper.applyFieldReducer.bind(stateHelper, 'rowChanges', cancelChanges);\n    _this.commitChangedRows = function (_a) {\n      var rowIds = _a.rowIds;\n      var onCommitChanges = _this.props.onCommitChanges;\n      onCommitChanges({\n        changed: changedRowsByIds(getRowChanges(), rowIds)\n      });\n      _this.cancelChangedRows({\n        rowIds: rowIds\n      });\n    };\n    _this.addRow = stateHelper.applyFieldReducer.bind(stateHelper, 'addedRows', addRow);\n    _this.changeAddedRow = stateHelper.applyFieldReducer.bind(stateHelper, 'addedRows', changeAddedRow);\n    _this.cancelAddedRows = stateHelper.applyFieldReducer.bind(stateHelper, 'addedRows', cancelAddedRows);\n    _this.commitAddedRows = function (_a) {\n      var rowIds = _a.rowIds;\n      var onCommitChanges = _this.props.onCommitChanges;\n      onCommitChanges({\n        added: addedRowsByIds(getAddedRows(), rowIds)\n      });\n      _this.cancelAddedRows({\n        rowIds: rowIds\n      });\n    };\n    _this.deleteRows = stateHelper.applyFieldReducer.bind(stateHelper, 'deletedRowIds', deleteRows);\n    _this.cancelDeletedRows = stateHelper.applyFieldReducer.bind(stateHelper, 'deletedRowIds', cancelDeletedRows);\n    _this.commitDeletedRows = function (_a) {\n      var rowIds = _a.rowIds;\n      var onCommitChanges = _this.props.onCommitChanges;\n      onCommitChanges({\n        deleted: rowIds\n      });\n      _this.cancelDeletedRows({\n        rowIds: rowIds\n      });\n    };\n    return _this;\n  }\n  EditingStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.editingRowIds,\n      editingRowIds = _a === void 0 ? prevState.editingRowIds : _a,\n      _b = nextProps.editingCells,\n      editingCells = _b === void 0 ? prevState.editingCells : _b,\n      _c = nextProps.rowChanges,\n      rowChanges = _c === void 0 ? prevState.rowChanges : _c,\n      _d = nextProps.addedRows,\n      addedRows = _d === void 0 ? prevState.addedRows : _d,\n      _e = nextProps.deletedRowIds,\n      deletedRowIds = _e === void 0 ? prevState.deletedRowIds : _e;\n    return {\n      editingRowIds: editingRowIds,\n      editingCells: editingCells,\n      rowChanges: rowChanges,\n      addedRows: addedRows,\n      deletedRowIds: deletedRowIds\n    };\n  };\n  EditingStateBase.prototype.render = function () {\n    var _a = this.props,\n      createRowChange = _a.createRowChange,\n      columnExtensions = _a.columnExtensions,\n      columnEditingEnabled = _a.columnEditingEnabled;\n    var _b = this.state,\n      editingRowIds = _b.editingRowIds,\n      editingCells = _b.editingCells,\n      rowChanges = _b.rowChanges,\n      addedRows = _b.addedRows,\n      deletedRowIds = _b.deletedRowIds;\n    return createElement(Plugin, {\n      name: \"EditingState\"\n    }, createElement(Getter, {\n      name: \"createRowChange\",\n      value: createRowChangeGetter(createRowChange, columnExtensions)\n    }), createElement(Getter, {\n      name: \"editingRowIds\",\n      value: editingRowIds\n    }), createElement(Action, {\n      name: \"startEditRows\",\n      action: this.startEditRows\n    }), createElement(Action, {\n      name: \"stopEditRows\",\n      action: this.stopEditRows\n    }), createElement(Getter, {\n      name: \"editingCells\",\n      value: editingCells\n    }), createElement(Action, {\n      name: \"startEditCells\",\n      action: this.startEditCells\n    }), createElement(Action, {\n      name: \"stopEditCells\",\n      action: this.stopEditCells\n    }), createElement(Getter, {\n      name: \"rowChanges\",\n      value: rowChanges\n    }), createElement(Action, {\n      name: \"changeRow\",\n      action: this.changeRow\n    }), createElement(Action, {\n      name: \"cancelChangedRows\",\n      action: this.cancelChangedRows\n    }), createElement(Action, {\n      name: \"commitChangedRows\",\n      action: this.commitChangedRows\n    }), createElement(Getter, {\n      name: \"addedRows\",\n      value: addedRows\n    }), createElement(Action, {\n      name: \"addRow\",\n      action: this.addRow\n    }), createElement(Action, {\n      name: \"changeAddedRow\",\n      action: this.changeAddedRow\n    }), createElement(Action, {\n      name: \"cancelAddedRows\",\n      action: this.cancelAddedRows\n    }), createElement(Action, {\n      name: \"commitAddedRows\",\n      action: this.commitAddedRows\n    }), createElement(Getter, {\n      name: \"deletedRowIds\",\n      value: deletedRowIds\n    }), createElement(Action, {\n      name: \"deleteRows\",\n      action: this.deleteRows\n    }), createElement(Action, {\n      name: \"cancelDeletedRows\",\n      action: this.cancelDeletedRows\n    }), createElement(Action, {\n      name: \"commitDeletedRows\",\n      action: this.commitDeletedRows\n    }), createElement(Getter, {\n      name: \"isColumnEditingEnabled\",\n      value: columnExtensionValueGetter$1(columnExtensions, columnEditingEnabled)\n    }));\n  };\n  EditingStateBase.defaultProps = {\n    columnEditingEnabled: true,\n    defaultEditingRowIds: [],\n    defaultEditingCells: [],\n    defaultRowChanges: {},\n    defaultAddedRows: [],\n    defaultDeletedRowIds: []\n  };\n  return EditingStateBase;\n}(PureComponent);\n/***\r\n * A plugin that manages grid rows' editing state. It arranges grid rows\r\n * by different lists depending on a row's state.\r\n * */\nvar EditingState = EditingStateBase;\nvar PagingStateBase = /*#__PURE__*/function (_super) {\n  __extends(PagingStateBase, _super);\n  function PagingStateBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      currentPage: props.currentPage || props.defaultCurrentPage,\n      pageSize: props.pageSize !== undefined ? props.pageSize : props.defaultPageSize\n    };\n    var stateHelper = createStateHelper(_this, {\n      currentPage: function currentPage() {\n        var onCurrentPageChange = _this.props.onCurrentPageChange;\n        return onCurrentPageChange;\n      },\n      pageSize: function pageSize() {\n        var onPageSizeChange = _this.props.onPageSizeChange;\n        return onPageSizeChange;\n      }\n    });\n    _this.setCurrentPage = stateHelper.applyFieldReducer.bind(stateHelper, 'currentPage', setCurrentPage);\n    _this.setPageSize = stateHelper.applyFieldReducer.bind(stateHelper, 'pageSize', setPageSize);\n    return _this;\n  }\n  PagingStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.currentPage,\n      currentPage = _a === void 0 ? prevState.currentPage : _a,\n      _b = nextProps.pageSize,\n      pageSize = _b === void 0 ? prevState.pageSize : _b;\n    return {\n      currentPage: currentPage,\n      pageSize: pageSize\n    };\n  };\n  PagingStateBase.prototype.render = function () {\n    var _a = this.state,\n      pageSize = _a.pageSize,\n      currentPage = _a.currentPage;\n    return createElement(Plugin, {\n      name: \"PagingState\"\n    }, createElement(Getter, {\n      name: \"currentPage\",\n      value: currentPage\n    }), createElement(Getter, {\n      name: \"pageSize\",\n      value: pageSize\n    }), createElement(Action, {\n      name: \"setCurrentPage\",\n      action: this.setCurrentPage\n    }), createElement(Action, {\n      name: \"setPageSize\",\n      action: this.setPageSize\n    }));\n  };\n  PagingStateBase.defaultProps = {\n    defaultPageSize: 10,\n    defaultCurrentPage: 0\n  };\n  return PagingStateBase;\n}(PureComponent);\n/***\r\n * A plugin that manages the paging state. It controls the total page count depending on the\r\n * total row count and the specified page size, controls the currently selected page number\r\n * and changes it in response to the corresponding actions.\r\n * */\nvar PagingState = PagingStateBase;\nvar pluginDependencies$2 = [{\n  name: 'PagingState'\n}];\nvar rowsWithHeadersComputed = function rowsWithHeadersComputed(_a) {\n  var rows = _a.rows,\n    pageSize = _a.pageSize,\n    getRowLevelKey = _a.getRowLevelKey;\n  return rowsWithPageHeaders(rows, pageSize, getRowLevelKey);\n};\nvar totalCountComputed = function totalCountComputed(_a) {\n  var rows = _a.rows;\n  return rowCount(rows);\n};\nvar paginatedRowsComputed = function paginatedRowsComputed(_a) {\n  var rows = _a.rows,\n    pageSize = _a.pageSize,\n    page = _a.currentPage;\n  return paginatedRows(rows, pageSize, page);\n};\nvar currentPageComputed = function currentPageComputed(_a, _b) {\n  var page = _a.currentPage,\n    totalCount = _a.totalCount,\n    pageSize = _a.pageSize;\n  var setCurrentPage = _b.setCurrentPage;\n  return currentPage(page, totalCount, pageSize, setCurrentPage);\n};\n// eslint-disable-next-line react/prefer-stateless-function\nvar IntegratedPagingBase = /*#__PURE__*/function (_super) {\n  __extends(IntegratedPagingBase, _super);\n  function IntegratedPagingBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  IntegratedPagingBase.prototype.render = function () {\n    return createElement(Plugin, {\n      name: \"IntegratedPaging\",\n      dependencies: pluginDependencies$2\n    }, createElement(Getter, {\n      name: \"rows\",\n      computed: rowsWithHeadersComputed\n    }), createElement(Getter, {\n      name: \"totalCount\",\n      computed: totalCountComputed\n    }), createElement(Getter, {\n      name: \"currentPage\",\n      computed: currentPageComputed\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: paginatedRowsComputed\n    }));\n  };\n  return IntegratedPagingBase;\n}(PureComponent);\n/***\r\n * A plugin that performs built-in data paging. It also changes the current page if the provided\r\n * one cannot be applied due to fewer available pages.\r\n * */\nvar IntegratedPaging = IntegratedPagingBase;\nvar pluginDependencies$3 = [{\n  name: 'PagingState'\n}];\nvar CustomPagingBase = /*#__PURE__*/function (_super) {\n  __extends(CustomPagingBase, _super);\n  function CustomPagingBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  CustomPagingBase.prototype.render = function () {\n    var totalCount = this.props.totalCount;\n    return createElement(Plugin, {\n      name: \"CustomPaging\",\n      dependencies: pluginDependencies$3\n    }, createElement(Getter, {\n      name: \"totalCount\",\n      value: totalCount\n    }));\n  };\n  CustomPagingBase.defaultProps = {\n    totalCount: 0\n  };\n  return CustomPagingBase;\n}(PureComponent);\n/** A plugin that allows implementing a custom totalCount calculation logic. */\nvar CustomPaging = CustomPagingBase;\nvar dependencies = [{\n  name: 'SortingState',\n  optional: true\n}];\nvar columnExtensionValueGetter$2 = function columnExtensionValueGetter$2(columnExtensions, defaultValue) {\n  return getColumnExtensionValueGetter(columnExtensions, 'groupingEnabled', defaultValue);\n};\nvar GroupingStateBase = /*#__PURE__*/function (_super) {\n  __extends(GroupingStateBase, _super);\n  function GroupingStateBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      grouping: props.grouping || props.defaultGrouping,\n      draftGrouping: null,\n      expandedGroups: props.expandedGroups || props.defaultExpandedGroups\n    };\n    _this.stateHelper = createStateHelper(_this, {\n      grouping: function grouping() {\n        var onGroupingChange = _this.props.onGroupingChange;\n        return onGroupingChange;\n      },\n      expandedGroups: function expandedGroups() {\n        var onExpandedGroupsChange = _this.props.onExpandedGroupsChange;\n        return onExpandedGroupsChange;\n      }\n    });\n    _this.changeColumnGrouping = _this.changeColumnGrouping.bind(_this);\n    _this.toggleGroupExpanded = _this.stateHelper.applyReducer.bind(_this.stateHelper, toggleExpandedGroups);\n    _this.draftColumnGrouping = _this.stateHelper.applyReducer.bind(_this.stateHelper, draftColumnGrouping);\n    _this.cancelColumnGroupingDraft = _this.stateHelper.applyReducer.bind(_this.stateHelper, cancelColumnGroupingDraft);\n    _this.changeColumnSorting = _this.changeColumnSorting.bind(_this);\n    return _this;\n  }\n  GroupingStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.grouping,\n      grouping = _a === void 0 ? prevState.grouping : _a,\n      _b = nextProps.expandedGroups,\n      expandedGroups = _b === void 0 ? prevState.expandedGroups : _b;\n    return {\n      grouping: grouping,\n      expandedGroups: expandedGroups\n    };\n  };\n  GroupingStateBase.prototype.changeColumnSorting = function (_a, _b, _c) {\n    var sorting = _b.sorting;\n    var changeColumnSorting = _c.changeColumnSorting;\n    var columnName = _a.columnName,\n      keepOther = _a.keepOther,\n      restParams = __rest(_a, [\"columnName\", \"keepOther\"]);\n    var grouping = this.state.grouping;\n    var groupingIndex = grouping.findIndex(function (columnGrouping) {\n      return columnGrouping.columnName === columnName;\n    });\n    if (groupingIndex === -1) {\n      changeColumnSorting(_assign({\n        columnName: columnName,\n        keepOther: keepOther || grouping.map(function (columnGrouping) {\n          return columnGrouping.columnName;\n        })\n      }, restParams));\n      return false;\n    }\n    var sortIndex = adjustSortIndex(groupingIndex, grouping, sorting);\n    changeColumnSorting(_assign({\n      columnName: columnName,\n      sortIndex: sortIndex,\n      keepOther: true\n    }, restParams));\n    return false;\n  };\n  GroupingStateBase.prototype.changeColumnGrouping = function (_a, getters, actions) {\n    var columnName = _a.columnName,\n      groupIndex = _a.groupIndex;\n    this.stateHelper.applyReducer(changeColumnGrouping, {\n      columnName: columnName,\n      groupIndex: groupIndex\n    }, function (nextState, state) {\n      var grouping = nextState.grouping;\n      var prevGrouping = state.grouping;\n      var sorting = getters.sorting;\n      var changeColumnSorting = actions.changeColumnSorting;\n      if (!sorting) return;\n      var columnSortingIndex = sorting.findIndex(function (columnSorting) {\n        return columnSorting.columnName === columnName;\n      });\n      var prevGroupingIndex = prevGrouping.findIndex(function (columnGrouping) {\n        return columnGrouping.columnName === columnName;\n      });\n      var groupingIndex = grouping.findIndex(function (columnGrouping) {\n        return columnGrouping.columnName === columnName;\n      });\n      if (columnSortingIndex === -1 || prevGroupingIndex === prevGrouping.length - 1 && groupingIndex === -1) return;\n      var sortIndex = adjustSortIndex(groupingIndex === -1 ? grouping.length : groupingIndex, grouping, sorting);\n      if (columnSortingIndex === sortIndex) return;\n      changeColumnSorting(_assign({\n        sortIndex: sortIndex,\n        keepOther: true\n      }, sorting[columnSortingIndex]));\n    });\n  };\n  GroupingStateBase.prototype.render = function () {\n    var _a = this.state,\n      grouping = _a.grouping,\n      draftGrouping = _a.draftGrouping,\n      expandedGroups = _a.expandedGroups;\n    var _b = this.props,\n      columnExtensions = _b.columnExtensions,\n      columnGroupingEnabled = _b.columnGroupingEnabled;\n    return createElement(Plugin, {\n      name: \"GroupingState\",\n      dependencies: dependencies\n    }, createElement(Getter, {\n      name: \"grouping\",\n      value: grouping\n    }), createElement(Getter, {\n      name: \"draftGrouping\",\n      value: draftGrouping || grouping\n    }), createElement(Getter, {\n      name: \"isColumnGroupingEnabled\",\n      value: columnExtensionValueGetter$2(columnExtensions, columnGroupingEnabled)\n    }), createElement(Action, {\n      name: \"changeColumnGrouping\",\n      action: this.changeColumnGrouping\n    }), createElement(Action, {\n      name: \"draftColumnGrouping\",\n      action: this.draftColumnGrouping\n    }), createElement(Action, {\n      name: \"cancelColumnGroupingDraft\",\n      action: this.cancelColumnGroupingDraft\n    }), createElement(Getter, {\n      name: \"expandedGroups\",\n      value: expandedGroups\n    }), createElement(Action, {\n      name: \"toggleGroupExpanded\",\n      action: this.toggleGroupExpanded\n    }), createElement(Action, {\n      name: \"changeColumnSorting\",\n      action: this.changeColumnSorting\n    }));\n  };\n  GroupingStateBase.defaultProps = {\n    defaultGrouping: [],\n    defaultExpandedGroups: [],\n    columnGroupingEnabled: true\n  };\n  return GroupingStateBase;\n}(PureComponent);\n/***\r\n * A plugin that manages the grouping state. It lists columns used for grouping and stores\r\n * information about expanded/collapsed groups.\r\n * */\nvar GroupingState = GroupingStateBase;\nvar pluginDependencies$4 = [{\n  name: 'GroupingState'\n}];\nvar getCollapsedRowsComputed$1 = function getCollapsedRowsComputed$1(_a) {\n  var getCollapsedRows = _a.getCollapsedRows;\n  return groupCollapsedRowsGetter(getCollapsedRows);\n};\nvar expandedGroupedRowsComputed = function expandedGroupedRowsComputed(_a) {\n  var rows = _a.rows,\n    grouping = _a.grouping,\n    expandedGroups = _a.expandedGroups,\n    isExporting = _a.isExporting;\n  return expandedGroupRows(rows, grouping, expandedGroups, isExporting);\n};\nvar IntegratedGroupingBase = /*#__PURE__*/function (_super) {\n  __extends(IntegratedGroupingBase, _super);\n  function IntegratedGroupingBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  IntegratedGroupingBase.prototype.render = function () {\n    var columnExtensions = this.props.columnExtensions;\n    var getColumnCriteria = function getColumnCriteria(columnName) {\n      return getColumnExtension(columnExtensions, columnName).criteria;\n    };\n    var groupedRowsComputed = function groupedRowsComputed(_a) {\n      var rows = _a.rows,\n        grouping = _a.grouping,\n        getCellValue = _a.getCellValue;\n      return groupedRows(rows, grouping, getCellValue, getColumnCriteria);\n    };\n    return createElement(Plugin, {\n      name: \"IntegratedGrouping\",\n      dependencies: pluginDependencies$4\n    }, createElement(Getter, {\n      name: \"isGroupRow\",\n      value: groupRowChecker\n    }), createElement(Getter, {\n      name: \"getRowLevelKey\",\n      value: groupRowLevelKeyGetter\n    }), createElement(Getter, {\n      name: \"getCollapsedRows\",\n      computed: getCollapsedRowsComputed$1\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: groupedRowsComputed\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: expandedGroupedRowsComputed\n    }));\n  };\n  return IntegratedGroupingBase;\n}(PureComponent);\n/* tslint:disable: max-line-length */\n/** A plugin that performs built-in grouping and group expanding/collapsing. */\nvar IntegratedGrouping = IntegratedGroupingBase;\n/* tslint:enable: max-line-length */\n\nvar pluginDependencies$5 = [{\n  name: 'GroupingState'\n}];\nvar getCollapsedRowsComputed$2 = function getCollapsedRowsComputed$2(_a) {\n  var getCollapsedRows = _a.getCollapsedRows;\n  return groupCollapsedRowsGetter(getCollapsedRows);\n};\nvar expandedGroupedRowsComputed$1 = function expandedGroupedRowsComputed$1(_a) {\n  var rows = _a.rows,\n    grouping = _a.grouping,\n    expandedGroups = _a.expandedGroups,\n    isExporting = _a.isExporting;\n  return expandedGroupRows(rows, grouping, expandedGroups, isExporting);\n};\nvar getRowIdComputed = function getRowIdComputed(_a) {\n  var getRowId = _a.getRowId,\n    rows = _a.rows;\n  return customGroupingRowIdGetter(getRowId, rows);\n};\nvar CustomGroupingBase = /*#__PURE__*/function (_super) {\n  __extends(CustomGroupingBase, _super);\n  function CustomGroupingBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  CustomGroupingBase.prototype.render = function () {\n    var _a = this.props,\n      getChildGroups = _a.getChildGroups,\n      appliedGrouping = _a.grouping,\n      appliedExpandedGroups = _a.expandedGroups;\n    var groupedRowsComputed = function groupedRowsComputed(_a) {\n      var rows = _a.rows,\n        grouping = _a.grouping;\n      return customGroupedRows(rows, grouping, getChildGroups);\n    };\n    return createElement(Plugin, {\n      name: \"CustomGrouping\",\n      dependencies: pluginDependencies$5\n    }, appliedGrouping && createElement(Getter, {\n      name: \"grouping\",\n      value: appliedGrouping\n    }), appliedExpandedGroups && createElement(Getter, {\n      name: \"expandedGroups\",\n      value: appliedExpandedGroups\n    }), createElement(Getter, {\n      name: \"isGroupRow\",\n      value: groupRowChecker\n    }), createElement(Getter, {\n      name: \"getRowLevelKey\",\n      value: groupRowLevelKeyGetter\n    }), createElement(Getter, {\n      name: \"getCollapsedRows\",\n      computed: getCollapsedRowsComputed$2\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: groupedRowsComputed\n    }), createElement(Getter, {\n      name: \"getRowId\",\n      computed: getRowIdComputed\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: expandedGroupedRowsComputed$1\n    }));\n  };\n  return CustomGroupingBase;\n}(PureComponent);\n// tslint:disable-next-line: max-line-length\n/** A plugin that converts custom formatted grouped data to a supported format and performs local group expanding/collapsing. */\nvar CustomGrouping = CustomGroupingBase;\nvar SelectionStateBase = /*#__PURE__*/function (_super) {\n  __extends(SelectionStateBase, _super);\n  function SelectionStateBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      selection: props.selection || props.defaultSelection\n    };\n    var stateHelper = createStateHelper(_this, {\n      selection: function selection() {\n        var onSelectionChange = _this.props.onSelectionChange;\n        return onSelectionChange;\n      }\n    });\n    _this.toggleSelection = stateHelper.applyFieldReducer.bind(stateHelper, 'selection', toggleSelection);\n    return _this;\n  }\n  SelectionStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.selection,\n      selection = _a === void 0 ? prevState.selection : _a;\n    return {\n      selection: selection\n    };\n  };\n  SelectionStateBase.prototype.render = function () {\n    var selection = this.state.selection;\n    return createElement(Plugin, {\n      name: \"SelectionState\"\n    }, createElement(Getter, {\n      name: \"selection\",\n      value: selection\n    }), createElement(Action, {\n      name: \"toggleSelection\",\n      action: this.toggleSelection\n    }));\n  };\n  SelectionStateBase.defaultProps = {\n    defaultSelection: []\n  };\n  return SelectionStateBase;\n}(PureComponent);\n/** A plugin that manages the selection state. */\nvar SelectionState = SelectionStateBase;\nvar rowsWithAvailableToSelectComputed = function rowsWithAvailableToSelectComputed(_a) {\n  var rows = _a.rows,\n    getRowId = _a.getRowId,\n    isGroupRow = _a.isGroupRow;\n  return rowsWithAvailableToSelect(rows, getRowId, isGroupRow);\n};\nvar allSelectedComputed = function allSelectedComputed(_a) {\n  var rows = _a.rows,\n    selection = _a.selection;\n  return allSelected(rows, selection);\n};\nvar someSelectedComputed = function someSelectedComputed(_a) {\n  var rows = _a.rows,\n    selection = _a.selection;\n  return someSelected(rows, selection);\n};\nvar selectAllAvailableComputed = function selectAllAvailableComputed(_a) {\n  var availableToSelect = _a.rows.availableToSelect;\n  return !!availableToSelect.length;\n};\nvar toggleSelectAll = function toggleSelectAll(state, _a, _b) {\n  var availableToSelect = _a.rows.availableToSelect;\n  var toggleSelection = _b.toggleSelection;\n  toggleSelection({\n    state: state,\n    rowIds: availableToSelect\n  });\n};\nvar unwrapRowsComputed = function unwrapRowsComputed(_a) {\n  var rows = _a.rows;\n  return unwrapSelectedRows(rows);\n};\nvar pluginDependencies$6 = [{\n  name: 'SelectionState'\n}];\n// eslint-disable-next-line react/prefer-stateless-function\nvar IntegratedSelectionBase = /*#__PURE__*/function (_super) {\n  __extends(IntegratedSelectionBase, _super);\n  function IntegratedSelectionBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  IntegratedSelectionBase.prototype.render = function () {\n    return createElement(Plugin, {\n      name: \"IntegratedSelection\",\n      dependencies: pluginDependencies$6\n    }, createElement(Getter, {\n      name: \"rows\",\n      computed: rowsWithAvailableToSelectComputed\n    }), createElement(Getter, {\n      name: \"allSelected\",\n      computed: allSelectedComputed\n    }), createElement(Getter, {\n      name: \"someSelected\",\n      computed: someSelectedComputed\n    }), createElement(Getter, {\n      name: \"selectAllAvailable\",\n      computed: selectAllAvailableComputed\n    }), createElement(Action, {\n      name: \"toggleSelectAll\",\n      action: toggleSelectAll\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: unwrapRowsComputed\n    }));\n  };\n  return IntegratedSelectionBase;\n}(PureComponent);\n/* tslint:disable: max-line-length */\n/** A plugin that performs built-in selection. */\nvar IntegratedSelection = IntegratedSelectionBase;\n/* tslint:enable: max-line-length */\n\nvar columnExtensionValueGetter$3 = function columnExtensionValueGetter$3(columnExtensions, defaultValue) {\n  return getColumnExtensionValueGetter(columnExtensions, 'sortingEnabled', defaultValue);\n};\nvar SortingStateBase = /*#__PURE__*/function (_super) {\n  __extends(SortingStateBase, _super);\n  function SortingStateBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      sorting: props.sorting || props.defaultSorting\n    };\n    var stateHelper = createStateHelper(_this, {\n      sorting: function sorting() {\n        var onSortingChange = _this.props.onSortingChange;\n        return onSortingChange;\n      }\n    });\n    _this.changeColumnSorting = stateHelper.applyReducer.bind(stateHelper, function (prevState, payload) {\n      var _a = _this.props.sorting,\n        sorting = _a === void 0 ? prevState.sorting : _a;\n      var persistentSortedColumns = getPersistentSortedColumns(sorting, props.columnExtensions);\n      var keepOther = calculateKeepOther(prevState.sorting, payload.keepOther, persistentSortedColumns);\n      return changeColumnSorting(prevState, _assign(_assign({}, payload), {\n        keepOther: keepOther\n      }));\n    });\n    return _this;\n  }\n  SortingStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.sorting,\n      sorting = _a === void 0 ? prevState.sorting : _a;\n    return {\n      sorting: sorting\n    };\n  };\n  SortingStateBase.prototype.render = function () {\n    var sorting = this.state.sorting;\n    var _a = this.props,\n      columnExtensions = _a.columnExtensions,\n      columnSortingEnabled = _a.columnSortingEnabled;\n    return createElement(Plugin, {\n      name: \"SortingState\"\n    }, createElement(Getter, {\n      name: \"sorting\",\n      value: sorting\n    }), createElement(Getter, {\n      name: \"isColumnSortingEnabled\",\n      value: columnExtensionValueGetter$3(columnExtensions, columnSortingEnabled)\n    }), createElement(Action, {\n      name: \"changeColumnSorting\",\n      action: this.changeColumnSorting\n    }));\n  };\n  SortingStateBase.defaultProps = {\n    defaultSorting: [],\n    columnSortingEnabled: true\n  };\n  return SortingStateBase;\n}(PureComponent);\n// tslint:disable-next-line: max-line-length\n/** A plugin that manages the sorting state. It controls the list of columns that participate in sorting. */\nvar SortingState = SortingStateBase;\nvar pluginDependencies$7 = [{\n  name: 'SortingState'\n}];\nvar IntegratedSortingBase = /*#__PURE__*/function (_super) {\n  __extends(IntegratedSortingBase, _super);\n  function IntegratedSortingBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  IntegratedSortingBase.prototype.render = function () {\n    var columnExtensions = this.props.columnExtensions;\n    var getColumnCompare = function getColumnCompare(columnName) {\n      return getColumnExtension(columnExtensions, columnName).compare;\n    };\n    var rowsComputed = function rowsComputed(_a) {\n      var rows = _a.rows,\n        sorting = _a.sorting,\n        getCellValue = _a.getCellValue,\n        isGroupRow = _a.isGroupRow,\n        getRowLevelKey = _a.getRowLevelKey;\n      return sortedRows(rows, sorting, getCellValue, getColumnCompare, isGroupRow, getRowLevelKey);\n    };\n    return createElement(Plugin, {\n      name: \"IntegratedSorting\",\n      dependencies: pluginDependencies$7\n    }, createElement(Getter, {\n      name: \"rows\",\n      computed: rowsComputed\n    }));\n  };\n  return IntegratedSortingBase;\n}(PureComponent);\n/** A plugin that performs built-in data sorting. */\nvar IntegratedSorting = IntegratedSortingBase;\nvar getTargetColumns = function getTargetColumns(payload, columns) {\n  return payload.filter(function (item) {\n    return item.type === 'column';\n  }).map(function (item) {\n    return columns.find(function (column) {\n      return column.name === item.columnName;\n    });\n  });\n};\n// tslint:disable-next-line: max-line-length\nvar DragDropProviderBase = /*#__PURE__*/function (_super) {\n  __extends(DragDropProviderBase, _super);\n  function DragDropProviderBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      payload: null,\n      clientOffset: null\n    };\n    _this.change = function (_a) {\n      var payload = _a.payload,\n        clientOffset = _a.clientOffset;\n      return _this.setState({\n        payload: payload,\n        clientOffset: clientOffset\n      });\n    };\n    return _this;\n  }\n  DragDropProviderBase.prototype.componentDidMount = function () {\n    this.bodyRef = document.body;\n  };\n  DragDropProviderBase.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      Container = _a.containerComponent,\n      Column = _a.columnComponent;\n    var _b = this.state,\n      payload = _b.payload,\n      clientOffset = _b.clientOffset;\n    return createElement(Plugin, {\n      name: \"DragDropProvider\"\n    }, createElement(Getter, {\n      name: \"draggingEnabled\",\n      value: true\n    }), createElement(Template, {\n      name: \"root\"\n    }, createElement(DragDropProvider$1, {\n      onChange: this.change\n    }, createElement(TemplatePlaceholder, null)), payload && createElement(TemplateConnector, null, function (_a) {\n      var columns = _a.columns;\n      return createPortal(createElement(Container, {\n        clientOffset: clientOffset\n      }, getTargetColumns(payload, columns).map(function (column) {\n        return createElement(Column, {\n          key: column.name,\n          column: column\n        });\n      })), _this.bodyRef);\n    })));\n  };\n  DragDropProviderBase.components = {\n    containerComponent: 'Container',\n    columnComponent: 'Column'\n  };\n  return DragDropProviderBase;\n}(PureComponent);\n// tslint:disable-next-line: max-line-length\n/** A plugin that implements the drag-and-drop functionality and visualizes columns that are being dragged. */\nvar DragDropProvider = DragDropProviderBase;\nvar pluginDependencies$8 = [{\n  name: 'Table'\n}, {\n  name: 'DragDropProvider',\n  optional: true\n}];\nvar tableHeaderRowsComputed = function tableHeaderRowsComputed(_a) {\n  var tableHeaderRows = _a.tableHeaderRows;\n  return tableHeaderRowsWithReordering(tableHeaderRows);\n};\n// tslint:disable-next-line: max-line-length\nvar TableColumnReorderingRaw = /*#__PURE__*/function (_super) {\n  __extends(TableColumnReorderingRaw, _super);\n  function TableColumnReorderingRaw(props) {\n    var _this = _super.call(this, props) || this;\n    _this.cellDimensionGetters = {};\n    _this.cellDimensions = [];\n    _this.state = {\n      order: props.defaultOrder,\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1\n    };\n    _this.onOver = _this.handleOver.bind(_this);\n    _this.onLeave = _this.handleLeave.bind(_this);\n    _this.onDrop = _this.handleDrop.bind(_this);\n    return _this;\n  }\n  TableColumnReorderingRaw.prototype.getState = function () {\n    var orderState = this.state.order;\n    var _a = this.props.order,\n      order = _a === void 0 ? orderState : _a;\n    return _assign(_assign({}, this.state), {\n      order: order\n    });\n  };\n  TableColumnReorderingRaw.prototype.getDraftOrder = function () {\n    var _a = this.getState(),\n      order = _a.order,\n      sourceColumnIndex = _a.sourceColumnIndex,\n      targetColumnIndex = _a.targetColumnIndex;\n    return draftOrder(order, sourceColumnIndex, targetColumnIndex);\n  };\n  TableColumnReorderingRaw.prototype.getAvailableColumns = function () {\n    var _this = this;\n    return this.getDraftOrder().filter(function (columnName) {\n      return !!_this.cellDimensionGetters[columnName];\n    });\n  };\n  TableColumnReorderingRaw.prototype.cacheCellDimensions = function () {\n    var _this = this;\n    this.cellDimensions = this.cellDimensions && this.cellDimensions.length ? this.cellDimensions : this.getAvailableColumns().map(function (columnName) {\n      return _this.cellDimensionGetters[columnName]();\n    });\n  };\n  TableColumnReorderingRaw.prototype.resetCellDimensions = function () {\n    this.cellDimensions = [];\n  };\n  TableColumnReorderingRaw.prototype.ensureCellDimensionGetters = function (tableColumns) {\n    var _this = this;\n    Object.keys(this.cellDimensionGetters).forEach(function (columnName) {\n      var columnIndex = tableColumns.findIndex(function (_a) {\n        var type = _a.type,\n          column = _a.column;\n        return type === TABLE_DATA_TYPE && column.name === columnName;\n      });\n      if (columnIndex === -1) {\n        delete _this.cellDimensionGetters[columnName];\n      }\n    });\n  };\n  // tslint:disable-next-line: max-line-length\n  TableColumnReorderingRaw.prototype.storeCellDimensionsGetter = function (tableColumn, getter, tableColumns) {\n    if (tableColumn.type === TABLE_DATA_TYPE) {\n      this.cellDimensionGetters[tableColumn.column.name] = getter;\n    }\n    this.ensureCellDimensionGetters(tableColumns);\n  };\n  TableColumnReorderingRaw.prototype.handleOver = function (_a) {\n    var payload = _a.payload,\n      x = _a.clientOffset.x;\n    var sourceColumnName = payload[0].columnName;\n    var availableColumns = this.getAvailableColumns();\n    var relativeSourceColumnIndex = availableColumns.indexOf(sourceColumnName);\n    if (relativeSourceColumnIndex === -1) return;\n    this.cacheCellDimensions();\n    var cellDimensions = this.cellDimensions;\n    var relativeTargetIndex = getTableTargetColumnIndex(cellDimensions, x);\n    if (relativeTargetIndex === -1) return;\n    var _b = this.getState(),\n      prevSourceColumnIndex = _b.sourceColumnIndex,\n      prevTargetColumnIndex = _b.targetColumnIndex;\n    var draftOrder = this.getDraftOrder();\n    var targetColumnIndex = draftOrder.indexOf(availableColumns[relativeTargetIndex]);\n    if (targetColumnIndex === prevTargetColumnIndex) return;\n    var sourceColumnIndex = prevSourceColumnIndex === -1 ? draftOrder.indexOf(sourceColumnName) : prevSourceColumnIndex;\n    this.setState({\n      sourceColumnIndex: sourceColumnIndex,\n      targetColumnIndex: targetColumnIndex\n    });\n  };\n  TableColumnReorderingRaw.prototype.handleLeave = function () {\n    this.setState({\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1\n    });\n    this.resetCellDimensions();\n  };\n  TableColumnReorderingRaw.prototype.handleDrop = function () {\n    var _a = this.getState(),\n      sourceColumnIndex = _a.sourceColumnIndex,\n      targetColumnIndex = _a.targetColumnIndex,\n      order = _a.order;\n    var onOrderChange = this.props.onOrderChange;\n    if (sourceColumnIndex === -1 && targetColumnIndex === -1) return;\n    var nextOrder = changeColumnOrder(order, {\n      sourceColumnName: order[sourceColumnIndex],\n      targetColumnName: order[targetColumnIndex]\n    });\n    this.setState({\n      order: nextOrder,\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1\n    });\n    if (onOrderChange) {\n      onOrderChange(nextOrder);\n    }\n    this.resetCellDimensions();\n  };\n  TableColumnReorderingRaw.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      Container = _a.tableContainerComponent,\n      Row = _a.rowComponent,\n      Cell = _a.cellComponent;\n    this.cellDimensionGetters = {};\n    return createElement(Plugin, {\n      name: \"TableColumnReordering\",\n      dependencies: pluginDependencies$8\n    }, createElement(OrderedTableColumns, {\n      order: this.getDraftOrder()\n    }), createElement(Getter, {\n      name: \"tableHeaderRows\",\n      computed: tableHeaderRowsComputed\n    }), createElement(Template, {\n      name: \"table\"\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var draggingEnabled = _a.draggingEnabled;\n        return createElement(Container, _assign({}, params, {\n          onOver: _this.onOver,\n          onLeave: _this.onLeave,\n          onDrop: _this.onDrop,\n          draggingEnabled: draggingEnabled\n        }), createElement(PlaceholderWithRef, null));\n      });\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow;\n        return tableRow.type === TABLE_REORDERING_TYPE;\n      }\n    }, function (params) {\n      return createElement(Row, _assign({}, params));\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow;\n        return tableRow.type === TABLE_REORDERING_TYPE;\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var tableColumns = _a.tableColumns;\n        return createElement(Cell, _assign({}, params, {\n          getCellDimensions: function getCellDimensions(getter) {\n            return _this.storeCellDimensionsGetter(params.tableColumn, getter, tableColumns);\n          }\n        }));\n      });\n    }));\n  };\n  TableColumnReorderingRaw.defaultProps = {\n    defaultOrder: []\n  };\n  TableColumnReorderingRaw.components = {\n    tableContainerComponent: 'TableContainer',\n    rowComponent: 'Row',\n    cellComponent: 'Cell'\n  };\n  return TableColumnReorderingRaw;\n}(PureComponent);\nvar TableContainer = function TableContainer(_a) {\n  var onOver = _a.onOver,\n    onLeave = _a.onLeave,\n    onDrop = _a.onDrop,\n    children = _a.children,\n    draggingEnabled = _a.draggingEnabled;\n  return draggingEnabled ? createElement(DropTarget, {\n    onOver: onOver,\n    onLeave: onLeave,\n    onDrop: onDrop\n  }, children) : children;\n};\n/** A plugin that manages the displayed columns' order. */\nvar TableColumnReordering = withComponents({\n  TableContainer: TableContainer\n})(TableColumnReorderingRaw);\nvar RowPlaceholder = forwardRef(function (props, ref) {\n  return createElement(TemplatePlaceholder, {\n    name: \"tableRow\",\n    params: _assign(_assign({}, props), {\n      ref: ref\n    })\n  });\n});\nvar CellPlaceholder = function CellPlaceholder(props) {\n  return createElement(TemplatePlaceholder, {\n    name: \"tableCell\",\n    params: props\n  });\n};\nvar tableHeaderRows = [];\nvar tableBodyRowsComputed = function tableBodyRowsComputed(_a) {\n  var rows = _a.rows,\n    getRowId = _a.getRowId,\n    isDataLoading = _a.isDataLoading;\n  return tableRowsWithDataRows(rows, getRowId, isDataLoading);\n};\nvar tableFooterRows = [];\nvar defaultMessages = {\n  noData: 'No data'\n};\nvar TableBase = /*#__PURE__*/function (_super) {\n  __extends(TableBase, _super);\n  function TableBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TableBase.prototype.render = function () {\n    var _a = this.props,\n      Layout = _a.layoutComponent,\n      Cell = _a.cellComponent,\n      Row = _a.rowComponent,\n      NoDataRow = _a.noDataRowComponent,\n      NoDataCell = _a.noDataCellComponent,\n      StubRow = _a.stubRowComponent,\n      StubCell = _a.stubCellComponent,\n      StubHeaderCell = _a.stubHeaderCellComponent,\n      columnExtensions = _a.columnExtensions,\n      messages = _a.messages,\n      containerComponent = _a.containerComponent,\n      tableComponent = _a.tableComponent,\n      headComponent = _a.headComponent,\n      bodyComponent = _a.bodyComponent,\n      footerComponent = _a.footerComponent;\n    var getMessage = getMessagesFormatter(_assign(_assign({}, defaultMessages), messages));\n    return createElement(Plugin, {\n      name: \"Table\"\n    }, createElement(Getter, {\n      name: \"tableHeaderRows\",\n      value: tableHeaderRows\n    }), createElement(Getter, {\n      name: \"tableBodyRows\",\n      computed: tableBodyRowsComputed\n    }), createElement(Getter, {\n      name: \"tableFooterRows\",\n      value: tableFooterRows\n    }), createElement(TableColumnsWithDataRowsGetter, {\n      columnExtensions: columnExtensions\n    }), createElement(Getter, {\n      name: \"getTableCellColSpan\",\n      value: tableCellColSpanGetter\n    }), createElement(Template, {\n      name: \"body\"\n    }, createElement(TemplatePlaceholder, {\n      name: \"table\"\n    })), createElement(Template, {\n      name: \"table\"\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var headerRows = _a.tableHeaderRows,\n          bodyRows = _a.tableBodyRows,\n          footerRows = _a.tableFooterRows,\n          columns = _a.tableColumns,\n          getTableCellColSpan = _a.getTableCellColSpan;\n        return createElement(TemplatePlaceholder, {\n          name: \"tableLayout\",\n          params: _assign(_assign({}, params), {\n            tableComponent: tableComponent,\n            headComponent: headComponent,\n            bodyComponent: bodyComponent,\n            footerComponent: footerComponent,\n            containerComponent: containerComponent,\n            headerRows: headerRows,\n            bodyRows: bodyRows,\n            footerRows: footerRows,\n            columns: columns,\n            rowComponent: RowPlaceholder,\n            cellComponent: CellPlaceholder,\n            getCellColSpan: getTableCellColSpan\n          })\n        });\n      });\n    }), createElement(Template, {\n      name: \"tableLayout\"\n    }, function (params) {\n      return createElement(Layout, _assign({}, params));\n    }), createElement(Template, {\n      name: \"tableCell\"\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var headerRows = _a.tableHeaderRows;\n        return isHeaderStubTableCell(params.tableRow, headerRows) ? createElement(StubHeaderCell, _assign({}, params)) : createElement(StubCell, _assign({}, params));\n      });\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isDataTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var getCellValue = _a.getCellValue;\n        var columnName = params.tableColumn.column.name;\n        var value = getCellValue(params.tableRow.row, columnName);\n        return createElement(TemplatePlaceholder, {\n          name: \"valueFormatter\",\n          params: {\n            value: value,\n            row: params.tableRow.row,\n            column: params.tableColumn.column\n          }\n        }, function (content) {\n          return createElement(Cell, _assign({}, params, {\n            row: params.tableRow.row,\n            column: params.tableColumn.column,\n            value: value\n          }), content);\n        });\n      });\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow;\n        return !!isNoDataTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var tableColumns = _a.tableColumns;\n        if (isNoDataTableCell(params.tableColumn, tableColumns)) {\n          return createElement(NoDataCell, _assign({}, params, {\n            getMessage: getMessage\n          }));\n        }\n        return null;\n      });\n    }), createElement(Template, {\n      name: \"tableRow\"\n    }, function (params) {\n      return createElement(StubRow, _assign({}, params));\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow;\n        return !!isDataTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(Row, _assign({}, params, {\n        row: params.tableRow.row\n      }));\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow;\n        return !!isNoDataTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(NoDataRow, _assign({}, params));\n    }));\n  };\n  TableBase.COLUMN_TYPE = TABLE_DATA_TYPE;\n  TableBase.ROW_TYPE = TABLE_DATA_TYPE;\n  TableBase.NODATA_ROW_TYPE = TABLE_NODATA_TYPE;\n  TableBase.defaultProps = {\n    messages: {}\n  };\n  TableBase.components = {\n    tableComponent: 'Table',\n    headComponent: 'TableHead',\n    bodyComponent: 'TableBody',\n    footerComponent: 'TableFooter',\n    containerComponent: 'Container',\n    layoutComponent: 'Layout',\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    noDataRowComponent: 'NoDataRow',\n    noDataCellComponent: 'NoDataCell',\n    stubRowComponent: 'StubRow',\n    stubCellComponent: 'StubCell',\n    stubHeaderCellComponent: 'StubHeaderCell'\n  };\n  return TableBase;\n}(PureComponent);\n/***\r\n * A plugin that renders Grid data as a table. This plugin enables you to customize\r\n * table rows and columns, and contains the Table Row and Table Cell components\r\n * that can be extended by other plugins\r\n * */\nvar Table = TableBase;\nvar TableSelectionBase = /*#__PURE__*/function (_super) {\n  __extends(TableSelectionBase, _super);\n  function TableSelectionBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TableSelectionBase.prototype.render = function () {\n    var _a = this.props,\n      highlightRow = _a.highlightRow,\n      selectByRowClick = _a.selectByRowClick,\n      showSelectionColumn = _a.showSelectionColumn,\n      showSelectAll = _a.showSelectAll,\n      HeaderCell = _a.headerCellComponent,\n      Cell = _a.cellComponent,\n      Row = _a.rowComponent,\n      selectionColumnWidth = _a.selectionColumnWidth;\n    var tableColumnsComputed = function tableColumnsComputed(_a) {\n      var tableColumns = _a.tableColumns;\n      return tableColumnsWithSelection(tableColumns, selectionColumnWidth, showSelectionColumn);\n    };\n    return createElement(Plugin, {\n      name: \"TableSelection\",\n      dependencies: [{\n        name: 'Table'\n      }, {\n        name: 'SelectionState'\n      }, {\n        name: 'IntegratedSelection',\n        optional: !showSelectAll\n      }]\n    }, createElement(Getter, {\n      name: \"tableColumns\",\n      computed: tableColumnsComputed\n    }), highlightRow && createElement(Getter, {\n      name: \"highlightSelectedRow\",\n      value: true\n    }), showSelectionColumn && showSelectAll && createElement(Template, {\n      name: \"tableCell\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isSelectAllTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var selectAllAvailable = _a.selectAllAvailable,\n          allSelected = _a.allSelected,\n          someSelected = _a.someSelected;\n        var toggleSelectAll = _b.toggleSelectAll;\n        return createElement(HeaderCell, _assign({}, params, {\n          disabled: !selectAllAvailable,\n          allSelected: allSelected,\n          someSelected: someSelected,\n          onToggle: function onToggle(select) {\n            return toggleSelectAll(select);\n          }\n        }));\n      });\n    }), showSelectionColumn && createElement(Template, {\n      name: \"tableCell\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isSelectTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var selection = _a.selection;\n        var toggleSelection = _b.toggleSelection;\n        return createElement(Cell, _assign({}, params, {\n          row: params.tableRow.row,\n          selected: selection.indexOf(params.tableRow.rowId) !== -1,\n          onToggle: function onToggle() {\n            return toggleSelection({\n              rowIds: [params.tableRow.rowId]\n            });\n          }\n        }));\n      });\n    }), (highlightRow || selectByRowClick) && createElement(Template, {\n      name: \"tableRow\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow;\n        return !!isDataTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var selection = _a.selection;\n        var toggleSelection = _b.toggleSelection;\n        return createElement(Row, _assign({}, params, {\n          selectByRowClick: selectByRowClick,\n          highlighted: isRowHighlighted(highlightRow, selection, params.tableRow),\n          onToggle: function onToggle() {\n            return toggleSelection({\n              rowIds: [params.tableRow.rowId]\n            });\n          }\n        }));\n      });\n    }));\n  };\n  TableSelectionBase.defaultProps = {\n    highlightRow: false,\n    selectByRowClick: false,\n    showSelectAll: false,\n    showSelectionColumn: true\n  };\n  TableSelectionBase.components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    headerCellComponent: 'HeaderCell'\n  };\n  TableSelectionBase.COLUMN_TYPE = TABLE_SELECT_TYPE;\n  return TableSelectionBase;\n}(PureComponent);\n/***\r\n * A plugin that visualizes table rows' selection state by rendering selection checkboxes\r\n * and highlighting the selected rows.\r\n * */\nvar TableSelection = TableSelectionBase;\n\n// tslint:disable-next-line: max-line-length\nvar RowDetailStateBase = /*#__PURE__*/function (_super) {\n  __extends(RowDetailStateBase, _super);\n  function RowDetailStateBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      expandedRowIds: props.expandedRowIds || props.defaultExpandedRowIds\n    };\n    var stateHelper = createStateHelper(_this, {\n      expandedRowIds: function expandedRowIds() {\n        var onExpandedRowIdsChange = _this.props.onExpandedRowIdsChange;\n        return onExpandedRowIdsChange;\n      }\n    });\n    _this.toggleDetailRowExpanded = stateHelper.applyFieldReducer.bind(stateHelper, 'expandedRowIds', toggleDetailRowExpanded);\n    return _this;\n  }\n  RowDetailStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.expandedRowIds,\n      expandedRowIds = _a === void 0 ? prevState.expandedRowIds : _a;\n    return {\n      expandedRowIds: expandedRowIds\n    };\n  };\n  RowDetailStateBase.prototype.render = function () {\n    var expandedRowIds = this.state.expandedRowIds;\n    return createElement(Plugin, {\n      name: \"RowDetailState\"\n    }, createElement(Getter, {\n      name: \"expandedDetailRowIds\",\n      value: expandedRowIds\n    }), createElement(Action, {\n      name: \"toggleDetailRowExpanded\",\n      action: this.toggleDetailRowExpanded\n    }));\n  };\n  RowDetailStateBase.defaultProps = {\n    defaultExpandedRowIds: []\n  };\n  return RowDetailStateBase;\n}(PureComponent);\n/** A plugin that manages the expanded state for table row details. */\nvar RowDetailState = RowDetailStateBase;\nvar getCellColSpanComputed = function getCellColSpanComputed(_a) {\n  var getTableCellColSpan = _a.getTableCellColSpan;\n  return tableDetailCellColSpanGetter(getTableCellColSpan);\n};\nvar pluginDependencies$9 = [{\n  name: 'RowDetailState'\n}, {\n  name: 'Table'\n}];\nvar TableRowDetailBase = /*#__PURE__*/function (_super) {\n  __extends(TableRowDetailBase, _super);\n  function TableRowDetailBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TableRowDetailBase.prototype.render = function () {\n    var _a = this.props,\n      rowHeight = _a.rowHeight,\n      Content = _a.contentComponent,\n      ToggleCell = _a.toggleCellComponent,\n      Cell = _a.cellComponent,\n      Row = _a.rowComponent,\n      toggleColumnWidth = _a.toggleColumnWidth;\n    var tableColumnsComputed = function tableColumnsComputed(_a) {\n      var tableColumns = _a.tableColumns;\n      return tableColumnsWithDetail(tableColumns, toggleColumnWidth);\n    };\n    var tableBodyRowsComputed = function tableBodyRowsComputed(_a) {\n      var tableBodyRows = _a.tableBodyRows,\n        expandedDetailRowIds = _a.expandedDetailRowIds;\n      return tableRowsWithExpandedDetail(tableBodyRows, expandedDetailRowIds, rowHeight);\n    };\n    return createElement(Plugin, {\n      name: \"TableRowDetail\",\n      dependencies: pluginDependencies$9\n    }, createElement(Getter, {\n      name: \"tableColumns\",\n      computed: tableColumnsComputed\n    }), createElement(Getter, {\n      name: \"tableBodyRows\",\n      computed: tableBodyRowsComputed\n    }), createElement(Getter, {\n      name: \"getTableCellColSpan\",\n      computed: getCellColSpanComputed\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isDetailToggleTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var expandedDetailRowIds = _a.expandedDetailRowIds;\n        var toggleDetailRowExpanded = _b.toggleDetailRowExpanded;\n        return createElement(ToggleCell, _assign({}, params, {\n          row: params.tableRow.row,\n          expanded: isDetailRowExpanded(expandedDetailRowIds, params.tableRow.rowId),\n          onToggle: function onToggle() {\n            return toggleDetailRowExpanded({\n              rowId: params.tableRow.rowId\n            });\n          }\n        }));\n      });\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow;\n        return !!isDetailTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var tableColumns = _a.tableColumns;\n        if (isDetailTableCell(params.tableColumn, tableColumns)) {\n          return createElement(Cell, _assign({}, params, {\n            row: params.tableRow.row\n          }), Content && createElement(Content, {\n            row: params.tableRow.row\n          }));\n        }\n        return null;\n      });\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow;\n        return !!isDetailTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(Row, _assign({}, params, {\n        row: params.tableRow.row\n      }));\n    }));\n  };\n  TableRowDetailBase.ROW_TYPE = TABLE_DETAIL_TYPE;\n  TableRowDetailBase.COLUMN_TYPE = TABLE_DETAIL_TYPE;\n  TableRowDetailBase.defaultProps = {\n    contentComponent: function contentComponent() {\n      return null;\n    }\n  };\n  TableRowDetailBase.components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    toggleCellComponent: 'ToggleCell'\n  };\n  return TableRowDetailBase;\n}(PureComponent);\n/** A plugin that renders detail rows. */\nvar TableRowDetail = TableRowDetailBase;\nvar defaultSummaryMessages = {\n  sum: 'Sum',\n  min: 'Min',\n  max: 'Max',\n  avg: 'Avg',\n  count: 'Count'\n};\nvar TableSummaryContent = function TableSummaryContent(_a) {\n  var column = _a.column,\n    columnSummaries = _a.columnSummaries,\n    formatlessSummaryTypes = _a.formatlessSummaryTypes,\n    Item = _a.itemComponent,\n    messages = _a.messages;\n  var getMessage = getMessagesFormatter(_assign(_assign({}, defaultSummaryMessages), messages));\n  var SummaryItem = function SummaryItem(_a) {\n    var summary = _a.summary,\n      children = _a.children;\n    return createElement(Item, {\n      getMessage: getMessage,\n      type: summary.type,\n      value: summary.value\n    }, children || String(summary.value));\n  };\n  var isFormatlessSummary = function isFormatlessSummary(summary) {\n    return summary.value === null || formatlessSummaryTypes.includes(summary.type) || defaultFormatlessSummaries.includes(summary.type);\n  };\n  return createElement(Fragment, null, columnSummaries.map(function (summary) {\n    if (isFormatlessSummary(summary)) {\n      return createElement(SummaryItem, {\n        key: summary.type,\n        summary: summary\n      });\n    }\n    return createElement(TemplatePlaceholder, {\n      key: summary.type,\n      name: \"valueFormatter\",\n      params: {\n        column: column,\n        value: summary.value\n      }\n    }, function (content) {\n      return createElement(SummaryItem, {\n        summary: summary\n      }, content);\n    });\n  }));\n};\nvar getInlineSummaryComponent = function getInlineSummaryComponent(column, summary, formatlessSummaries) {\n  return function () {\n    return summary.value === null || formatlessSummaries.includes(summary.type) ? createElement(Fragment, null, summary.value) : createElement(TemplatePlaceholder, {\n      key: summary.type,\n      name: \"valueFormatter\",\n      params: {\n        column: column,\n        value: summary.value\n      }\n    }, function (content) {\n      return content || summary.value;\n    });\n  };\n};\nvar flattenGroupInlineSummaries = function flattenGroupInlineSummaries(columns, tableRow, groupSummaryItems, groupSummaryValues, formatlessSummaries) {\n  return getGroupInlineSummaries(groupSummaryItems, columns, groupSummaryValues[tableRow.row.compoundKey]).map(function (colSummaries) {\n    return __spread(colSummaries.summaries.map(function (summary) {\n      return _assign(_assign({}, summary), {\n        columnTitle: colSummaries.column.title,\n        messageKey: summary.type + \"Of\",\n        component: getInlineSummaryComponent(colSummaries.column, summary, formatlessSummaries)\n      });\n    }));\n  }).reduce(function (acc, summaries) {\n    return acc.concat(summaries);\n  }, []);\n};\nvar pluginDependencies$a = [{\n  name: 'GroupingState'\n}, {\n  name: 'Table'\n}, {\n  name: 'DataTypeProvider',\n  optional: true\n}, {\n  name: 'SummaryState',\n  optional: true\n}, {\n  name: 'CustomSummary',\n  optional: true\n}, {\n  name: 'IntegratedSummary',\n  optional: true\n}, {\n  name: 'Table'\n}, {\n  name: 'DataTypeProvider',\n  optional: true\n}, {\n  name: 'TableSelection',\n  optional: true\n}];\nvar side = 'left';\n/** @internal */\nvar defaultMessages$1 = {\n  countOf: 'Count: ',\n  sumOf: 'Sum of {columnTitle} is ',\n  maxOf: 'Max of {columnTitle} is ',\n  minOf: 'Min of {columnTitle} is ',\n  avgOf: 'Avg of {columnTitle} is '\n};\nvar tableBodyRowsComputed$1 = function tableBodyRowsComputed$1(_a) {\n  var tableBodyRows = _a.tableBodyRows,\n    isGroupRow = _a.isGroupRow;\n  return tableRowsWithGrouping(tableBodyRows, isGroupRow);\n};\nvar getCellColSpanComputed$1 = function getCellColSpanComputed$1(_a) {\n  var getTableCellColSpan = _a.getTableCellColSpan,\n    groupSummaryItems = _a.groupSummaryItems,\n    viewport = _a.viewport;\n  var firstVisibleColumnIndex = viewport === null || viewport === void 0 ? void 0 : viewport.columns[0][0];\n  return tableGroupCellColSpanGetter(getTableCellColSpan, groupSummaryItems, firstVisibleColumnIndex);\n};\nvar TableGroupRowBase = /*#__PURE__*/function (_super) {\n  __extends(TableGroupRowBase, _super);\n  function TableGroupRowBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TableGroupRowBase.prototype.render = function () {\n    var _a = this.props,\n      GroupCell = _a.cellComponent,\n      Content = _a.contentComponent,\n      Icon = _a.iconComponent,\n      GroupRow = _a.rowComponent,\n      Container = _a.containerComponent,\n      GroupIndentCell = _a.indentCellComponent,\n      InlineSummary = _a.inlineSummaryComponent,\n      InlineSummaryItem = _a.inlineSummaryItemComponent,\n      SummaryCell = _a.summaryCellComponent,\n      SummaryItem = _a.summaryItemComponent,\n      StubCell = _a.stubCellComponent,\n      indentColumnWidth = _a.indentColumnWidth,\n      contentCellPadding = _a.contentCellPadding,\n      showColumnsWhenGrouped = _a.showColumnsWhenGrouped,\n      columnExtensions = _a.columnExtensions,\n      messages = _a.messages,\n      formatlessSummaryTypes = _a.formatlessSummaryTypes;\n    var getMessage = getMessagesFormatter(_assign(_assign({}, defaultMessages$1), messages));\n    return createElement(Plugin, {\n      name: \"TableGroupRow\",\n      dependencies: pluginDependencies$a\n    }, createElement(TableColumnsWithGrouping, {\n      columnExtensions: columnExtensions,\n      showColumnsWhenGrouped: showColumnsWhenGrouped,\n      indentColumnWidth: indentColumnWidth\n    }), createElement(Getter, {\n      name: \"tableBodyRows\",\n      computed: tableBodyRowsComputed$1\n    }), createElement(Getter, {\n      name: \"getTableCellColSpan\",\n      computed: getCellColSpanComputed$1\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow;\n        return isGroupTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var grouping = _a.grouping,\n          expandedGroups = _a.expandedGroups,\n          groupSummaryItems = _a.groupSummaryItems,\n          groupSummaryValues = _a.groupSummaryValues,\n          columns = _a.columns;\n        var toggleGroupExpanded = _b.toggleGroupExpanded;\n        if (isGroupTableCell(params.tableRow, params.tableColumn)) {\n          var formatlessSummaries = defaultFormatlessSummaries.concat(formatlessSummaryTypes);\n          var inlineSummaries_1 = groupSummaryItems ? flattenGroupInlineSummaries(columns, params.tableRow, groupSummaryItems, groupSummaryValues, formatlessSummaries) : [];\n          var cellIndent = calculateGroupCellIndent(params.tableColumn, grouping, indentColumnWidth);\n          var contentIndent_1 = \"calc(\" + cellIndent + \"px + \" + contentCellPadding + \")\";\n          return createElement(TemplatePlaceholder, {\n            name: \"valueFormatter\",\n            params: {\n              column: params.tableColumn.column,\n              value: params.tableRow.row.value\n            }\n          }, function (content) {\n            return createElement(GroupCell, _assign({}, params, {\n              contentComponent: Content,\n              iconComponent: Icon,\n              containerComponent: Container,\n              row: params.tableRow.row,\n              column: params.tableColumn.column,\n              expanded: expandedGroups.indexOf(params.tableRow.row.compoundKey) !== -1,\n              onToggle: function onToggle() {\n                return toggleGroupExpanded({\n                  groupKey: params.tableRow.row.compoundKey\n                });\n              },\n              inlineSummaries: inlineSummaries_1,\n              inlineSummaryComponent: InlineSummary,\n              inlineSummaryItemComponent: InlineSummaryItem,\n              getMessage: getMessage,\n              position: contentIndent_1,\n              side: side\n            }), content);\n          });\n        }\n        if (isGroupIndentTableCell(params.tableRow, params.tableColumn, grouping)) {\n          var fixedProps = {\n            side: side,\n            position: calculateGroupCellIndent(params.tableColumn, grouping, indentColumnWidth)\n          };\n          if (GroupIndentCell) {\n            return createElement(GroupIndentCell, _assign({}, params, fixedProps, {\n              row: params.tableRow.row,\n              column: params.tableColumn.column\n            }));\n          }\n          return createElement(TemplatePlaceholder, {\n            params: fixedProps\n          });\n        }\n        if (isGroupIndentStubTableCell(params.tableRow, params.tableColumn, grouping)) {\n          return createElement(TemplatePlaceholder, {\n            params: params\n          });\n        }\n        return null;\n      });\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isGroupRowOrdinaryCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var groupSummaryItems = _a.groupSummaryItems,\n          groupSummaryValues = _a.groupSummaryValues,\n          grouping = _a.grouping,\n          tableColumns = _a.tableColumns;\n        var toggleGroupExpanded = _b.toggleGroupExpanded;\n        var tableColumn = params.tableColumn,\n          tableRow = params.tableRow;\n        var onToggle = function onToggle() {\n          return toggleGroupExpanded({\n            groupKey: tableRow.row.compoundKey\n          });\n        };\n        if (isRowSummaryCell(tableRow, tableColumn, grouping, groupSummaryItems)) {\n          var columnSummaries = getColumnSummaries(groupSummaryItems, tableColumn.column.name, groupSummaryValues[tableRow.row.compoundKey], function (summaryItem) {\n            return !summaryItem.showInGroupFooter && summaryItem.alignByColumn;\n          });\n          return createElement(SummaryCell, _assign({}, params, {\n            row: params.tableRow.row,\n            column: params.tableColumn.column,\n            onToggle: onToggle\n          }), createElement(TableSummaryContent, {\n            column: tableColumn.column,\n            columnSummaries: columnSummaries,\n            formatlessSummaryTypes: formatlessSummaryTypes,\n            itemComponent: SummaryItem,\n            messages: messages\n          }));\n        }\n        // NOTE: ensure that right-aligned summary will fit into a column\n        if (isPreviousCellContainSummary(tableRow, tableColumn, tableColumns, grouping, groupSummaryItems) || TABLE_FLEX_TYPE === tableColumn.type) {\n          return createElement(StubCell, _assign({}, params, {\n            onToggle: onToggle\n          }));\n        }\n        return createElement(TemplatePlaceholder, null);\n      });\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow;\n        return isGroupTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(GroupRow, _assign({}, params, {\n        row: params.tableRow.row\n      }));\n    }));\n  };\n  TableGroupRowBase.ROW_TYPE = TABLE_GROUP_TYPE;\n  TableGroupRowBase.COLUMN_TYPE = TABLE_GROUP_TYPE;\n  TableGroupRowBase.defaultProps = {\n    showColumnsWhenGrouped: false,\n    formatlessSummaryTypes: []\n  };\n  TableGroupRowBase.components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    contentComponent: 'Content',\n    iconComponent: 'Icon',\n    containerComponent: 'Container',\n    indentCellComponent: 'IndentCell',\n    inlineSummaryComponent: 'InlineSummary',\n    inlineSummaryItemComponent: 'InlineSummaryItem',\n    summaryCellComponent: 'SummaryCell',\n    summaryItemComponent: 'SummaryItem',\n    stubCellComponent: 'StubCell'\n  };\n  return TableGroupRowBase;\n}(PureComponent);\n/** A plugin that renders group rows and enables them to expand and collapse. */\nvar TableGroupRow = TableGroupRowBase;\nvar tableHeaderRowsComputed$1 = function tableHeaderRowsComputed$1(_a) {\n  var tableHeaderRows = _a.tableHeaderRows;\n  return tableRowsWithHeading(tableHeaderRows || []);\n};\nvar TableHeaderRowBase = /*#__PURE__*/function (_super) {\n  __extends(TableHeaderRowBase, _super);\n  function TableHeaderRowBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TableHeaderRowBase.prototype.render = function () {\n    var _a = this.props,\n      showSortingControls = _a.showSortingControls,\n      showGroupingControls = _a.showGroupingControls,\n      HeaderCell = _a.cellComponent,\n      HeaderRow = _a.rowComponent,\n      Content = _a.contentComponent,\n      SortLabel = _a.sortLabelComponent,\n      GroupButton = _a.groupButtonComponent,\n      Title = _a.titleComponent,\n      messages = _a.messages;\n    var getMessage = getMessagesFormatter(messages);\n    return createElement(Plugin, {\n      name: \"TableHeaderRow\",\n      dependencies: [{\n        name: 'Table'\n      }, {\n        name: 'SortingState',\n        optional: !showSortingControls\n      }, {\n        name: 'GroupingState',\n        optional: !showGroupingControls\n      }, {\n        name: 'DragDropProvider',\n        optional: true\n      }, {\n        name: 'TableColumnResizing',\n        optional: true\n      }]\n    }, createElement(Getter, {\n      name: \"tableHeaderRows\",\n      computed: tableHeaderRowsComputed$1\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isHeadingTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var sorting = _a.sorting,\n          tableColumns = _a.tableColumns,\n          draggingEnabled = _a.draggingEnabled,\n          tableColumnResizingEnabled = _a.tableColumnResizingEnabled,\n          isColumnSortingEnabled = _a.isColumnSortingEnabled,\n          isColumnGroupingEnabled = _a.isColumnGroupingEnabled,\n          columnResizingMode = _a.columnResizingMode;\n        var changeColumnSorting = _b.changeColumnSorting,\n          changeColumnGrouping = _b.changeColumnGrouping,\n          changeTableColumnWidth = _b.changeTableColumnWidth,\n          draftTableColumnWidth = _b.draftTableColumnWidth,\n          cancelTableColumnWidthDraft = _b.cancelTableColumnWidthDraft,\n          _c = _b.storeWidthGetters,\n          storeWidthGetters = _c === void 0 ? function () {} : _c;\n        var _d = params.tableColumn.column,\n          columnName = _d.name,\n          columnTitle = _d.title;\n        var atLeastOneDataColumn = tableColumns.filter(function (_a) {\n          var type = _a.type;\n          return type === TABLE_DATA_TYPE;\n        }).length > 1;\n        var sortingEnabled = isColumnSortingEnabled && isColumnSortingEnabled(columnName);\n        var groupingEnabled = isColumnGroupingEnabled && isColumnGroupingEnabled(columnName) && atLeastOneDataColumn;\n        var nextColumnName = getNextColumnName(tableColumns, columnName);\n        return createElement(HeaderCell, _assign({}, params, {\n          column: params.tableColumn.column,\n          draggingEnabled: draggingEnabled && atLeastOneDataColumn,\n          resizingEnabled: tableColumnResizingEnabled && (!!nextColumnName || columnResizingMode === 'widget'),\n          onWidthChange: function onWidthChange(_a) {\n            var shift = _a.shift;\n            return changeTableColumnWidth({\n              columnName: columnName,\n              nextColumnName: nextColumnName,\n              shift: shift\n            });\n          },\n          onWidthDraft: function onWidthDraft(_a) {\n            var shift = _a.shift;\n            return draftTableColumnWidth({\n              columnName: columnName,\n              nextColumnName: nextColumnName,\n              shift: shift\n            });\n          },\n          onWidthDraftCancel: function onWidthDraftCancel() {\n            return cancelTableColumnWidthDraft();\n          },\n          getCellWidth: function getCellWidth(getter) {\n            return storeWidthGetters({\n              tableColumn: params.tableColumn,\n              getter: getter,\n              tableColumns: tableColumns\n            });\n          }\n        }), createElement(TemplatePlaceholder, {\n          name: \"tableHeaderCellBefore\",\n          params: {\n            column: params.tableColumn.column\n          }\n        }), createElement(Content, {\n          column: params.tableColumn.column,\n          align: params.tableColumn.align\n        }, showSortingControls ? createElement(SortLabel, {\n          column: params.tableColumn.column,\n          align: params.tableColumn.align,\n          direction: getColumnSortingDirection(sorting, columnName) || null,\n          disabled: !sortingEnabled,\n          onSort: function onSort(_a) {\n            var direction = _a.direction,\n              keepOther = _a.keepOther;\n            changeColumnSorting({\n              columnName: columnName,\n              direction: direction,\n              keepOther: keepOther\n            });\n          },\n          getMessage: getMessage\n        }, createElement(Title, null, columnTitle || columnName)) : createElement(Title, null, columnTitle || columnName)), showGroupingControls ? createElement(GroupButton, {\n          disabled: !groupingEnabled,\n          onGroup: function onGroup() {\n            return changeColumnGrouping({\n              columnName: columnName\n            });\n          }\n        }) : null);\n      });\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow;\n        return !!isHeadingTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(HeaderRow, _assign({}, params));\n    }));\n  };\n  TableHeaderRowBase.ROW_TYPE = TABLE_HEADING_TYPE;\n  TableHeaderRowBase.defaultProps = {\n    showSortingControls: false,\n    showGroupingControls: false,\n    messages: {}\n  };\n  TableHeaderRowBase.components = {\n    cellComponent: 'Cell',\n    rowComponent: 'Row',\n    contentComponent: 'Content',\n    sortLabelComponent: 'SortLabel',\n    titleComponent: 'Title',\n    groupButtonComponent: 'GroupButton'\n  };\n  return TableHeaderRowBase;\n}(PureComponent);\nTableHeaderRowBase.components = {\n  cellComponent: 'Cell',\n  rowComponent: 'Row',\n  contentComponent: 'Content',\n  sortLabelComponent: 'SortLabel',\n  titleComponent: 'Title',\n  groupButtonComponent: 'GroupButton'\n};\n/***\r\n * A plugin that renders the table's header row. The Column's `title` field specifies the\r\n * column's title in the header row.The plugin also allows you to manage a column's sorting\r\n * and grouping state and initiate column dragging.\r\n * */\nvar TableHeaderRow = TableHeaderRowBase;\nvar CellPlaceholder$1 = function CellPlaceholder$1(props) {\n  return createElement(TemplatePlaceholder, {\n    params: props\n  });\n};\nvar bandLevelsVisibilityComputed = function bandLevelsVisibilityComputed(_a) {\n  var columnIntervals = _a.columnVisibleIntervals,\n    tableHeaderColumnChains = _a.tableHeaderColumnChains,\n    bandLevels = _a.bandLevels;\n  return bandLevelsVisibility(columnIntervals, tableHeaderColumnChains, bandLevels);\n};\nvar columnVisibleIntervalsComputed = function columnVisibleIntervalsComputed(_a) {\n  var viewport = _a.viewport,\n    tableColumns = _a.tableColumns;\n  return columnVisibleIntervals(viewport, tableColumns);\n};\nvar TableBandHeaderBase = /*#__PURE__*/function (_super) {\n  __extends(TableBandHeaderBase, _super);\n  function TableBandHeaderBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TableBandHeaderBase.prototype.render = function () {\n    var _a = this.props,\n      Cell = _a.cellComponent,\n      Row = _a.rowComponent,\n      HeaderCell = _a.bandedHeaderCellComponent,\n      InvisibleCell = _a.invisibleCellComponent,\n      columnBands = _a.columnBands;\n    var tableHeaderRowsComputed = function tableHeaderRowsComputed(_a) {\n      var tableHeaderRows = _a.tableHeaderRows,\n        tableColumns = _a.tableColumns;\n      return tableRowsWithBands(tableHeaderRows, columnBands, tableColumns);\n    };\n    var tableHeaderColumnChainsComputed = function tableHeaderColumnChainsComputed(_a) {\n      var tableHeaderRows = _a.tableHeaderRows,\n        tableColumns = _a.tableColumns;\n      return tableHeaderColumnChainsWithBands(tableHeaderRows, tableColumns, columnBands);\n    };\n    var bandLevels = columnBandLevels(columnBands);\n    return createElement(Plugin, {\n      name: \"TableBandHeader\",\n      dependencies: [{\n        name: 'Table'\n      }, {\n        name: 'TableHeaderRow'\n      }, {\n        name: 'TableSelection',\n        optional: true\n      }, {\n        name: 'TableEditColumn',\n        optional: true\n      }, {\n        name: 'TableColumnVisibility',\n        optional: true\n      }, {\n        name: 'TableGroupRow',\n        optional: true\n      }]\n    }, createElement(Getter, {\n      name: \"tableHeaderRows\",\n      computed: tableHeaderRowsComputed\n    }), createElement(Getter, {\n      name: \"columnVisibleIntervals\",\n      computed: columnVisibleIntervalsComputed\n    }), createElement(Getter, {\n      name: \"tableHeaderColumnChains\",\n      computed: tableHeaderColumnChainsComputed\n    }), createElement(Getter, {\n      name: \"bandLevels\",\n      value: bandLevels\n    }), createElement(Getter, {\n      name: \"bandLevelsVisibility\",\n      computed: bandLevelsVisibilityComputed\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow;\n        return isBandedOrHeaderRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var tableColumns = _a.tableColumns,\n          tableHeaderRows = _a.tableHeaderRows,\n          tableHeaderColumnChains = _a.tableHeaderColumnChains,\n          columnIntervals = _a.columnVisibleIntervals,\n          levelsVisibility = _a.bandLevelsVisibility;\n        var bandComponent = getBandComponent(params, tableHeaderRows, tableColumns, columnBands, tableHeaderColumnChains, columnIntervals, levelsVisibility);\n        switch (bandComponent.type) {\n          case BAND_DUPLICATE_RENDER:\n            return createElement(TemplatePlaceholder, {\n              params: _assign({}, params)\n            });\n          case BAND_EMPTY_CELL:\n            return createElement(InvisibleCell, null);\n          case BAND_GROUP_CELL:\n            {\n              var _b = bandComponent.payload,\n                value = _b.value,\n                payload = __rest(_b, [\"value\"]);\n              return createElement(Cell, _assign({}, params, payload), value);\n            }\n          case BAND_HEADER_CELL:\n            return createElement(TemplatePlaceholder, {\n              name: \"tableCell\",\n              params: _assign(_assign({}, params), bandComponent.payload)\n            });\n          case BAND_FILL_LEVEL_CELL:\n            return createElement(Cell, _assign({}, params, bandComponent.payload, {\n              style: {\n                whiteSpace: 'pre'\n              }\n            }), ' ');\n          default:\n            return null;\n        }\n      });\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isHeadingTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(HeaderCell, _assign({\n        component: CellPlaceholder$1\n      }, params));\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow;\n        return isBandedTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(Row, _assign({}, params));\n    }));\n  };\n  TableBandHeaderBase.ROW_TYPE = TABLE_BAND_TYPE;\n  TableBandHeaderBase.components = {\n    cellComponent: 'Cell',\n    rowComponent: 'Row',\n    bandedHeaderCellComponent: 'BandedHeaderCell',\n    invisibleCellComponent: 'InvisibleCell'\n  };\n  return TableBandHeaderBase;\n}(PureComponent);\nTableBandHeaderBase.components = {\n  cellComponent: 'Cell',\n  rowComponent: 'Row',\n  bandedHeaderCellComponent: 'BandedHeaderCell',\n  invisibleCellComponent: 'InvisibleCell'\n};\n/** A plugin that renders the banded cells. */\nvar TableBandHeader = TableBandHeaderBase;\nvar pluginDependencies$b = [{\n  name: 'FilteringState'\n}, {\n  name: 'Table'\n}, {\n  name: 'DataTypeProvider',\n  optional: true\n}];\nvar defaultMessages$2 = {\n  filterPlaceholder: 'Filter...',\n  contains: 'Contains',\n  notContains: 'Does not contain',\n  startsWith: 'Starts with',\n  endsWith: 'Ends with',\n  equal: 'Equals',\n  notEqual: 'Does not equal',\n  greaterThan: 'Greater than',\n  greaterThanOrEqual: 'Greater than or equal to',\n  lessThan: 'Less than',\n  lessThanOrEqual: 'Less than or equal to'\n};\nvar TableFilterRowBase = /*#__PURE__*/function (_super) {\n  __extends(TableFilterRowBase, _super);\n  function TableFilterRowBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      filterOperations: {}\n    };\n    return _this;\n  }\n  TableFilterRowBase.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      rowHeight = _a.rowHeight,\n      showFilterSelector = _a.showFilterSelector,\n      FilterCell = _a.cellComponent,\n      FilterRow = _a.rowComponent,\n      FilterSelector = _a.filterSelectorComponent,\n      iconComponent = _a.iconComponent,\n      toggleButtonComponent = _a.toggleButtonComponent,\n      EditorComponent = _a.editorComponent,\n      messages = _a.messages;\n    var getMessage = getMessagesFormatter(_assign(_assign({}, defaultMessages$2), messages));\n    var tableHeaderRowsComputed = function tableHeaderRowsComputed(_a) {\n      var tableHeaderRows = _a.tableHeaderRows;\n      return tableHeaderRowsWithFilter(tableHeaderRows, rowHeight);\n    };\n    return createElement(Plugin, {\n      name: \"TableFilterRow\",\n      dependencies: pluginDependencies$b\n    }, createElement(Getter, {\n      name: \"tableHeaderRows\",\n      computed: tableHeaderRowsComputed\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isFilterTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var filters = _a.filters,\n          isColumnFilteringEnabled = _a.isColumnFilteringEnabled,\n          getAvailableFilterOperations = _a.getAvailableFilterOperations,\n          isDataRemote = _a.isDataRemote;\n        var changeColumnFilter = _b.changeColumnFilter,\n          scrollToRow = _b.scrollToRow;\n        var filterOperations = _this.state.filterOperations;\n        var columnName = params.tableColumn.column.name;\n        var filter = getColumnFilterConfig(filters, columnName);\n        var onFilter = function onFilter(config) {\n          if (isDataRemote) {\n            scrollToRow(TOP_POSITION);\n          }\n          changeColumnFilter({\n            columnName: columnName,\n            config: config\n          });\n        };\n        var columnFilterOperations = getColumnFilterOperations(getAvailableFilterOperations, columnName);\n        var selectedFilterOperation = getSelectedFilterOperation(filterOperations, columnName, filter, columnFilterOperations);\n        var handleFilterOperationChange = function handleFilterOperationChange(value) {\n          var _a;\n          _this.setState({\n            filterOperations: _assign(_assign({}, filterOperations), (_a = {}, _a[columnName] = value, _a))\n          });\n          if (filter && !isFilterValueEmpty(filter.value)) {\n            onFilter({\n              value: filter.value,\n              operation: value\n            });\n          }\n        };\n        var handleFilterValueChange = function handleFilterValueChange(value) {\n          return onFilter(!isFilterValueEmpty(value) ? {\n            value: value,\n            operation: selectedFilterOperation\n          } : null);\n        };\n        var filteringEnabled = isColumnFilteringEnabled(columnName);\n        return createElement(TemplatePlaceholder, {\n          name: \"valueEditor\",\n          params: {\n            column: params.tableColumn.column,\n            value: filter ? filter.value : undefined,\n            onValueChange: handleFilterValueChange,\n            disabled: !filteringEnabled\n          }\n        }, function (content) {\n          return createElement(FilterCell, _assign({}, params, {\n            getMessage: getMessage,\n            column: params.tableColumn.column,\n            filter: filter,\n            filteringEnabled: filteringEnabled,\n            onFilter: onFilter\n          }), showFilterSelector ? createElement(FilterSelector, {\n            toggleButtonComponent: toggleButtonComponent,\n            iconComponent: iconComponent,\n            value: selectedFilterOperation,\n            availableValues: columnFilterOperations,\n            onChange: handleFilterOperationChange,\n            disabled: !filteringEnabled,\n            getMessage: getMessage\n          }) : null, content || createElement(EditorComponent, {\n            value: filter ? filter.value : undefined,\n            disabled: !filteringEnabled,\n            getMessage: getMessage,\n            onChange: handleFilterValueChange\n          }));\n        });\n      });\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow;\n        return !!isFilterTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(FilterRow, _assign({}, params));\n    }));\n  };\n  TableFilterRowBase.ROW_TYPE = TABLE_FILTER_TYPE;\n  TableFilterRowBase.defaultProps = {\n    showFilterSelector: false,\n    messages: {}\n  };\n  TableFilterRowBase.components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    filterSelectorComponent: 'FilterSelector',\n    iconComponent: 'Icon',\n    editorComponent: 'Editor',\n    toggleButtonComponent: 'ToggleButton'\n  };\n  return TableFilterRowBase;\n}(PureComponent);\n/** A plugin that renders a filter row. */\nvar TableFilterRow = TableFilterRowBase;\nvar pluginDependencies$c = [{\n  name: 'EditingState'\n}, {\n  name: 'Table'\n}, {\n  name: 'DataTypeProvider',\n  optional: true\n}];\nvar TableEditRowBase = /*#__PURE__*/function (_super) {\n  __extends(TableEditRowBase, _super);\n  function TableEditRowBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TableEditRowBase.prototype.render = function () {\n    var _a = this.props,\n      EditCell = _a.cellComponent,\n      EditRow = _a.rowComponent,\n      rowHeight = _a.rowHeight;\n    var tableBodyRowsComputed = function tableBodyRowsComputed(_a) {\n      var tableBodyRows = _a.tableBodyRows,\n        editingRowIds = _a.editingRowIds,\n        addedRows = _a.addedRows;\n      return tableRowsWithEditing(tableBodyRows, editingRowIds, addedRows, rowHeight);\n    };\n    return createElement(Plugin, {\n      name: \"TableEditRow\",\n      dependencies: pluginDependencies$c\n    }, createElement(Getter, {\n      name: \"tableBodyRows\",\n      computed: tableBodyRowsComputed\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isEditTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var getCellValue = _a.getCellValue,\n          createRowChange = _a.createRowChange,\n          rowChanges = _a.rowChanges,\n          isColumnEditingEnabled = _a.isColumnEditingEnabled;\n        var changeAddedRow = _b.changeAddedRow,\n          changeRow = _b.changeRow;\n        var _c = params.tableRow,\n          rowId = _c.rowId,\n          row = _c.row;\n        var column = params.tableColumn.column;\n        var columnName = column.name;\n        var isNew = isAddedTableRow(params.tableRow);\n        var changedRow = isNew ? row : _assign(_assign({}, row), getRowChange(rowChanges, rowId));\n        var value = getCellValue(changedRow, columnName);\n        var onValueChange = function onValueChange(newValue) {\n          var changeArgs = {\n            rowId: rowId,\n            change: createRowChange(changedRow, newValue, columnName)\n          };\n          if (isNew) {\n            changeAddedRow(changeArgs);\n          } else {\n            changeRow(changeArgs);\n          }\n        };\n        var editingEnabled = isColumnEditingEnabled(columnName);\n        return createElement(TemplatePlaceholder, {\n          name: \"valueEditor\",\n          params: {\n            column: column,\n            row: row,\n            value: value,\n            onValueChange: onValueChange,\n            disabled: !editingEnabled\n          }\n        }, function (content) {\n          return createElement(EditCell, _assign({}, params, {\n            row: row,\n            column: column,\n            value: value,\n            editingEnabled: editingEnabled,\n            onValueChange: onValueChange\n          }), content);\n        });\n      });\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow;\n        return !!(isEditTableRow(tableRow) || isAddedTableRow(tableRow));\n      }\n    }, function (params) {\n      return createElement(EditRow, _assign({}, params, {\n        row: params.tableRow.row\n      }));\n    }));\n  };\n  TableEditRowBase.ADDED_ROW_TYPE = TABLE_ADDED_TYPE;\n  TableEditRowBase.EDIT_ROW_TYPE = TABLE_EDIT_TYPE;\n  TableEditRowBase.components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell'\n  };\n  return TableEditRowBase;\n}(PureComponent);\n/** A plugin that renders a row being edited. */\nvar TableEditRow = TableEditRowBase;\nvar pluginDependencies$d = [{\n  name: 'EditingState'\n}, {\n  name: 'Table'\n}];\nvar defaultMessages$3 = {\n  addCommand: 'New',\n  editCommand: 'Edit',\n  deleteCommand: 'Delete',\n  commitCommand: 'Save',\n  cancelCommand: 'Cancel'\n};\nvar TableEditColumnBase = /*#__PURE__*/function (_super) {\n  __extends(TableEditColumnBase, _super);\n  function TableEditColumnBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TableEditColumnBase.prototype.render = function () {\n    var _a = this.props,\n      Cell = _a.cellComponent,\n      HeaderCell = _a.headerCellComponent,\n      Command = _a.commandComponent,\n      showAddCommand = _a.showAddCommand,\n      showEditCommand = _a.showEditCommand,\n      showDeleteCommand = _a.showDeleteCommand,\n      width = _a.width,\n      messages = _a.messages;\n    var getMessage = getMessagesFormatter(_assign(_assign({}, defaultMessages$3), messages));\n    var tableColumnsComputed = function tableColumnsComputed(_a) {\n      var tableColumns = _a.tableColumns;\n      return tableColumnsWithEditing(tableColumns, width);\n    };\n    return createElement(Plugin, {\n      name: \"TableEditColumn\",\n      dependencies: pluginDependencies$d\n    }, createElement(Getter, {\n      name: \"tableColumns\",\n      computed: tableColumnsComputed\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isHeadingEditCommandsTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (getters, actions) {\n        return createElement(HeaderCell, _assign({}, params), showAddCommand && createElement(Command, {\n          id: \"add\",\n          text: getMessage('addCommand'),\n          onExecute: function onExecute() {\n            return actions.addRow();\n          }\n        }));\n      });\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isEditCommandsTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (getters, actions) {\n        var isEdit = isEditTableRow(params.tableRow);\n        var isNew = isAddedTableRow(params.tableRow);\n        var isEditing = isEdit || isNew;\n        var rowIds = [params.tableRow.rowId];\n        return createElement(Cell, _assign({}, params, {\n          row: params.tableRow.row\n        }), showEditCommand && !isEditing && createElement(Command, {\n          id: \"edit\",\n          text: getMessage('editCommand'),\n          onExecute: function onExecute() {\n            return actions.startEditRows({\n              rowIds: rowIds\n            });\n          }\n        }), showDeleteCommand && !isEditing && createElement(Command, {\n          id: \"delete\",\n          text: getMessage('deleteCommand'),\n          onExecute: function onExecute() {\n            actions.deleteRows({\n              rowIds: rowIds\n            });\n            actions.commitDeletedRows({\n              rowIds: rowIds\n            });\n          }\n        }), isEditing && createElement(Command, {\n          id: \"commit\",\n          text: getMessage('commitCommand'),\n          onExecute: function onExecute() {\n            if (isNew) {\n              actions.commitAddedRows({\n                rowIds: rowIds\n              });\n            } else {\n              actions.stopEditRows({\n                rowIds: rowIds\n              });\n              actions.commitChangedRows({\n                rowIds: rowIds\n              });\n            }\n          }\n        }), isEditing && createElement(Command, {\n          id: \"cancel\",\n          text: getMessage('cancelCommand'),\n          onExecute: function onExecute() {\n            if (isNew) {\n              actions.cancelAddedRows({\n                rowIds: rowIds\n              });\n            } else {\n              actions.stopEditRows({\n                rowIds: rowIds\n              });\n              actions.cancelChangedRows({\n                rowIds: rowIds\n              });\n            }\n          }\n        }));\n      });\n    }));\n  };\n  TableEditColumnBase.COLUMN_TYPE = TABLE_EDIT_COMMAND_TYPE;\n  TableEditColumnBase.defaultProps = {\n    showAddCommand: false,\n    showEditCommand: false,\n    showDeleteCommand: false,\n    width: 140,\n    messages: {}\n  };\n  TableEditColumnBase.components = {\n    cellComponent: 'Cell',\n    headerCellComponent: 'HeaderCell',\n    commandComponent: 'Command'\n  };\n  return TableEditColumnBase;\n}(PureComponent);\n/***\r\n * A plugin that renders a command column. This column contains controls used for row editing,\r\n * creating, or deleting and committing/canceling changes.\r\n * */\nvar TableEditColumn = TableEditColumnBase;\nvar pluginDependencies$e = [{\n  name: 'Table'\n}];\n// tslint:disable-next-line: max-line-length\nvar TableColumnResizingBase = /*#__PURE__*/function (_super) {\n  __extends(TableColumnResizingBase, _super);\n  function TableColumnResizingBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.widthGetters = {};\n    _this.cachedWidths = {};\n    _this.state = {\n      columnWidths: props.columnWidths || props.defaultColumnWidths,\n      draftColumnWidths: []\n    };\n    var stateHelper = createStateHelper(_this, {\n      columnWidths: function columnWidths() {\n        var onColumnWidthsChange = _this.props.onColumnWidthsChange;\n        return onColumnWidthsChange;\n      }\n    });\n    _this.tableColumnsComputed = memoize(function (columnWidths) {\n      return function (_a) {\n        var tableColumns = _a.tableColumns;\n        return tableColumnsWithWidths(tableColumns, columnWidths, _this.props.resizingMode);\n      };\n    });\n    _this.tableColumnsDraftComputed = memoize(function (draftColumnWidths) {\n      return function (_a) {\n        var tableColumns = _a.tableColumns;\n        return tableColumnsWithDraftWidths(tableColumns, draftColumnWidths, _this.props.resizingMode);\n      };\n    });\n    _this.changeTableColumnWidth = stateHelper.applyReducer.bind(stateHelper, function (prevState, payload) {\n      var cachedWidths = _assign({}, _this.cachedWidths);\n      var _a = _this.props,\n        minColumnWidth = _a.minColumnWidth,\n        maxColumnWidth = _a.maxColumnWidth,\n        columnExtensions = _a.columnExtensions,\n        resizingMode = _a.resizingMode;\n      return changeTableColumnWidth(prevState, _assign(_assign({}, payload), {\n        cachedWidths: cachedWidths,\n        resizingMode: resizingMode,\n        minColumnWidth: minColumnWidth,\n        maxColumnWidth: maxColumnWidth,\n        columnExtensions: columnExtensions\n      }));\n    });\n    _this.draftTableColumnWidth = stateHelper.applyReducer.bind(stateHelper, function (prevState, payload) {\n      _this.storeCache(payload);\n      var cachedWidths = _this.cachedWidths;\n      var _a = _this.props,\n        minColumnWidth = _a.minColumnWidth,\n        maxColumnWidth = _a.maxColumnWidth,\n        columnExtensions = _a.columnExtensions,\n        resizingMode = _a.resizingMode;\n      return draftTableColumnWidth(prevState, _assign(_assign({}, payload), {\n        cachedWidths: cachedWidths,\n        resizingMode: resizingMode,\n        minColumnWidth: minColumnWidth,\n        maxColumnWidth: maxColumnWidth,\n        columnExtensions: columnExtensions\n      }));\n    });\n    _this.cancelTableColumnWidthDraft = stateHelper.applyReducer.bind(stateHelper, cancelTableColumnWidthDraft);\n    _this.storeCache = function (_a) {\n      var columnName = _a.columnName,\n        nextColumnName = _a.nextColumnName;\n      if (Object.keys(_this.cachedWidths).length === 0) {\n        _this.cachedWidths[columnName] = _this.widthGetters[columnName]();\n        if (nextColumnName) {\n          _this.cachedWidths[nextColumnName] = _this.widthGetters[nextColumnName]();\n        }\n      }\n    };\n    _this.clearCache = function () {\n      Object.keys(_this.cachedWidths).forEach(function (columnName) {\n        return delete _this.cachedWidths[columnName];\n      });\n    };\n    _this.storeWidthGetters = memoize(function (_a) {\n      var tableColumn = _a.tableColumn,\n        getter = _a.getter,\n        tableColumns = _a.tableColumns;\n      if (tableColumn.type === TABLE_DATA_TYPE) {\n        _this.widthGetters[tableColumn.column.name] = getter;\n      }\n      Object.keys(_this.widthGetters).forEach(function (columnName) {\n        var columnIndex = tableColumns.findIndex(function (_a) {\n          var type = _a.type,\n            column = _a.column;\n          return type === TABLE_DATA_TYPE && column.name === columnName;\n        });\n        if (columnIndex === -1) {\n          delete _this.widthGetters[columnName];\n        }\n      });\n    });\n    return _this;\n  }\n  TableColumnResizingBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.columnWidths,\n      columnWidths = _a === void 0 ? prevState.columnWidths : _a;\n    return {\n      columnWidths: columnWidths\n    };\n  };\n  TableColumnResizingBase.prototype.componentDidUpdate = function (_, prevState) {\n    var currentWidths = this.state.columnWidths;\n    var prevWidths = prevState.columnWidths;\n    if (currentWidths !== prevWidths) {\n      this.clearCache();\n    }\n  };\n  TableColumnResizingBase.prototype.render = function () {\n    var _a = this.state,\n      columnWidths = _a.columnWidths,\n      draftColumnWidths = _a.draftColumnWidths;\n    var resizingMode = this.props.resizingMode;\n    var tableColumnsComputed = this.tableColumnsComputed(columnWidths);\n    var tableColumnsDraftComputed = this.tableColumnsDraftComputed(draftColumnWidths);\n    return createElement(Plugin, {\n      name: \"TableColumnResizing\",\n      dependencies: pluginDependencies$e\n    }, createElement(Getter, {\n      name: \"tableColumnResizingEnabled\",\n      value: true\n    }), createElement(Getter, {\n      name: \"tableColumns\",\n      computed: tableColumnsComputed\n    }), createElement(Getter, {\n      name: \"tableColumns\",\n      computed: tableColumnsDraftComputed\n    }), createElement(Getter, {\n      name: \"columnResizingMode\",\n      value: resizingMode\n    }), createElement(Action, {\n      name: \"changeTableColumnWidth\",\n      action: this.changeTableColumnWidth\n    }), createElement(Action, {\n      name: \"draftTableColumnWidth\",\n      action: this.draftTableColumnWidth\n    }), createElement(Action, {\n      name: \"cancelTableColumnWidthDraft\",\n      action: this.cancelTableColumnWidthDraft\n    }), createElement(Action, {\n      name: \"storeWidthGetters\",\n      action: this.storeWidthGetters\n    }));\n  };\n  TableColumnResizingBase.defaultProps = {\n    defaultColumnWidths: [],\n    resizingMode: 'widget'\n  };\n  return TableColumnResizingBase;\n}(PureComponent);\n/* tslint:disable: max-line-length */\n/** A plugin that manages table column widths. */\nvar TableColumnResizing = TableColumnResizingBase;\n/* tslint:enable: max-line-length */\n\nvar pluginDependencies$f = [{\n  name: 'PagingState'\n}];\nvar defaultMessages$4 = {\n  showAll: 'All',\n  info: function info(_a) {\n    var from = _a.from,\n      to = _a.to,\n      count = _a.count;\n    return \"\" + from + (from < to ? \"-\" + to : '') + \" of \" + count;\n  }\n};\nvar PagingPanelBase = /*#__PURE__*/function (_super) {\n  __extends(PagingPanelBase, _super);\n  function PagingPanelBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  PagingPanelBase.prototype.render = function () {\n    var _a = this.props,\n      Pager = _a.containerComponent,\n      pageSizes = _a.pageSizes,\n      messages = _a.messages;\n    var getMessage = getMessagesFormatter(_assign(_assign({}, defaultMessages$4), messages));\n    return createElement(Plugin, {\n      name: \"PagingPanel\",\n      dependencies: pluginDependencies$f\n    }, createElement(Template, {\n      name: \"footer\"\n    }, function (params) {\n      return createElement(Fragment, null, createElement(TemplatePlaceholder, null), createElement(TemplateConnector, null, function (_a, _b) {\n        var currentPage = _a.currentPage,\n          pageSize = _a.pageSize,\n          totalCount = _a.totalCount;\n        var setCurrentPage = _b.setCurrentPage,\n          setPageSize = _b.setPageSize;\n        return createElement(Pager, _assign({}, params, {\n          currentPage: currentPage,\n          pageSize: pageSize,\n          totalCount: totalCount,\n          totalPages: pageCount(totalCount, pageSize),\n          pageSizes: pageSizes,\n          getMessage: getMessage,\n          onCurrentPageChange: setCurrentPage,\n          onPageSizeChange: setPageSize\n        }));\n      }));\n    }));\n  };\n  PagingPanelBase.defaultProps = {\n    pageSizes: [],\n    messages: {}\n  };\n  PagingPanelBase.components = {\n    containerComponent: 'Container'\n  };\n  return PagingPanelBase;\n}(PureComponent);\n/** A plugin that renders the paging panel used for navigation through data pages. */\nvar PagingPanel = PagingPanelBase;\nvar defaultProps = {\n  draggingEnabled: false,\n  onDragStart: function onDragStart() {},\n  onDragEnd: function onDragEnd() {}\n};\n// tslint:disable-next-line: max-line-length\nvar ItemLayout = /*#__PURE__*/function (_super) {\n  __extends(ItemLayout, _super);\n  function ItemLayout(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      dragging: false\n    };\n    return _this;\n  }\n  ItemLayout.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      item = _a.item,\n      Item = _a.itemComponent,\n      itemRef = _a.itemRef,\n      draggingEnabled = _a.draggingEnabled,\n      onDragStart = _a.onDragStart,\n      onDragEnd = _a.onDragEnd;\n    var dragging = this.state.dragging;\n    var itemElement = createElement(Item, {\n      item: _assign(_assign({}, item), {\n        draft: dragging || item.draft\n      })\n    });\n    return draggingEnabled ? createElement(DragSource, {\n      payload: [{\n        type: 'column',\n        columnName: item.column.name\n      }],\n      onStart: function onStart() {\n        _this.setState({\n          dragging: true\n        });\n        onDragStart();\n      },\n      onEnd: function onEnd() {\n        _this.setState({\n          dragging: false\n        });\n        onDragEnd();\n      },\n      ref: itemRef\n    }, itemElement) : itemElement;\n  };\n  ItemLayout.defaultProps = defaultProps;\n  return ItemLayout;\n}(PureComponent);\nvar defaultProps$1 = {\n  onGroup: function onGroup() {},\n  draggingEnabled: false,\n  isColumnGroupingEnabled: function isColumnGroupingEnabled() {\n    return false;\n  },\n  onGroupDraft: function onGroupDraft() {},\n  onGroupDraftCancel: function onGroupDraftCancel() {}\n};\n// tslint:disable-next-line: max-line-length\nvar GroupPanelLayoutBase = /*#__PURE__*/function (_super) {\n  __extends(GroupPanelLayoutBase, _super);\n  function GroupPanelLayoutBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.itemRefs = [];\n    _this.draggingColumnName = null;\n    _this.state = {\n      sourceColumnName: null,\n      targetItemIndex: -1\n    };\n    _this.handleDragEvent = function (eventHandler, _a) {\n      var payload = _a.payload,\n        restArgs = __rest(_a, [\"payload\"]);\n      var isColumnGroupingEnabled = _this.props.isColumnGroupingEnabled;\n      var columnName = payload[0].columnName;\n      if (isColumnGroupingEnabled(columnName)) {\n        eventHandler(_assign({\n          payload: payload\n        }, restArgs));\n      }\n    };\n    _this.onEnter = function (_a) {\n      var payload = _a.payload;\n      flushSync(function () {\n        return _this.setState({\n          sourceColumnName: payload[0].columnName\n        });\n      });\n    };\n    _this.onOver = function (_a) {\n      var clientOffset = _a.clientOffset;\n      var _b = _this.props,\n        onGroupDraft = _b.onGroupDraft,\n        items = _b.items;\n      var _c = _this.state,\n        sourceColumnName = _c.sourceColumnName,\n        prevTargetItemIndex = _c.targetItemIndex;\n      // eslint-disable-next-line react/no-find-dom-node\n      var itemGeometries = _this.itemRefs.map(function (ref) {\n        return ref.getBoundingClientRect();\n      });\n      var sourceItemIndex = items.findIndex(function (_a) {\n        var column = _a.column;\n        return column.name === sourceColumnName;\n      });\n      var targetItemIndex = getGroupCellTargetIndex(itemGeometries, sourceItemIndex, clientOffset);\n      if (prevTargetItemIndex === targetItemIndex) return;\n      onGroupDraft({\n        columnName: sourceColumnName,\n        groupIndex: targetItemIndex\n      });\n      _this.setState({\n        targetItemIndex: targetItemIndex\n      });\n    };\n    _this.onLeave = function () {\n      var onGroupDraft = _this.props.onGroupDraft;\n      var sourceColumnName = _this.state.sourceColumnName;\n      if (!_this.draggingColumnName) {\n        _this.resetState();\n        return;\n      }\n      onGroupDraft({\n        columnName: sourceColumnName,\n        groupIndex: -1\n      });\n      _this.setState({\n        targetItemIndex: -1\n      });\n    };\n    _this.onDrop = function () {\n      var onGroup = _this.props.onGroup;\n      var _a = _this.state,\n        sourceColumnName = _a.sourceColumnName,\n        targetItemIndex = _a.targetItemIndex;\n      _this.resetState();\n      onGroup({\n        columnName: sourceColumnName,\n        groupIndex: targetItemIndex\n      });\n    };\n    _this.onDragStart = function (columnName) {\n      _this.draggingColumnName = columnName;\n    };\n    _this.onDragEnd = function () {\n      _this.draggingColumnName = null;\n      var _a = _this.state,\n        sourceColumnName = _a.sourceColumnName,\n        targetItemIndex = _a.targetItemIndex;\n      var onGroup = _this.props.onGroup;\n      if (sourceColumnName && targetItemIndex === -1) {\n        onGroup({\n          columnName: sourceColumnName\n        });\n      }\n      _this.resetState();\n    };\n    return _this;\n  }\n  GroupPanelLayoutBase.prototype.resetState = function () {\n    var onGroupDraftCancel = this.props.onGroupDraftCancel;\n    onGroupDraftCancel();\n    this.setState({\n      sourceColumnName: null,\n      targetItemIndex: -1\n    });\n  };\n  GroupPanelLayoutBase.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      items = _a.items,\n      EmptyMessage = _a.emptyMessageComponent,\n      Container = _a.containerComponent,\n      Item = _a.itemComponent,\n      draggingEnabled = _a.draggingEnabled,\n      isColumnGroupingEnabled = _a.isColumnGroupingEnabled;\n    this.itemRefs = [];\n    var groupPanel = items.length ? createElement(Container, null, items.map(function (item) {\n      var columnName = item.column.name;\n      return createElement(ItemLayout, {\n        key: columnName,\n        item: item,\n        itemComponent: Item,\n        itemRef: function itemRef(element) {\n          return element && _this.itemRefs.push(element);\n        },\n        draggingEnabled: draggingEnabled && isColumnGroupingEnabled(columnName),\n        onDragStart: function onDragStart() {\n          return _this.onDragStart(columnName);\n        },\n        onDragEnd: _this.onDragEnd\n      });\n    })) : createElement(EmptyMessage, null);\n    return draggingEnabled ? createElement(DropTarget, {\n      onEnter: function onEnter(args) {\n        return _this.handleDragEvent(_this.onEnter, args);\n      },\n      onOver: function onOver(args) {\n        return _this.handleDragEvent(_this.onOver, args);\n      },\n      onLeave: function onLeave(args) {\n        return _this.handleDragEvent(_this.onLeave, args);\n      },\n      onDrop: function onDrop(args) {\n        return _this.handleDragEvent(_this.onDrop, args);\n      }\n    }, groupPanel) : groupPanel;\n  };\n  GroupPanelLayoutBase.defaultProps = defaultProps$1;\n  return GroupPanelLayoutBase;\n}(PureComponent);\n/** @internal */\nvar GroupPanelLayout = GroupPanelLayoutBase;\nvar defaultMessages$5 = {\n  groupByColumn: 'Drag a column header here to group by that column'\n};\nvar defaultProps$2 = {\n  showSortingControls: false,\n  showGroupingControls: false,\n  messages: {}\n};\nvar GroupingPanelRaw = /*#__PURE__*/function (_super) {\n  __extends(GroupingPanelRaw, _super);\n  function GroupingPanelRaw() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  GroupingPanelRaw.prototype.render = function () {\n    var _a = this.props,\n      LayoutComponent = _a.layoutComponent,\n      Container = _a.containerComponent,\n      Item = _a.itemComponent,\n      EmptyMessage = _a.emptyMessageComponent,\n      showSortingControls = _a.showSortingControls,\n      showGroupingControls = _a.showGroupingControls,\n      messages = _a.messages;\n    var getMessage = getMessagesFormatter(_assign(_assign({}, defaultMessages$5), messages));\n    var EmptyMessagePlaceholder = function EmptyMessagePlaceholder(_a) {\n      var forwardedRef = _a.forwardedRef;\n      return createElement(EmptyMessage, {\n        getMessage: getMessage,\n        forwardedRef: forwardedRef\n      });\n    };\n    var ItemPlaceholder = function ItemPlaceholder(_a) {\n      var item = _a.item,\n        forwardedRef = _a.forwardedRef;\n      var columnName = item.column.name;\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var sorting = _a.sorting,\n          isColumnSortingEnabled = _a.isColumnSortingEnabled,\n          isColumnGroupingEnabled = _a.isColumnGroupingEnabled;\n        var changeColumnGrouping = _b.changeColumnGrouping,\n          changeColumnSorting = _b.changeColumnSorting;\n        var sortingEnabled = isColumnSortingEnabled && isColumnSortingEnabled(columnName);\n        var groupingEnabled = isColumnGroupingEnabled && isColumnGroupingEnabled(columnName);\n        return createElement(Item, {\n          forwardedRef: forwardedRef,\n          item: item,\n          sortingEnabled: sortingEnabled,\n          groupingEnabled: groupingEnabled,\n          showSortingControls: showSortingControls,\n          sortingDirection: showSortingControls ? getColumnSortingDirection(sorting, columnName) : undefined,\n          showGroupingControls: showGroupingControls,\n          onGroup: function onGroup() {\n            return changeColumnGrouping({\n              columnName: columnName\n            });\n          },\n          onSort: function onSort(_a) {\n            var direction = _a.direction,\n              keepOther = _a.keepOther;\n            return changeColumnSorting({\n              columnName: columnName,\n              direction: direction,\n              keepOther: keepOther\n            });\n          }\n        });\n      });\n    };\n    return createElement(Plugin, {\n      name: \"GroupingPanel\",\n      dependencies: [{\n        name: 'GroupingState'\n      }, {\n        name: 'Toolbar'\n      }, {\n        name: 'SortingState',\n        optional: !showSortingControls\n      }]\n    }, createElement(Template, {\n      name: \"toolbarContent\"\n    }, createElement(TemplateConnector, null, function (_a, _b) {\n      var columns = _a.columns,\n        grouping = _a.grouping,\n        draftGrouping = _a.draftGrouping,\n        draggingEnabled = _a.draggingEnabled,\n        isColumnGroupingEnabled = _a.isColumnGroupingEnabled,\n        isDataRemote = _a.isDataRemote;\n      var changeColumnGrouping = _b.changeColumnGrouping,\n        draftColumnGrouping = _b.draftColumnGrouping,\n        cancelColumnGroupingDraft = _b.cancelColumnGroupingDraft,\n        scrollToRow = _b.scrollToRow;\n      var onGroup = function onGroup(config) {\n        if (isDataRemote) {\n          scrollToRow(TOP_POSITION);\n        }\n        changeColumnGrouping(config);\n      };\n      return createElement(LayoutComponent, {\n        items: groupingPanelItems(columns, grouping, draftGrouping),\n        isColumnGroupingEnabled: isColumnGroupingEnabled,\n        draggingEnabled: draggingEnabled,\n        onGroup: onGroup,\n        onGroupDraft: draftColumnGrouping,\n        onGroupDraftCancel: cancelColumnGroupingDraft,\n        itemComponent: ItemPlaceholder,\n        emptyMessageComponent: EmptyMessagePlaceholder,\n        containerComponent: Container\n      });\n    }), createElement(TemplatePlaceholder, null)));\n  };\n  GroupingPanelRaw.defaultProps = defaultProps$2;\n  GroupingPanelRaw.components = {\n    layoutComponent: 'Layout',\n    containerComponent: 'Container',\n    itemComponent: 'Item',\n    emptyMessageComponent: 'EmptyMessage'\n  };\n  return GroupingPanelRaw;\n}(PureComponent);\n/***\r\n * A plugin that renders the Grouping Panel in the Grid's header. This panel displays grouped\r\n * columns and allows a user to modify grouping options.Optionally, the plugin allows an end-user\r\n * to change grouped columns' sorting order and render sorting indicators.\r\n * */\nvar GroupingPanel = withComponents({\n  Layout: GroupPanelLayout\n})(GroupingPanelRaw);\nvar DataTypeProviderBase = /*#__PURE__*/function (_super) {\n  __extends(DataTypeProviderBase, _super);\n  function DataTypeProviderBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  DataTypeProviderBase.prototype.render = function () {\n    var _a = this.props,\n      columnNames = _a.for,\n      Formatter = _a.formatterComponent,\n      Editor = _a.editorComponent,\n      availableFilterOperations = _a.availableFilterOperations;\n    var getAvailableFilterOperationsComputed = function getAvailableFilterOperationsComputed(_a) {\n      var getAvailableFilterOperations = _a.getAvailableFilterOperations;\n      return getAvailableFilterOperationsGetter(getAvailableFilterOperations, availableFilterOperations, columnNames);\n    };\n    return createElement(Plugin, {\n      name: \"DataTypeProvider\",\n      key: columnNames.join('_')\n    }, createElement(Getter, {\n      name: \"getAvailableFilterOperations\",\n      computed: getAvailableFilterOperationsComputed\n    }), Formatter ? createElement(Template, {\n      name: \"valueFormatter\",\n      predicate: function predicate(_a) {\n        var column = _a.column;\n        return columnNames.includes(column.name);\n      }\n    }, function (params) {\n      return createElement(Formatter, _assign({}, params));\n    }) : null, Editor ? createElement(Template, {\n      name: \"valueEditor\",\n      predicate: function predicate(_a) {\n        var column = _a.column;\n        return columnNames.includes(column.name);\n      }\n    }, function (params) {\n      return createElement(Editor, _assign({}, params));\n    }) : null);\n  };\n  return DataTypeProviderBase;\n}(PureComponent);\n// tslint:disable-next-line: max-line-length\n/** A plugin that allows you to customize formatting options and editors depending on the data type. */\nvar DataTypeProvider = DataTypeProviderBase;\nvar pluginDependencies$g = [{\n  name: 'Table'\n}];\nvar defaultMessages$6 = {\n  noColumns: 'Nothing to show'\n};\nvar columnExtensionValueGetter$4 = function columnExtensionValueGetter$4(columnExtensions, defaultValue) {\n  return getColumnExtensionValueGetter(columnExtensions, 'togglingEnabled', defaultValue);\n};\n// tslint:disable-next-line: max-line-length\nvar TableColumnVisibilityBase = /*#__PURE__*/function (_super) {\n  __extends(TableColumnVisibilityBase, _super);\n  function TableColumnVisibilityBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      hiddenColumnNames: props.hiddenColumnNames || props.defaultHiddenColumnNames\n    };\n    var stateHelper = createStateHelper(_this, {\n      hiddenColumnNames: function hiddenColumnNames() {\n        var onHiddenColumnNamesChange = _this.props.onHiddenColumnNamesChange;\n        return onHiddenColumnNamesChange;\n      }\n    });\n    _this.toggleColumnVisibility = stateHelper.applyFieldReducer.bind(stateHelper, 'hiddenColumnNames', toggleColumn);\n    return _this;\n  }\n  TableColumnVisibilityBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.hiddenColumnNames,\n      hiddenColumnNames = _a === void 0 ? prevState.hiddenColumnNames : _a;\n    return {\n      hiddenColumnNames: hiddenColumnNames\n    };\n  };\n  TableColumnVisibilityBase.prototype.render = function () {\n    var _a = this.props,\n      EmptyMessage = _a.emptyMessageComponent,\n      messages = _a.messages;\n    var getMessage = getMessagesFormatter(_assign(_assign({}, defaultMessages$6), messages));\n    var hiddenColumnNames = this.state.hiddenColumnNames;\n    var _b = this.props,\n      columnExtensions = _b.columnExtensions,\n      columnTogglingEnabled = _b.columnTogglingEnabled;\n    return createElement(Plugin, {\n      name: \"TableColumnVisibility\",\n      dependencies: pluginDependencies$g\n    }, createElement(VisibleTableColumns, {\n      hiddenColumnNames: hiddenColumnNames\n    }), createElement(Getter, {\n      name: \"isColumnTogglingEnabled\",\n      value: columnExtensionValueGetter$4(columnExtensions, columnTogglingEnabled)\n    }), createElement(Action, {\n      name: \"toggleColumnVisibility\",\n      action: this.toggleColumnVisibility\n    }), createElement(Template, {\n      name: \"table\"\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var tableColumns = _a.tableColumns;\n        return tableDataColumnsExist(tableColumns) ? createElement(TemplatePlaceholder, null) : createElement(EmptyMessage, _assign({\n          getMessage: getMessage\n        }, params));\n      });\n    }));\n  };\n  TableColumnVisibilityBase.defaultProps = {\n    defaultHiddenColumnNames: [],\n    messages: {},\n    columnTogglingEnabled: true\n  };\n  TableColumnVisibilityBase.components = {\n    emptyMessageComponent: 'EmptyMessage'\n  };\n  return TableColumnVisibilityBase;\n}(PureComponent);\nTableColumnVisibilityBase.components = {\n  emptyMessageComponent: 'EmptyMessage'\n};\n/* tslint:disable: max-line-length */\n/** A plugin that manages Grid columns' visibility. */\nvar TableColumnVisibility = TableColumnVisibilityBase;\n/* tslint:enable: max-line-length */\n\nvar ToolbarBase = /*#__PURE__*/function (_super) {\n  __extends(ToolbarBase, _super);\n  function ToolbarBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ToolbarBase.prototype.render = function () {\n    var _a = this.props,\n      Root = _a.rootComponent,\n      FlexibleSpaceComponent = _a.flexibleSpaceComponent;\n    return createElement(Plugin, {\n      name: \"Toolbar\"\n    }, createElement(Template, {\n      name: \"header\"\n    }, function (params) {\n      return createElement(Fragment, null, createElement(Root, _assign({}, params), createElement(TemplatePlaceholder, {\n        name: \"toolbarContent\"\n      })), createElement(TemplatePlaceholder, null));\n    }), createElement(Template, {\n      name: \"toolbarContent\"\n    }, createElement(FlexibleSpaceComponent, null)));\n  };\n  ToolbarBase.components = {\n    rootComponent: 'Root',\n    flexibleSpaceComponent: 'FlexibleSpace'\n  };\n  return ToolbarBase;\n}(PureComponent);\n/** A plugin that renders the Grid toolbar. */\nvar Toolbar = ToolbarBase;\nvar TreeDataStateBase = /*#__PURE__*/function (_super) {\n  __extends(TreeDataStateBase, _super);\n  function TreeDataStateBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      expandedRowIds: props.expandedRowIds || props.defaultExpandedRowIds\n    };\n    var stateHelper = createStateHelper(_this, {\n      expandedRowIds: function expandedRowIds() {\n        var onExpandedRowIdsChange = _this.props.onExpandedRowIdsChange;\n        return onExpandedRowIdsChange;\n      }\n    });\n    _this.toggleRowExpanded = stateHelper.applyFieldReducer.bind(stateHelper, 'expandedRowIds', toggleRowExpanded);\n    return _this;\n  }\n  TreeDataStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.expandedRowIds,\n      expandedRowIds = _a === void 0 ? prevState.expandedRowIds : _a;\n    return {\n      expandedRowIds: expandedRowIds\n    };\n  };\n  TreeDataStateBase.prototype.render = function () {\n    var expandedRowIds = this.state.expandedRowIds;\n    return createElement(Plugin, {\n      name: \"TreeDataState\"\n    }, createElement(Getter, {\n      name: \"expandedRowIds\",\n      value: expandedRowIds\n    }), ' ', createElement(Action, {\n      name: \"toggleRowExpanded\",\n      action: this.toggleRowExpanded\n    }));\n  };\n  TreeDataStateBase.defaultProps = {\n    defaultExpandedRowIds: []\n  };\n  return TreeDataStateBase;\n}(PureComponent);\n/** A plugin that manages the expanded state for tree rows. */\nvar TreeDataState = TreeDataStateBase;\nvar pluginDependencies$h = [{\n  name: 'TreeDataState'\n}];\nvar expandedTreeRowsComputed = function expandedTreeRowsComputed(_a) {\n  var rows = _a.rows,\n    getRowId = _a.getRowId,\n    expandedRowIds = _a.expandedRowIds;\n  return expandedTreeRows(rows, getRowId, expandedRowIds);\n};\nvar getRowIdComputed$1 = function getRowIdComputed$1(_a) {\n  var getRowId = _a.getRowId,\n    rows = _a.rows;\n  return customTreeRowIdGetter(getRowId, rows);\n};\nvar getRowLevelKeyComputed = function getRowLevelKeyComputed(_a) {\n  var getRowLevelKey = _a.getRowLevelKey,\n    rows = _a.rows;\n  return customTreeRowLevelKeyGetter(getRowLevelKey, rows);\n};\nvar isTreeRowLeafComputed = function isTreeRowLeafComputed(_a) {\n  var rows = _a.rows;\n  return isTreeRowLeafGetter(rows);\n};\nvar getTreeRowLevelComputed = function getTreeRowLevelComputed(_a) {\n  var rows = _a.rows;\n  return getTreeRowLevelGetter(rows);\n};\nvar collapsedTreeRowsGetterComputed = function collapsedTreeRowsGetterComputed(_a) {\n  var rows = _a.rows,\n    getCollapsedRows = _a.getCollapsedRows;\n  return collapsedTreeRowsGetter(getCollapsedRows, rows);\n};\nvar unwrappedTreeRowsComputed = function unwrappedTreeRowsComputed(_a) {\n  var rows = _a.rows;\n  return unwrappedCustomTreeRows(rows);\n};\nvar CustomTreeDataBase = /*#__PURE__*/function (_super) {\n  __extends(CustomTreeDataBase, _super);\n  function CustomTreeDataBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  CustomTreeDataBase.prototype.render = function () {\n    var getChildRows = this.props.getChildRows;\n    var treeRowsComputed = function treeRowsComputed(_a) {\n      var rows = _a.rows;\n      return customTreeRowsWithMeta(rows, getChildRows);\n    };\n    return createElement(Plugin, {\n      name: \"CustomTreeData\",\n      dependencies: pluginDependencies$h\n    }, createElement(Getter, {\n      name: \"rows\",\n      computed: treeRowsComputed\n    }), createElement(Getter, {\n      name: \"getRowId\",\n      computed: getRowIdComputed$1\n    }), createElement(Getter, {\n      name: \"getRowLevelKey\",\n      computed: getRowLevelKeyComputed\n    }), createElement(Getter, {\n      name: \"isTreeRowLeaf\",\n      computed: isTreeRowLeafComputed\n    }), createElement(Getter, {\n      name: \"getTreeRowLevel\",\n      computed: getTreeRowLevelComputed\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: expandedTreeRowsComputed\n    }), createElement(Getter, {\n      name: \"getCollapsedRows\",\n      computed: collapsedTreeRowsGetterComputed\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: unwrappedTreeRowsComputed\n    }));\n  };\n  return CustomTreeDataBase;\n}(PureComponent);\n/***\r\n * A plugin that converts custom formatted tree data to a supported format and performs\r\n * local row expanding/collapsing.\r\n * */\nvar CustomTreeData = CustomTreeDataBase;\nvar TableTreeColumnBase = /*#__PURE__*/function (_super) {\n  __extends(TableTreeColumnBase, _super);\n  function TableTreeColumnBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TableTreeColumnBase.prototype.render = function () {\n    var _a = this.props,\n      forColumnName = _a.for,\n      showSelectionControls = _a.showSelectionControls,\n      showSelectAll = _a.showSelectAll,\n      Indent = _a.indentComponent,\n      ExpandButton = _a.expandButtonComponent,\n      Checkbox = _a.checkboxComponent,\n      Content = _a.contentComponent,\n      Cell = _a.cellComponent;\n    return createElement(Plugin, {\n      name: \"TableTreeColumn\",\n      dependencies: [{\n        name: 'DataTypeProvider',\n        optional: true\n      }, {\n        name: 'TreeDataState'\n      }, {\n        name: 'SelectionState',\n        optional: !showSelectionControls\n      }, {\n        name: 'IntegratedSelection',\n        optional: !showSelectAll\n      }, {\n        name: 'Table'\n      }, {\n        name: 'TableHeaderRow',\n        optional: true\n      }],\n      key: forColumnName\n    }, createElement(Getter, {\n      name: \"tableTreeColumnName\",\n      value: forColumnName\n    }), createElement(Template, {\n      name: \"tableHeaderCellBefore\",\n      predicate: function predicate(_a) {\n        var column = _a.column;\n        return column.name === forColumnName;\n      }\n    }, createElement(ExpandButton, {\n      visible: false,\n      expanded: false,\n      onToggle: function onToggle() {}\n    }), showSelectionControls && showSelectAll && createElement(TemplateConnector, null, function (_a, _b) {\n      var selectAllAvailable = _a.selectAllAvailable,\n        allSelected = _a.allSelected,\n        someSelected = _a.someSelected;\n      var toggleSelectAll = _b.toggleSelectAll;\n      return createElement(Checkbox, {\n        disabled: !selectAllAvailable,\n        checked: allSelected,\n        indeterminate: someSelected,\n        onChange: toggleSelectAll\n      });\n    })), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isTreeTableCell(tableRow, tableColumn, forColumnName);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var getCollapsedRows = _a.getCollapsedRows,\n          expandedRowIds = _a.expandedRowIds,\n          selection = _a.selection,\n          isTreeRowLeaf = _a.isTreeRowLeaf,\n          getTreeRowLevel = _a.getTreeRowLevel,\n          getCellValue = _a.getCellValue;\n        var toggleRowExpanded = _b.toggleRowExpanded,\n          toggleSelection = _b.toggleSelection;\n        var _c = params.tableRow,\n          row = _c.row,\n          rowId = _c.rowId;\n        var columnName = params.tableColumn.column.name;\n        var value = getCellValue(row, columnName);\n        var collapsedRows = getCollapsedRows(row);\n        return createElement(TemplatePlaceholder, {\n          name: \"valueFormatter\",\n          params: {\n            value: value,\n            row: row,\n            column: params.tableColumn.column\n          }\n        }, function (content) {\n          return createElement(Cell, _assign({}, params, {\n            row: row,\n            column: params.tableColumn.column,\n            value: value\n          }), createElement(Indent, {\n            level: getTreeRowLevel(row)\n          }), createElement(ExpandButton, {\n            visible: collapsedRows ? !!collapsedRows.length : !isTreeRowLeaf(row),\n            expanded: expandedRowIds.indexOf(rowId) > -1,\n            onToggle: function onToggle() {\n              return toggleRowExpanded({\n                rowId: rowId\n              });\n            }\n          }), showSelectionControls && createElement(Checkbox, {\n            disabled: false,\n            checked: selection.indexOf(rowId) > -1,\n            indeterminate: false,\n            onChange: function onChange() {\n              return toggleSelection({\n                rowIds: [rowId]\n              });\n            }\n          }), createElement(Content, null, content || value));\n        });\n      });\n    }));\n  };\n  TableTreeColumnBase.defaultProps = {\n    showSelectionControls: false,\n    showSelectAll: false\n  };\n  TableTreeColumnBase.components = {\n    cellComponent: 'Cell',\n    contentComponent: 'Content',\n    indentComponent: 'Indent',\n    expandButtonComponent: 'ExpandButton',\n    checkboxComponent: 'Checkbox'\n  };\n  return TableTreeColumnBase;\n}(PureComponent);\n/** A plugin that renders a table column with a toggle button and sorting indicators. */\nvar TableTreeColumn = TableTreeColumnBase;\nvar SearchStateBase = /*#__PURE__*/function (_super) {\n  __extends(SearchStateBase, _super);\n  function SearchStateBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      value: props.value || props.defaultValue\n    };\n    var stateHelper = createStateHelper(_this, {\n      value: function value() {\n        var onValueChange = _this.props.onValueChange;\n        return onValueChange;\n      }\n    });\n    _this.changeValue = stateHelper.applyFieldReducer.bind(stateHelper, 'value', changeSearchValue);\n    return _this;\n  }\n  SearchStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.value,\n      value = _a === void 0 ? prevState.value : _a;\n    return {\n      value: value\n    };\n  };\n  SearchStateBase.prototype.render = function () {\n    var value = this.state.value;\n    var filterExpressionComputed = function filterExpressionComputed(_a) {\n      var filterExpression = _a.filterExpression,\n        columns = _a.columns;\n      return searchFilterExpression(value, columns, filterExpression);\n    };\n    return createElement(Plugin, {\n      name: \"SearchState\"\n    }, createElement(Getter, {\n      name: \"filterExpression\",\n      computed: filterExpressionComputed\n    }), createElement(Getter, {\n      name: \"searchValue\",\n      value: value\n    }), createElement(Action, {\n      name: \"changeSearchValue\",\n      action: this.changeValue\n    }));\n  };\n  SearchStateBase.defaultProps = {\n    defaultValue: ''\n  };\n  return SearchStateBase;\n}(PureComponent);\n/** A plugin that manages the search state. */\nvar SearchState = SearchStateBase;\nvar pluginDependencies$i = [{\n  name: 'Toolbar'\n}, {\n  name: 'SearchState'\n}];\nvar defaultMessages$7 = {\n  searchPlaceholder: 'Search...'\n};\nvar SearchPanelBase = /*#__PURE__*/function (_super) {\n  __extends(SearchPanelBase, _super);\n  function SearchPanelBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.ref = createRef();\n    return _this;\n  }\n  SearchPanelBase.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      Input = _a.inputComponent,\n      messages = _a.messages;\n    var getMessage = getMessagesFormatter(_assign(_assign({}, defaultMessages$7), messages));\n    return createElement(Plugin, {\n      name: \"SearchPanel\",\n      dependencies: pluginDependencies$i\n    }, createElement(Template, {\n      name: \"toolbarContent\"\n    }, createElement(TemplatePlaceholder, null), createElement(TemplateConnector, null, function (_a, _b) {\n      var searchValue = _a.searchValue,\n        isDataRemote = _a.isDataRemote;\n      var changeSearchValue = _b.changeSearchValue,\n        scrollToRow = _b.scrollToRow,\n        setSearchPanelRef = _b.setSearchPanelRef;\n      var onValueChange = function onValueChange(value) {\n        if (isDataRemote) {\n          scrollToRow(TOP_POSITION);\n        }\n        changeSearchValue(value);\n      };\n      if (setSearchPanelRef) {\n        setSearchPanelRef(_this.ref);\n      }\n      return createElement(Input, {\n        value: searchValue,\n        inputRef: _this.ref,\n        onValueChange: onValueChange,\n        getMessage: getMessage\n      });\n    })));\n  };\n  SearchPanelBase.defaultProps = {\n    messages: {}\n  };\n  SearchPanelBase.components = {\n    inputComponent: 'Input'\n  };\n  return SearchPanelBase;\n}(PureComponent);\n/** A plugin that renders the Search Panel. */\nvar SearchPanel = SearchPanelBase;\nvar tableHeaderRowsComputed$2 = function tableHeaderRowsComputed$2(_a) {\n  var tableHeaderRows = _a.tableHeaderRows;\n  return tableHeaderRowsWithFixed(tableHeaderRows);\n};\nvar tableHeaderColumnChainsComputed = function tableHeaderColumnChainsComputed(_a) {\n  var tableColumns = _a.tableColumns,\n    tableHeaderRows = _a.tableHeaderRows,\n    tableHeaderColumnChains = _a.tableHeaderColumnChains;\n  return tableHeaderColumnChainsWithFixed(tableHeaderColumnChains, tableHeaderRows, tableColumns);\n};\nvar CellPlaceholder$2 = function CellPlaceholder$2(props) {\n  return createElement(TemplatePlaceholder, {\n    params: props\n  });\n};\nvar pluginDependencies$j = [{\n  name: 'Table'\n}, {\n  name: 'TableBandHeader',\n  optional: true\n}, {\n  name: 'TableColumnReordering',\n  optional: true\n}, {\n  name: 'TableEditColumn',\n  optional: true\n}, {\n  name: 'TableEditRow',\n  optional: true\n}, {\n  name: 'TableFilterRow',\n  optional: true\n}, {\n  name: 'TableGroupRow',\n  optional: true\n}, {\n  name: 'TableHeaderRow',\n  optional: true\n}, {\n  name: 'TableRowDetail',\n  optional: true\n}, {\n  name: 'TableSelection',\n  optional: true\n}, {\n  name: 'TableSummaryRow',\n  optional: true\n}, {\n  name: 'TableTreeColumn',\n  optional: true\n}];\n// tslint:disable-next-line: max-line-length\nvar TableFixedColumnsBase = /*#__PURE__*/function (_super) {\n  __extends(TableFixedColumnsBase, _super);\n  function TableFixedColumnsBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      tableColumnDimensions: {}\n    };\n    return _this;\n  }\n  TableFixedColumnsBase.prototype.handleListenerSizeChange = function (key, width) {\n    var tableColumnDimensions = this.state.tableColumnDimensions;\n    if (tableColumnDimensions[key] !== width) {\n      this.setState(function (state) {\n        var _a;\n        return {\n          tableColumnDimensions: _assign(_assign({}, state.tableColumnDimensions), (_a = {}, _a[key] = width, _a))\n        };\n      });\n    }\n  };\n  TableFixedColumnsBase.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      Cell = _a.cellComponent,\n      ListenerRow = _a.listenerRowComponent,\n      ListenerCell = _a.listenerCellComponent;\n    var leftColumns = this.props.leftColumns;\n    var rightColumns = this.props.rightColumns;\n    var tableColumnsComputed = function tableColumnsComputed(_a) {\n      var tableColumns = _a.tableColumns;\n      return tableColumnsWithFixed(tableColumns, leftColumns, rightColumns);\n    };\n    return createElement(Plugin, {\n      name: \"TableFixedColumns\",\n      dependencies: pluginDependencies$j\n    }, createElement(Getter, {\n      name: \"tableHeaderRows\",\n      computed: tableHeaderRowsComputed$2\n    }), createElement(Getter, {\n      name: \"tableColumns\",\n      computed: tableColumnsComputed\n    }), createElement(Getter, {\n      name: \"tableHeaderColumnChains\",\n      computed: tableHeaderColumnChainsComputed\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function predicate(_a) {\n        var tableColumn = _a.tableColumn;\n        return !!tableColumn.fixed;\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var tableColumns = _a.tableColumns,\n          tableHeaderColumnChains = _a.tableHeaderColumnChains,\n          selection = _a.selection,\n          focused = _a.focused,\n          highlightSelectedRow = _a.highlightSelectedRow;\n        var selected = isRowHighlighted(highlightSelectedRow, selection, params.tableRow, focused);\n        var tableColumnDimensions = _this.state.tableColumnDimensions;\n        var fixedColumnProps = calculateFixedColumnProps(params, {\n          leftColumns: leftColumns,\n          rightColumns: rightColumns\n        }, tableColumns, tableColumnDimensions, tableHeaderColumnChains);\n        return createElement(Cell, _assign({}, params, fixedColumnProps, {\n          component: CellPlaceholder$2,\n          selected: selected\n        }));\n      });\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow;\n        return !!isFixedTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(ListenerRow, _assign({}, params));\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow;\n        return !!isFixedTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(ListenerCell, _assign({}, params, {\n        listen: !!params.tableColumn.fixed,\n        onSizeChange: function onSizeChange(_a) {\n          var width = _a.width;\n          return _this.handleListenerSizeChange(params.tableColumn.key, width);\n        }\n      }));\n    }));\n  };\n  TableFixedColumnsBase.components = {\n    cellComponent: 'Cell',\n    listenerRowComponent: 'ListenerRow',\n    listenerCellComponent: 'ListenerCell'\n  };\n  TableFixedColumnsBase.defaultProps = {\n    leftColumns: [],\n    rightColumns: []\n  };\n  return TableFixedColumnsBase;\n}(PureComponent);\n/** A plugin that enables you to fix columns to the left and right sides of the grid. */\nvar TableFixedColumns = TableFixedColumnsBase;\nvar groupSummaryItemsComputed = function groupSummaryItemsComputed(_a) {\n  var groupSummaryItems = _a.groupSummaryItems;\n  return prepareGroupSummaryItems(groupSummaryItems);\n};\nvar SummaryStateBase = /*#__PURE__*/function (_super) {\n  __extends(SummaryStateBase, _super);\n  function SummaryStateBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  SummaryStateBase.prototype.render = function () {\n    var _a = this.props,\n      totalItems = _a.totalItems,\n      groupItems = _a.groupItems,\n      treeItems = _a.treeItems;\n    return createElement(Plugin, {\n      name: \"SummaryState\"\n    }, createElement(Getter, {\n      name: \"totalSummaryItems\",\n      value: totalItems\n    }), createElement(Getter, {\n      name: \"groupSummaryItems\",\n      value: groupItems\n    }), createElement(Getter, {\n      name: \"groupSummaryItems\",\n      computed: groupSummaryItemsComputed\n    }), createElement(Getter, {\n      name: \"treeSummaryItems\",\n      value: treeItems\n    }));\n  };\n  SummaryStateBase.defaultProps = {\n    totalItems: [],\n    groupItems: [],\n    treeItems: []\n  };\n  return SummaryStateBase;\n}(PureComponent);\n/** A plugin that provides items for total, group, and tree summaries. */\nvar SummaryState = SummaryStateBase;\nvar pluginDependencies$k = [{\n  name: 'SummaryState'\n}, {\n  name: 'IntegratedGrouping',\n  optional: true\n}];\nvar IntegratedSummaryBase = /*#__PURE__*/function (_super) {\n  __extends(IntegratedSummaryBase, _super);\n  function IntegratedSummaryBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  IntegratedSummaryBase.prototype.render = function () {\n    var calculator = this.props.calculator;\n    var totalSummaryValuesComputed = function totalSummaryValuesComputed(_a) {\n      var rows = _a.rows,\n        totalSummaryItems = _a.totalSummaryItems,\n        getCellValue = _a.getCellValue,\n        getRowLevelKey = _a.getRowLevelKey,\n        isGroupRow = _a.isGroupRow,\n        getCollapsedRows = _a.getCollapsedRows;\n      return totalSummaryValues(rows, totalSummaryItems, getCellValue, getRowLevelKey, isGroupRow, getCollapsedRows, calculator);\n    };\n    var groupSummaryValuesComputed = function groupSummaryValuesComputed(_a) {\n      var rows = _a.rows,\n        groupSummaryItems = _a.groupSummaryItems,\n        getCellValue = _a.getCellValue,\n        getRowLevelKey = _a.getRowLevelKey,\n        isGroupRow = _a.isGroupRow,\n        getCollapsedRows = _a.getCollapsedRows;\n      return groupSummaryValues(rows, groupSummaryItems, getCellValue, getRowLevelKey, isGroupRow, getCollapsedRows, calculator);\n    };\n    var treeSummaryValuesComputed = function treeSummaryValuesComputed(_a) {\n      var rows = _a.rows,\n        treeSummaryItems = _a.treeSummaryItems,\n        getCellValue = _a.getCellValue,\n        getRowLevelKey = _a.getRowLevelKey,\n        isGroupRow = _a.isGroupRow,\n        getRowId = _a.getRowId;\n      return treeSummaryValues(rows, treeSummaryItems, getCellValue, getRowLevelKey, isGroupRow, getRowId, calculator);\n    };\n    return createElement(Plugin, {\n      name: \"IntegratedSummary\",\n      dependencies: pluginDependencies$k\n    }, createElement(Getter, {\n      name: \"totalSummaryValues\",\n      computed: totalSummaryValuesComputed\n    }), createElement(Getter, {\n      name: \"groupSummaryValues\",\n      computed: groupSummaryValuesComputed\n    }), createElement(Getter, {\n      name: \"treeSummaryValues\",\n      computed: treeSummaryValuesComputed\n    }));\n  };\n  IntegratedSummaryBase.defaultCalculator = defaultSummaryCalculator;\n  return IntegratedSummaryBase;\n}(PureComponent);\n/** A plugin that performs a built-in data summary calculation. */\nvar IntegratedSummary = IntegratedSummaryBase;\nvar pluginDependencies$l = [{\n  name: 'SummaryState'\n}];\nvar CustomSummaryBase = /*#__PURE__*/function (_super) {\n  __extends(CustomSummaryBase, _super);\n  function CustomSummaryBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  CustomSummaryBase.prototype.render = function () {\n    var _a = this.props,\n      totalValues = _a.totalValues,\n      groupValues = _a.groupValues,\n      treeValues = _a.treeValues;\n    return createElement(Plugin, {\n      name: \"CustomSummary\",\n      dependencies: pluginDependencies$l\n    }, createElement(Getter, {\n      name: \"totalSummaryValues\",\n      value: totalValues\n    }), createElement(Getter, {\n      name: \"groupSummaryValues\",\n      value: groupValues\n    }), createElement(Getter, {\n      name: \"treeSummaryValues\",\n      value: treeValues\n    }));\n  };\n  return CustomSummaryBase;\n}(PureComponent);\n/** A plugin that allows you to calculate a custom summary. */\nvar CustomSummary = CustomSummaryBase;\nvar dependencies$1 = [{\n  name: 'DataTypeProvider',\n  optional: true\n}, {\n  name: 'SummaryState'\n}, {\n  name: 'CustomSummary',\n  optional: true\n}, {\n  name: 'IntegratedSummary',\n  optional: true\n}, {\n  name: 'Table'\n}, {\n  name: 'TableTreeColumn',\n  optional: true\n}];\nvar tableBodyRowsComputed$2 = function tableBodyRowsComputed$2(_a) {\n  var tableBodyRows = _a.tableBodyRows,\n    getRowLevelKey = _a.getRowLevelKey,\n    isGroupRow = _a.isGroupRow,\n    getRowId = _a.getRowId,\n    groupSummaryItems = _a.groupSummaryItems,\n    treeSummaryItems = _a.treeSummaryItems;\n  return tableRowsWithSummaries(tableBodyRows, groupSummaryItems, treeSummaryItems, getRowLevelKey, isGroupRow, getRowId);\n};\nvar tableFooterRowsComputed = function tableFooterRowsComputed(_a) {\n  var tableFooterRows = _a.tableFooterRows,\n    totalSummaryItems = _a.totalSummaryItems;\n  return totalSummaryItems.length ? tableRowsWithTotalSummaries(tableFooterRows) : tableFooterRows;\n};\nvar TableSummaryRowBase = /*#__PURE__*/function (_super) {\n  __extends(TableSummaryRowBase, _super);\n  function TableSummaryRowBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TableSummaryRowBase.prototype.renderContent = function (column, columnSummaries) {\n    var _a = this.props,\n      formatlessSummaryTypes = _a.formatlessSummaryTypes,\n      Item = _a.itemComponent,\n      messages = _a.messages;\n    return createElement(TableSummaryContent, {\n      column: column,\n      columnSummaries: columnSummaries,\n      formatlessSummaryTypes: formatlessSummaryTypes,\n      itemComponent: Item,\n      messages: messages\n    });\n  };\n  TableSummaryRowBase.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      TotalRow = _a.totalRowComponent,\n      GroupRow = _a.groupRowComponent,\n      TreeRow = _a.treeRowComponent,\n      TotalCell = _a.totalCellComponent,\n      GroupCell = _a.groupCellComponent,\n      TreeCell = _a.treeCellComponent,\n      TreeColumnCell = _a.treeColumnCellComponent,\n      TreeColumnContent = _a.treeColumnContentComponent,\n      TreeColumnIndent = _a.treeColumnIndentComponent;\n    return createElement(Plugin, {\n      name: \"TableSummaryRow\",\n      dependencies: dependencies$1\n    }, createElement(Getter, {\n      name: \"tableBodyRows\",\n      computed: tableBodyRowsComputed$2\n    }), createElement(Getter, {\n      name: \"tableFooterRows\",\n      computed: tableFooterRowsComputed\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isTotalSummaryTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var totalSummaryItems = _a.totalSummaryItems,\n          totalSummaryValues = _a.totalSummaryValues;\n        var columnSummaries = getColumnSummaries(totalSummaryItems, params.tableColumn.column.name, totalSummaryValues);\n        return createElement(TotalCell, _assign({}, params, {\n          column: params.tableColumn.column\n        }), _this.renderContent(params.tableColumn.column, columnSummaries));\n      });\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isGroupSummaryTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var groupSummaryItems = _a.groupSummaryItems,\n          groupSummaryValues = _a.groupSummaryValues;\n        var columnSummaries = getColumnSummaries(groupSummaryItems, params.tableColumn.column.name, groupSummaryValues[params.tableRow.row.compoundKey], function (summaryItem) {\n          return isFooterSummary(summaryItem);\n        });\n        return createElement(GroupCell, _assign({}, params, {\n          column: params.tableColumn.column\n        }), _this.renderContent(params.tableColumn.column, columnSummaries));\n      });\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isTreeSummaryTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var treeSummaryItems = _a.treeSummaryItems,\n          treeSummaryValues = _a.treeSummaryValues,\n          tableTreeColumnName = _a.tableTreeColumnName,\n          getRowId = _a.getRowId,\n          getTreeRowLevel = _a.getTreeRowLevel;\n        var columnSummaries = getColumnSummaries(treeSummaryItems, params.tableColumn.column.name, treeSummaryValues[getRowId(params.tableRow.row)]);\n        if (tableTreeColumnName === params.tableColumn.column.name) {\n          return createElement(TreeColumnCell, _assign({}, params, {\n            column: params.tableColumn.column\n          }), createElement(TreeColumnIndent, {\n            level: getTreeRowLevel(params.tableRow.row)\n          }), createElement(TreeColumnContent, null, _this.renderContent(params.tableColumn.column, columnSummaries)));\n        }\n        return createElement(TreeCell, _assign({}, params, {\n          column: params.tableColumn.column\n        }), _this.renderContent(params.tableColumn.column, columnSummaries));\n      });\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow;\n        return !!isTotalSummaryTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(TotalRow, _assign({}, params));\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow;\n        return !!isGroupSummaryTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(GroupRow, _assign({}, params));\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow;\n        return !!isTreeSummaryTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(TreeRow, _assign({}, params));\n    }));\n  };\n  TableSummaryRowBase.TREE_ROW_TYPE = TABLE_TREE_SUMMARY_TYPE;\n  TableSummaryRowBase.GROUP_ROW_TYPE = TABLE_GROUP_SUMMARY_TYPE;\n  TableSummaryRowBase.TOTAL_ROW_TYPE = TABLE_TOTAL_SUMMARY_TYPE;\n  TableSummaryRowBase.defaultProps = {\n    formatlessSummaryTypes: [],\n    messages: {}\n  };\n  TableSummaryRowBase.components = {\n    totalRowComponent: 'TotalRow',\n    groupRowComponent: 'GroupRow',\n    treeRowComponent: 'TreeRow',\n    totalCellComponent: 'TotalCell',\n    groupCellComponent: 'GroupCell',\n    treeCellComponent: 'TreeCell',\n    treeColumnCellComponent: 'TableTreeCell',\n    treeColumnContentComponent: 'TableTreeContent',\n    treeColumnIndentComponent: 'TableTreeIndent',\n    itemComponent: 'Item'\n  };\n  return TableSummaryRowBase;\n}(PureComponent);\n/** A plugin that renders table rows that display a total, group, and tree summary. */\nvar TableSummaryRow = TableSummaryRowBase;\nvar virtualRowsComputed = function virtualRowsComputed(_a) {\n  var skip = _a.skip,\n    rows = _a.rows,\n    virtualRowsCache = _a.virtualRowsCache;\n  return virtualRowsWithCache(skip, rows, virtualRowsCache);\n};\nvar rowsComputed = function rowsComputed(_a) {\n  var virtualRows = _a.virtualRows,\n    availableRowCount = _a.availableRowCount;\n  return plainRows(virtualRows, availableRowCount);\n};\nvar loadedRowsStartComputed = function loadedRowsStartComputed(_a) {\n  var virtualRows = _a.virtualRows;\n  return loadedRowsStart(virtualRows);\n};\n// tslint:disable-next-line: max-line-length\nvar VirtualTableStateBase = /*#__PURE__*/function (_super) {\n  __extends(VirtualTableStateBase, _super);\n  function VirtualTableStateBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.requestTimer = 0;\n    _this.setViewport = function (viewport, _a, _b) {\n      var virtualRows = _a.virtualRows;\n      var requestNextPage = _b.requestNextPage;\n      var pageSize = _this.props.pageSize;\n      var referenceIndex = getReferenceIndex(viewport);\n      if (needFetchMorePages(virtualRows, referenceIndex, pageSize)) {\n        requestNextPage({\n          referenceIndex: referenceIndex\n        });\n      }\n    };\n    _this.requestNextPageAction = function (_a, _b) {\n      var referenceIndex = _a.referenceIndex,\n        forceReload = _a.forceReload;\n      var virtualRows = _b.virtualRows;\n      var _c = _this.props,\n        pageSize = _c.pageSize,\n        totalRowCount = _c.totalRowCount,\n        infiniteScrolling = _c.infiniteScrolling;\n      var _d = _this.state,\n        requestedStartIndex = _d.requestedStartIndex,\n        requestedEndIndex = _d.requestedEndIndex;\n      var actualVirtualRows = forceReload ? emptyVirtualRows : virtualRows;\n      var _e = getRequestMeta(referenceIndex, virtualRows, pageSize, totalRowCount, forceReload, infiniteScrolling),\n        requestedRange = _e.requestedRange,\n        actualBounds = _e.actualBounds;\n      if (forceReload || shouldSendRequest(requestedRange, requestedStartIndex, requestedEndIndex)) {\n        _this.requestNextPage(requestedRange, actualVirtualRows, actualBounds);\n      }\n    };\n    _this.clearRowsCacheAction = function (_, __, _a) {\n      var requestNextPage = _a.requestNextPage;\n      _this.setState({\n        virtualRowsCache: emptyVirtualRows\n      });\n      requestNextPage({\n        forceReload: true\n      });\n    };\n    _this.resetVirtualTablePosition = function () {\n      return _this.requestFirstPage();\n    };\n    _this.state = {\n      virtualRowsCache: emptyVirtualRows,\n      requestedStartIndex: 0,\n      availableRowCount: props.totalRowCount || 0,\n      requestedEndIndex: 2 * props.pageSize\n    };\n    return _this;\n  }\n  VirtualTableStateBase.prototype.requestNextPage = function (requestedRange, virtualRows, actualBounds) {\n    var _this = this;\n    var _a = this.props,\n      getRows = _a.getRows,\n      infiniteScrolling = _a.infiniteScrolling,\n      totalRowCount = _a.totalRowCount;\n    var stateAvailableCount = this.state.availableRowCount;\n    if (this.requestTimer !== 0) {\n      clearTimeout(this.requestTimer);\n    }\n    this.requestTimer = window.setTimeout(function () {\n      var requestedStartIndex = requestedRange.start,\n        end = requestedRange.end;\n      var loadCount = end - requestedStartIndex;\n      var virtualRowsCache = trimRowsToInterval(virtualRows, actualBounds);\n      var availableRowCount = getAvailableRowCount(infiniteScrolling, actualBounds.end, stateAvailableCount, totalRowCount);\n      getRows(requestedStartIndex, loadCount);\n      _this.setState({\n        virtualRowsCache: virtualRowsCache,\n        availableRowCount: availableRowCount,\n        requestedStartIndex: requestedStartIndex,\n        requestedEndIndex: end\n      });\n    }, 50);\n  };\n  VirtualTableStateBase.prototype.requestFirstPage = function () {\n    var _this = this;\n    var _a = this.props,\n      getRows = _a.getRows,\n      pageSize = _a.pageSize;\n    var startIndex = 0;\n    var endIndex = 2 * pageSize;\n    if (this.requestTimer !== 0) {\n      clearTimeout(this.requestTimer);\n    }\n    this.requestTimer = window.setTimeout(function () {\n      getRows(startIndex, endIndex);\n      _this.setState({\n        virtualRowsCache: emptyVirtualRows,\n        requestedStartIndex: startIndex,\n        requestedEndIndex: endIndex\n      });\n    }, 50);\n  };\n  VirtualTableStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.availableRowCount,\n      prevAvailableRowCount = _a === void 0 ? prevState.availableRowCount : _a,\n      totalRowCount = nextProps.totalRowCount,\n      pageSize = nextProps.pageSize,\n      infiniteScrolling = nextProps.infiniteScrolling;\n    var prevRequestedStartIndex = prevState.requestedStartIndex,\n      prevVirtualRowCache = prevState.virtualRowsCache;\n    var availableRowCount = getAvailableRowCount(infiniteScrolling, pageSize * 2, prevAvailableRowCount, totalRowCount);\n    var requestedStartIndex = Math.max(Math.min(prevRequestedStartIndex, availableRowCount - pageSize), 0);\n    var virtualRowsCache = prevRequestedStartIndex === requestedStartIndex ? prevVirtualRowCache : emptyVirtualRows;\n    return {\n      availableRowCount: availableRowCount,\n      requestedStartIndex: requestedStartIndex,\n      virtualRowsCache: virtualRowsCache\n    };\n  };\n  VirtualTableStateBase.prototype.componentDidMount = function () {\n    var _a = this.props,\n      getRows = _a.getRows,\n      pageSize = _a.pageSize,\n      infiniteScrolling = _a.infiniteScrolling,\n      totalRowCount = _a.totalRowCount;\n    getRows(0, 2 * pageSize);\n    var newRowCount = infiniteScrolling ? 2 * pageSize : totalRowCount;\n    this.setState({\n      availableRowCount: newRowCount\n    });\n  };\n  VirtualTableStateBase.prototype.componentWillUnmount = function () {\n    if (this.requestTimer !== 0) {\n      window.clearTimeout(this.requestTimer);\n    }\n  };\n  VirtualTableStateBase.prototype.render = function () {\n    var _a = this.state,\n      virtualRowsCache = _a.virtualRowsCache,\n      availableRowCount = _a.availableRowCount;\n    var _b = this.props,\n      skip = _b.skip,\n      pageSize = _b.pageSize,\n      loading = _b.loading,\n      infiniteScrolling = _b.infiniteScrolling;\n    return createElement(Plugin, {\n      name: \"VirtualTableState\"\n    }, createElement(Getter, {\n      name: \"isDataRemote\",\n      value: true\n    }), createElement(Getter, {\n      name: \"isDataLoading\",\n      value: loading\n    }), createElement(Getter, {\n      name: \"isScrollingInfinite\",\n      value: infiniteScrolling\n    }), createElement(Getter, {\n      name: \"skip\",\n      value: skip\n    }), createElement(Getter, {\n      name: \"virtualRowsCache\",\n      value: virtualRowsCache\n    }), createElement(Getter, {\n      name: \"pageSize\",\n      value: pageSize\n    }), createElement(Getter, {\n      name: \"availableRowCount\",\n      value: availableRowCount\n    }), createElement(Getter, {\n      name: \"virtualRows\",\n      computed: virtualRowsComputed\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: rowsComputed\n    }), createElement(Getter, {\n      name: \"loadedRowsStart\",\n      computed: loadedRowsStartComputed\n    }), createElement(Action, {\n      name: \"requestNextPage\",\n      action: this.requestNextPageAction\n    }), createElement(Action, {\n      name: \"setViewport\",\n      action: this.setViewport\n    }), createElement(Action, {\n      name: \"clearRowCache\",\n      action: this.clearRowsCacheAction\n    }), createElement(Action, {\n      name: \"changeColumnSorting\",\n      action: this.clearRowsCacheAction\n    }), createElement(Action, {\n      name: \"changeColumnFilter\",\n      action: this.resetVirtualTablePosition\n    }), createElement(Action, {\n      name: \"changeSearchValue\",\n      action: this.resetVirtualTablePosition\n    }), createElement(Action, {\n      name: \"changeColumnGrouping\",\n      action: this.resetVirtualTablePosition\n    }));\n  };\n  VirtualTableStateBase.defaultProps = {\n    pageSize: 100\n  };\n  return VirtualTableStateBase;\n}(PureComponent);\nvar VirtualTableState = VirtualTableStateBase;\nvar pluginDependencies$m = [{\n  name: 'EditingState'\n}, {\n  name: 'Table'\n}, {\n  name: 'DataTypeProvider',\n  optional: true\n}];\nvar rowsWithEditingCellsComputed = function rowsWithEditingCellsComputed(_a) {\n  var tableBodyRows = _a.tableBodyRows,\n    editingCells = _a.editingCells;\n  return rowsWithEditingCells(tableBodyRows, editingCells);\n};\nvar columnsWithEditingCellsComputed = function columnsWithEditingCellsComputed(_a) {\n  var tableColumns = _a.tableColumns,\n    editingCells = _a.editingCells;\n  return columnsWithEditingCells(tableColumns, editingCells);\n};\n/* tslint:disable-next-line max-line-length*/\nvar INLINE_CELL_EDITING_ERROR = 'The startEditAction property of the InlineCellEditing plugin is given an invalid value.';\n// tslint:disable-next-line: max-line-length\nvar TableInlineCellEditingBase = function TableInlineCellEditingBase(props) {\n  var EditCell = props.cellComponent,\n    startEditAction = props.startEditAction,\n    selectTextOnEditStart = props.selectTextOnEditStart;\n  return createElement(Plugin, {\n    name: \"TableInlineCellEditing\",\n    dependencies: pluginDependencies$m\n  }, createElement(Getter, {\n    name: \"tableBodyRows\",\n    computed: rowsWithEditingCellsComputed\n  }), createElement(Getter, {\n    name: \"tableColumns\",\n    computed: columnsWithEditingCellsComputed\n  }), createElement(Template, {\n    name: \"tableCell\",\n    predicate: function predicate(_a) {\n      var tableRow = _a.tableRow,\n        tableColumn = _a.tableColumn;\n      return tableRow.type === TABLE_DATA_TYPE && tableColumn.type === TABLE_DATA_TYPE;\n    }\n  }, function (params) {\n    return createElement(TemplateConnector, null, function (_a, _b) {\n      var _c;\n      var startEditCells = _b.startEditCells;\n      var rowId = params.tableRow.rowId,\n        column = params.tableColumn.column;\n      var columnName = column.name;\n      if (startEditAction !== 'click' && startEditAction !== 'doubleClick') {\n        throw new Error(INLINE_CELL_EDITING_ERROR);\n      }\n      var startEditCellCallback = function startEditCellCallback() {\n        return startEditCells({\n          editingCells: [{\n            rowId: rowId,\n            columnName: columnName\n          }]\n        });\n      };\n      var eventName = startEditAction === 'click' ? 'onClick' : 'onDoubleClick';\n      var newParams = _assign(_assign({}, params), (_c = {}, _c[eventName] = startEditCellCallback, _c));\n      return createElement(TemplatePlaceholder, {\n        params: newParams\n      });\n    });\n  }), createElement(Template, {\n    name: \"tableCell\",\n    predicate: function predicate(_a) {\n      var tableRow = _a.tableRow,\n        tableColumn = _a.tableColumn;\n      return tableRow.hasEditCell && tableColumn.hasEditCell;\n    }\n  }, function (params) {\n    return createElement(TemplateConnector, null, function (_a, _b) {\n      var getCellValue = _a.getCellValue,\n        createRowChange = _a.createRowChange,\n        rowChanges = _a.rowChanges,\n        isColumnEditingEnabled = _a.isColumnEditingEnabled;\n      var changeRow = _b.changeRow,\n        stopEditCells = _b.stopEditCells,\n        commitChangedRows = _b.commitChangedRows,\n        cancelChangedRows = _b.cancelChangedRows;\n      var _c = params.tableRow,\n        rowId = _c.rowId,\n        row = _c.row,\n        column = params.tableColumn.column;\n      var columnName = column.name;\n      var changedRow = _assign(_assign({}, row), getRowChange(rowChanges, rowId));\n      var value = getCellValue(changedRow, columnName);\n      var onValueChange = function onValueChange(newValue) {\n        var changeArgs = {\n          rowId: rowId,\n          change: createRowChange(changedRow, newValue, columnName)\n        };\n        changeRow(changeArgs);\n      };\n      var onKeyDown = function onKeyDown(_a) {\n        var key = _a.key;\n        if (key === 'Enter') {\n          commitChangedRows({\n            rowIds: [rowId]\n          });\n          stopEditCells({\n            editingCells: [{\n              rowId: rowId,\n              columnName: columnName\n            }]\n          });\n        } else if (key === 'Escape') {\n          cancelChangedRows({\n            rowIds: [rowId]\n          });\n          stopEditCells({\n            editingCells: [{\n              rowId: rowId,\n              columnName: columnName\n            }]\n          });\n        }\n      };\n      var onBlur = function onBlur() {\n        commitChangedRows({\n          rowIds: [rowId]\n        });\n        stopEditCells({\n          editingCells: [{\n            rowId: rowId,\n            columnName: columnName\n          }]\n        });\n      };\n      var onFocus = selectTextOnEditStart ? function (e) {\n        return e.target.select();\n      } : function () {};\n      var editingEnabled = isColumnEditingEnabled(columnName);\n      return createElement(TemplatePlaceholder, {\n        name: \"valueEditor\",\n        params: {\n          column: column,\n          row: row,\n          value: value,\n          onValueChange: onValueChange,\n          disabled: !editingEnabled\n        }\n      }, function (content) {\n        return createElement(EditCell, _assign({}, params, {\n          row: row,\n          column: column,\n          value: value,\n          editingEnabled: editingEnabled,\n          onValueChange: onValueChange,\n          autoFocus: true,\n          onKeyDown: onKeyDown,\n          onBlur: onBlur,\n          onFocus: onFocus\n        }), content);\n      });\n    });\n  }));\n};\nTableInlineCellEditingBase.components = {\n  cellComponent: 'Cell'\n};\nTableInlineCellEditingBase.defaultProps = {\n  startEditAction: 'click',\n  selectTextOnEditStart: false\n};\n// tslint:disable-next-line: max-line-length\nvar TableInlineCellEditing = TableInlineCellEditingBase;\nvar defaultMessages$8 = {\n  showExportMenu: 'Export',\n  exportAll: 'Export all data',\n  exportSelected: 'Export selected rows'\n};\nvar ExportPanelBase = /*#__PURE__*/function (_super) {\n  __extends(ExportPanelBase, _super);\n  function ExportPanelBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.state = {\n      visible: false\n    };\n    _this.setButtonRef = function (button) {\n      return _this.button = button;\n    };\n    _this.handleToggle = function () {\n      var visible = _this.state.visible;\n      _this.setState({\n        visible: !visible\n      });\n    };\n    _this.handleHide = function () {\n      return _this.setState({\n        visible: false\n      });\n    };\n    return _this;\n  }\n  ExportPanelBase.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      ToggleButton = _a.toggleButtonComponent,\n      Menu = _a.menuComponent,\n      MenuItem = _a.menuItemComponent,\n      messages = _a.messages,\n      startExport = _a.startExport;\n    var visible = this.state.visible;\n    var getMessage = getMessagesFormatter(_assign(_assign({}, defaultMessages$8), messages));\n    return createElement(Plugin, {\n      name: \"ExportPanel\",\n      dependencies: [{\n        name: 'SelectionState',\n        optional: true\n      }, {\n        name: 'Toolbar'\n      }]\n    }, createElement(Template, {\n      name: \"toolbarContent\"\n    }, createElement(TemplatePlaceholder, null), createElement(TemplateConnector, null, function (_a) {\n      var selection = _a.selection;\n      return createElement(Fragment, null, createElement(ToggleButton, {\n        buttonRef: _this.setButtonRef,\n        onToggle: _this.handleToggle,\n        getMessage: getMessage\n      }), createElement(Menu, {\n        visible: visible,\n        onHide: _this.handleHide,\n        target: _this.button\n      }, createElement(MenuItem, {\n        key: \"exportAll\",\n        text: getMessage('exportAll'),\n        onClick: function onClick() {\n          _this.handleHide();\n          startExport();\n        }\n      }), (selection === null || selection === void 0 ? void 0 : selection.length) ? createElement(MenuItem, {\n        key: \"exportSelected\",\n        text: getMessage('exportSelected'),\n        onClick: function onClick() {\n          _this.handleHide();\n          startExport({\n            selectedOnly: true\n          });\n        }\n      }) : null));\n    })));\n  };\n  ExportPanelBase.components = {\n    toggleButtonComponent: 'ToggleButton',\n    menuComponent: 'Menu',\n    menuItemComponent: 'MenuItem'\n  };\n  return ExportPanelBase;\n}(PureComponent);\nvar ExportPanel = ExportPanelBase;\nvar CellPlaceholder$3 = function CellPlaceholder$3(props) {\n  return createElement(TemplatePlaceholder, {\n    params: props\n  });\n};\nvar RowPlaceholder$1 = function RowPlaceholder$1(props) {\n  return createElement(TemplatePlaceholder, {\n    params: props\n  });\n};\nvar TableKeyboardNavigationCore = /*#__PURE__*/function (_super) {\n  __extends(TableKeyboardNavigationCore, _super);\n  function TableKeyboardNavigationCore(props) {\n    var _this = _super.call(this, props) || this;\n    _this.elements = {};\n    var focusedCell = props.focusedCell || props.defaultFocusedCell;\n    _this.state = {\n      focusedElement: focusedCell ? _assign({\n        part: TABLE_DATA_TYPE.toString()\n      }, focusedCell) : focusedCell\n    };\n    _this.handleKeyDownOnWidget = _this.handleKeyDownOnWidget.bind(_this);\n    _this.updateRef = _this.updateRef.bind(_this);\n    _this.setFocusedElement = _this.setFocusedElement.bind(_this);\n    _this.setSearchPanelRef = _this.setSearchPanelRef.bind(_this);\n    return _this;\n  }\n  TableKeyboardNavigationCore.getDerivedStateFromProps = function (props, state) {\n    var focusedCell = props.focusedCell !== undefined ? props.focusedCell : state.focusedElement;\n    return {\n      focusedElement: focusedCell ? _assign({\n        part: TABLE_DATA_TYPE.toString()\n      }, focusedCell) : undefined\n    };\n  };\n  TableKeyboardNavigationCore.prototype.componentDidMount = function () {\n    this.props.rootRef.current.addEventListener('keydown', this.handleKeyDownOnWidget);\n  };\n  TableKeyboardNavigationCore.prototype.componentWillUnmount = function () {\n    this.props.rootRef.current.removeEventListener('keydown', this.handleKeyDownOnWidget);\n  };\n  TableKeyboardNavigationCore.prototype.pushRef = function (ref, key1, key2) {\n    var focusedElement = this.state.focusedElement;\n    var tableColumns = this.props.tableColumns;\n    if (!this.elements[key1]) {\n      this.elements[key1] = [];\n    }\n    if (!this.elements[key1][key2]) {\n      this.elements[key1][key2] = [];\n    }\n    this.elements[key1][key2].push(ref);\n    if ((focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.rowKey) === key1 && (focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.columnKey) === key2) {\n      focus(this.elements, focusedElement, undefined, this.props.onFocusedCellChange);\n    }\n    if (key1.toString().includes(TABLE_ADDED_TYPE.toString()) && key2 === tableColumns[0].key) {\n      this.changeFocusedElement({\n        part: TABLE_DATA_TYPE.toString(),\n        columnKey: key2,\n        rowKey: key1\n      }, focusedElement);\n    }\n  };\n  TableKeyboardNavigationCore.prototype.setSearchPanelRef = function (ref) {\n    this.searchPanelRef = ref;\n  };\n  TableKeyboardNavigationCore.prototype.removeRef = function (key1, key2) {\n    delete this.elements[key1][key2];\n    if (Object.keys(this.elements[key1]).length === 0) {\n      delete this.elements[key1];\n    }\n  };\n  TableKeyboardNavigationCore.prototype.updateRef = function (_a) {\n    var ref = _a.ref,\n      key1 = _a.key1,\n      key2 = _a.key2,\n      action = _a.action;\n    if (action === 'add') {\n      this.pushRef(ref, key1, key2);\n    } else {\n      this.removeRef(key1, key2);\n    }\n  };\n  TableKeyboardNavigationCore.prototype.changeFocusedElement = function (focusedCell, prevFocusedCell) {\n    var onFocusedCellChange = this.props.onFocusedCellChange;\n    this.setState({\n      focusedElement: focusedCell\n    });\n    focus(this.elements, focusedCell, prevFocusedCell, onFocusedCellChange);\n  };\n  TableKeyboardNavigationCore.prototype.handleKeyDownOnWidget = function (event) {\n    var _a;\n    var focusedElement = this.state.focusedElement;\n    var _b = this.props,\n      tableColumns = _b.tableColumns,\n      tableBodyRows = _b.tableBodyRows,\n      tableHeaderRows = _b.tableHeaderRows,\n      expandedRowIds = _b.expandedRowIds,\n      scrollToColumn = _b.scrollToColumn,\n      inlineEditing = _b.inlineEditing;\n    if (event.key === 'f' && (event.ctrlKey || event.metaKey)) {\n      if (this.searchPanelRef) {\n        event.preventDefault();\n        (_a = this.searchPanelRef.current) === null || _a === void 0 ? void 0 : _a.click();\n      }\n      if (focusedElement) {\n        this.changeFocusedElement(undefined, focusedElement);\n      }\n      return;\n    }\n    if (focusedElement && !isCellExist(this.elements, focusedElement) && event.key === 'Tab') {\n      var focusedCell = getClosestCellByRow(tableBodyRows, focusedElement, this.elements);\n      event.preventDefault();\n      this.changeFocusedElement(focusedCell, focusedElement);\n      return;\n    }\n    if (focusedElement || isTabArrowUpDown(event)) {\n      var _c = getNextFocusedCell(tableColumns, tableBodyRows, tableHeaderRows, expandedRowIds, this.elements, event, inlineEditing, focusedElement, scrollToColumn),\n        element = _c.element,\n        scrolling = _c.scrolling;\n      if (element) {\n        if (scrolling) {\n          scrollToColumn(scrolling === 'left' ? LEFT_POSITION : RIGHT_POSITION);\n        }\n        event.preventDefault();\n        this.changeFocusedElement(element, focusedElement);\n      } else if (isTabArrowUpDown(event) && focusedElement) {\n        this.changeFocusedElement(undefined, focusedElement);\n      }\n    }\n  };\n  TableKeyboardNavigationCore.prototype.setFocusedElement = function (_a) {\n    var key1 = _a.key1,\n      key2 = _a.key2,\n      event = _a.event;\n    var focusedElement = this.state.focusedElement;\n    var inlineEditing = this.props.inlineEditing;\n    if (key1 === 'paging' || key1 === 'toolbar') {\n      this.changeFocusedElement(undefined, focusedElement);\n    } else if (key2.includes(TABLE_FLEX_TYPE.toString())) {\n      var columnKey = this.props.tableColumns[0].key;\n      this.changeFocusedElement({\n        rowKey: key1,\n        columnKey: columnKey,\n        index: -1,\n        part: getPart(key1)\n      }, focusedElement);\n    } else {\n      var part = getPart(key1);\n      this.changeFocusedElement({\n        rowKey: key1,\n        columnKey: key2,\n        index: getIndexToFocus(key1, key2, this.elements, event, inlineEditing, part),\n        part: part\n      }, focusedElement);\n    }\n  };\n  TableKeyboardNavigationCore.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      Cell = _a.cellComponent,\n      Row = _a.rowComponent,\n      focusedRowEnabled = _a.focusedRowEnabled,\n      tableBodyRows = _a.tableBodyRows;\n    var focusedElement = this.state.focusedElement;\n    var getFocusedGetter = function getFocusedGetter() {\n      return getFocusing(tableBodyRows, focusedElement);\n    };\n    return createElement(Plugin, {\n      name: \"TableKeyboardNavigationCore\"\n    }, createElement(Action, {\n      name: \"setSearchPanelRef\",\n      action: this.setSearchPanelRef\n    }), focusedRowEnabled && createElement(Getter, {\n      name: \"highlightSelectedRow\",\n      value: true\n    }), focusedRowEnabled && createElement(Getter, {\n      name: \"focused\",\n      computed: getFocusedGetter\n    }), createElement(Template, {\n      name: \"tableCell\"\n    }, function (params) {\n      return createElement(Cell, _assign({}, params, {\n        component: CellPlaceholder$3,\n        tabIndex: 0,\n        updateRefForKeyboardNavigation: _this.updateRef,\n        setFocusedElement: _this.setFocusedElement,\n        focused: isCellFocused(params.tableRow, params.tableColumn, focusedElement)\n      }));\n    }), createElement(Template, {\n      name: \"header\"\n    }, createElement(TemplatePlaceholder, {\n      params: {\n        updateRefForKeyboardNavigation: this.updateRef,\n        setFocusedElement: this.setFocusedElement\n      }\n    })), createElement(Template, {\n      name: \"footer\"\n    }, createElement(TemplatePlaceholder, {\n      params: {\n        updateRefForKeyboardNavigation: this.updateRef,\n        setFocusedElement: this.setFocusedElement\n      }\n    })), focusedRowEnabled && createElement(Template, {\n      name: \"tableRow\",\n      predicate: function predicate(_a) {\n        var tableRow = _a.tableRow;\n        return !!isDataTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(Row, _assign({}, params, {\n        component: RowPlaceholder$1,\n        focused: isRowFocused(params.tableRow, focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.rowKey)\n      }));\n    }));\n  };\n  return TableKeyboardNavigationCore;\n}(PureComponent);\n// tslint:disable-next-line:max-classes-per-file\nvar TableKeyboardNavigationBase = /*#__PURE__*/function (_super) {\n  __extends(TableKeyboardNavigationBase, _super);\n  function TableKeyboardNavigationBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TableKeyboardNavigationBase.prototype.render = function () {\n    var _this = this;\n    return createElement(Plugin, {\n      name: \"TableKeyboardNavigation\",\n      dependencies: [{\n        name: 'Table'\n      }]\n    }, createElement(TemplateConnector, null, function (_a, _b) {\n      var tableColumns = _a.tableColumns,\n        tableBodyRows = _a.tableBodyRows,\n        rootRef = _a.rootRef,\n        tableHeaderRows = _a.tableHeaderRows,\n        expandedRowIds = _a.expandedRowIds;\n      var scrollToColumn = _b.scrollToColumn,\n        stopEditCells = _b.stopEditCells,\n        commitChangedRows = _b.commitChangedRows,\n        cancelChangedRows = _b.cancelChangedRows,\n        startEditCells = _b.startEditCells;\n      return rootRef.current ? createElement(TableKeyboardNavigationCore, _assign({\n        tableColumns: tableColumns,\n        tableBodyRows: tableBodyRows,\n        rootRef: rootRef,\n        tableHeaderRows: filterHeaderRows(tableHeaderRows),\n        expandedRowIds: expandedRowIds,\n        scrollToColumn: scrollToColumn,\n        inlineEditing: {\n          stopEditCells: stopEditCells,\n          commitChangedRows: commitChangedRows,\n          cancelChangedRows: cancelChangedRows,\n          startEditCells: startEditCells\n        }\n      }, _this.props)) : null;\n    }));\n  };\n  TableKeyboardNavigationBase.components = {\n    cellComponent: 'Cell',\n    rowComponent: 'Row'\n  };\n  return TableKeyboardNavigationBase;\n}(PureComponent);\n// tslint:disable-next-line: max-line-length\nvar TableKeyboardNavigation = TableKeyboardNavigationBase;\nvar getRowStyle = function getRowStyle(_a) {\n  var row = _a.row;\n  return row.height !== undefined ? {\n    height: row.height + \"px\"\n  } : undefined;\n};\nvar isNumber = function isNumber(value) {\n  return typeof value === 'number' || !Number.isNaN(Number(value));\n};\n\n/* globals requestAnimationFrame cancelAnimationFrame */\nvar TableLayoutBase = /*#__PURE__*/function (_super) {\n  __extends(TableLayoutBase, _super);\n  function TableLayoutBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.savedOffsetWidth = -1;\n    _this.raf = -1;\n    _this.state = {\n      animationState: new Map()\n    };\n    _this.animations = new Map();\n    _this.savedScrollWidth = {};\n    _this.tableRef = createRef();\n    return _this;\n  }\n  TableLayoutBase.prototype.componentDidMount = function () {\n    if (this.tableRef.current) {\n      var forwardedRef = this.props.forwardedRef;\n      if (typeof forwardedRef === 'function') {\n        forwardedRef(this.tableRef.current);\n      } else if (forwardedRef) {\n        forwardedRef.current = this.tableRef.current;\n      }\n    }\n  };\n  TableLayoutBase.prototype.componentDidUpdate = function (prevProps) {\n    var columns = this.props.columns;\n    var prevColumns = prevProps.columns;\n    var animationState = this.state.animationState;\n    var activeAnimationExists = !shallowEqual(columns, prevColumns) || !!animationState.size || !!this.animations.size;\n    // NOTE: animation should be recomputed only when columns are changed or\n    // an active animation is in progress. Otherwise it will be recalculated on\n    // each scroll event.\n    if (activeAnimationExists) {\n      this.processAnimation(prevColumns);\n    }\n  };\n  TableLayoutBase.prototype.processAnimation = function (prevColumns) {\n    var columns = this.props.columns;\n    var tableWidth = this.getTableWidth(prevColumns, columns);\n    this.animations = getAnimations(prevColumns, columns, tableWidth, this.animations);\n    cancelAnimationFrame(this.raf);\n    this.raf = requestAnimationFrame(this.processAnimationFrame.bind(this));\n  };\n  TableLayoutBase.prototype.getTableWidth = function (prevColumns, columns) {\n    var _a = this.tableRef.current,\n      offsetWidth = _a.offsetWidth,\n      scrollWidth = _a.scrollWidth;\n    var animationState = this.state.animationState;\n    var widthChanged = this.savedOffsetWidth !== offsetWidth || !this.savedScrollWidth[columns.length];\n    var columnCountChanged = columns.length !== prevColumns.length;\n    if (columnCountChanged || widthChanged && !animationState.size) {\n      this.savedScrollWidth = {};\n      this.savedScrollWidth[columns.length] = scrollWidth;\n      this.savedOffsetWidth = offsetWidth;\n    }\n    return this.savedScrollWidth[columns.length];\n  };\n  TableLayoutBase.prototype.getColumns = function () {\n    var columns = this.props.columns;\n    var animationState = this.state.animationState;\n    var result = columns;\n    var isFixedWidth = columns.filter(function (column) {\n      return column.width === undefined || column.width === 'auto';\n    }).length === 0;\n    if (isFixedWidth) {\n      // presumably a flex column added here instead of in a getter in the Table plugin\n      // to make sure that all manipulations on taleColumns have already done earlier\n      result = __spread(result, [{\n        key: TABLE_FLEX_TYPE.toString(),\n        type: TABLE_FLEX_TYPE\n      }]);\n    }\n    if (animationState.size) {\n      result = result.map(function (column) {\n        return animationState.has(column.key) ? _assign(_assign({}, column), {\n          animationState: animationState.get(column.key)\n        }) : column;\n      });\n    }\n    return result;\n  };\n  TableLayoutBase.prototype.processAnimationFrame = function () {\n    var animationComponentState = this.state.animationState;\n    this.animations = filterActiveAnimations(this.animations);\n    if (!this.animations.size) {\n      if (animationComponentState.size) {\n        this.setState({\n          animationState: new Map()\n        });\n      }\n      return;\n    }\n    var animationState = evalAnimations(this.animations);\n    this.setState({\n      animationState: animationState\n    });\n  };\n  TableLayoutBase.prototype.render = function () {\n    var _a = this.props,\n      Layout = _a.layoutComponent,\n      minColumnWidth = _a.minColumnWidth,\n      forwardedRef = _a.forwardedRef,\n      restProps = __rest(_a, [\"layoutComponent\", \"minColumnWidth\", \"forwardedRef\"]);\n    var columns = this.getColumns();\n    var minWidth = columns.map(function (column) {\n      return column.width || (column.type === TABLE_FLEX_TYPE ? 0 : minColumnWidth);\n    }).filter(function (value) {\n      return value !== 'auto' && value !== 0;\n    }).map(function (value) {\n      return isNumber(value) ? value + \"px\" : value;\n    }).join(' + ');\n    return createElement(Layout, _assign({}, restProps, {\n      tableRef: this.tableRef,\n      columns: columns,\n      minWidth: minWidth,\n      minColumnWidth: minColumnWidth\n    }));\n  };\n  return TableLayoutBase;\n}(PureComponent);\n/** @internal */\nvar TableLayout = TableLayoutBase;\nvar shouldUpdateRow = function shouldUpdateRow(prevProps, nextProps) {\n  var prevCells = prevProps.cells,\n    prevRow = prevProps.row;\n  var nextCells = nextProps.cells,\n    nextRow = nextProps.row;\n  if (prevRow !== nextRow || prevCells.length !== nextCells.length) {\n    return false;\n  }\n  return !nextCells.some(function (nextCell, i) {\n    var prevCell = prevCells[i];\n    return prevCell.column !== nextCell.column || prevCell.colSpan !== nextCell.colSpan;\n  });\n};\nvar VirtualRowLayout = memo(function (_a) {\n  var row = _a.row,\n    cells = _a.cells,\n    Row = _a.rowComponent,\n    Cell = _a.cellComponent,\n    forwardedRef = _a.forwardedRef;\n  return createElement(Row, {\n    forwardedRef: forwardedRef,\n    tableRow: row,\n    style: getRowStyle({\n      row: row\n    })\n  }, cells.map(function (_a) {\n    var column = _a.column,\n      colSpan = _a.colSpan;\n    return createElement(Cell, {\n      key: column.key,\n      tableRow: row,\n      tableColumn: column,\n      colSpan: colSpan\n    });\n  }));\n}, shouldUpdateRow);\n\n// tslint:disable-next-line: max-line-length\nvar VirtualTableLayoutBlock = /*#__PURE__*/function (_super) {\n  __extends(VirtualTableLayoutBlock, _super);\n  function VirtualTableLayoutBlock() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  VirtualTableLayoutBlock.prototype.render = function () {\n    var _a = this.props,\n      collapsedGrid = _a.collapsedGrid,\n      Body = _a.bodyComponent,\n      cellComponent = _a.cellComponent,\n      rowComponent = _a.rowComponent,\n      isFixed = _a.isFixed;\n    return createElement(Body, {\n      isFixed: isFixed\n    }, collapsedGrid.rows.map(function (visibleRow) {\n      var row = visibleRow.row,\n        _a = visibleRow.cells,\n        cells = _a === void 0 ? [] : _a;\n      return createElement(VirtualRowLayout, {\n        key: row.key,\n        row: row,\n        cells: cells,\n        rowComponent: rowComponent,\n        cellComponent: cellComponent\n      });\n    }));\n  };\n  return VirtualTableLayoutBlock;\n}(PureComponent);\n\n/** @internal */\nvar ColumnGroup = /*#__PURE__*/function (_super) {\n  __extends(ColumnGroup, _super);\n  function ColumnGroup() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ColumnGroup.prototype.render = function () {\n    var columns = this.props.columns;\n    return createElement(\"colgroup\", null, columns.map(function (_a) {\n      var key = _a.key,\n        width = _a.width;\n      var styleWidth = typeof width === 'number' ? width + \"px\" : width;\n      return createElement(\"col\", {\n        key: key,\n        style: width !== undefined ? {\n          width: styleWidth\n        } : undefined\n      });\n    }));\n  };\n  return ColumnGroup;\n}(PureComponent);\nvar AUTO_HEIGHT = 'auto';\nvar MAX_WINDOW_HEIGHT = 10000000;\nvar defaultProps$3 = {\n  headerRows: [],\n  footerRows: [],\n  headComponent: function headComponent() {\n    return null;\n  },\n  footerComponent: function footerComponent() {\n    return null;\n  },\n  tableComponent: function tableComponent() {\n    return null;\n  },\n  containerComponent: forwardRef(function () {\n    return null;\n  })\n};\n/** @internal */\n// tslint:disable-next-line: max-line-length\nvar VirtualTableLayout = /*#__PURE__*/function (_super) {\n  __extends(VirtualTableLayout, _super);\n  function VirtualTableLayout(props) {\n    var _this = _super.call(this, props) || this;\n    _this.getRowHeight = function (row) {\n      var height = row ? row.height : 0;\n      return height || _this.props.estimatedRowHeight;\n    };\n    _this.onScroll = function (e) {\n      var node = e.target;\n      if (_this.shouldSkipScrollEvent(e)) {\n        return;\n      }\n      var viewportTop = node.scrollTop,\n        viewportLeft = node.scrollLeft;\n      var _a = _this.state,\n        containerHeight = _a.containerHeight,\n        skipItems = _a.skipItems,\n        prevViewPort = _a.viewportTop;\n      var countSkipRows = _this.getCountSkipRows();\n      var dif = viewportTop - prevViewPort;\n      var pxInPercent = viewportTop / MAX_WINDOW_HEIGHT;\n      var isDif = Math.abs(dif) < containerHeight;\n      var top = Math.min(Math.round(pxInPercent * countSkipRows), countSkipRows);\n      _this.setState({\n        viewportTop: viewportTop,\n        viewportLeft: viewportLeft,\n        skipItems: isDif ? skipItems : [top, countSkipRows - top]\n      });\n    };\n    _this.handleContainerSizeChange = function (_a) {\n      var width = _a.width,\n        height = _a.height;\n      _this.setState({\n        containerHeight: height,\n        containerWidth: width\n      });\n    };\n    _this.state = {\n      viewportTop: 0,\n      skipItems: [0, 0],\n      containerHeight: 600,\n      containerWidth: 800,\n      viewportLeft: 0\n    };\n    _this.getColumnWidthGetter = memoize(function (tableColumns, tableWidth, minColumnWidth) {\n      return getColumnWidthGetter(tableColumns, tableWidth, minColumnWidth);\n    });\n    return _this;\n  }\n  VirtualTableLayout.prototype.getCountSkipRows = function () {\n    var containerHeight = this.props.totalRowCount * this.props.estimatedRowHeight;\n    if (containerHeight > MAX_WINDOW_HEIGHT) {\n      return Math.round(this.props.totalRowCount - MAX_WINDOW_HEIGHT / this.props.estimatedRowHeight);\n    }\n    return 0;\n  };\n  VirtualTableLayout.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var _a = this.props,\n      bodyRows = _a.bodyRows,\n      columns = _a.columns;\n    // NOTE: the boundaries depend not only on scroll position and container dimensions\n    // but on body rows too. This boundaries update is especially important when\n    // lazy loading is used because by the time that all involved events are handled\n    // no rows are loaded yet.\n    var bodyRowsChanged = prevProps.bodyRows !== bodyRows;\n    // Also it's the only place where we can respond to the column count change\n    var columnCountChanged = prevProps.columns.length !== columns.length;\n    var _b = this.state,\n      viewportTop = _b.viewportTop,\n      viewportLeft = _b.viewportLeft,\n      containerWidth = _b.containerWidth,\n      containerHeight = _b.containerHeight;\n    var viewportTopChanged = prevState.viewportTop !== viewportTop;\n    var viewportLeftChanged = prevState.viewportLeft !== viewportLeft;\n    var containerWidthChanged = prevState.containerWidth !== containerWidth;\n    var containerHeightChanged = prevState.containerHeight !== containerHeight;\n    if (prevProps.totalRowCount !== this.props.totalRowCount) {\n      var countSkipRows = this.getCountSkipRows();\n      var skipItems = this.state.skipItems;\n      if (countSkipRows !== 0 && skipItems[0] === 0 && skipItems[1] === 0) {\n        this.setState({\n          skipItems: [0, countSkipRows]\n        });\n      }\n    }\n    if (bodyRowsChanged || columnCountChanged || columns[0].width !== undefined && isColumnsWidthDifferent(prevProps.columns, columns) || viewportTopChanged || viewportLeftChanged || containerWidthChanged || containerHeightChanged) {\n      this.updateViewport();\n    }\n  };\n  VirtualTableLayout.prototype.shouldSkipScrollEvent = function (e) {\n    var node = e.target;\n    // NOTE: prevent nested scroll to update viewport\n    if (node !== e.currentTarget) {\n      return true;\n    }\n    // NOTE: normalize position:\n    // in Firefox and Chrome (zoom > 100%) when scrolled to the bottom\n    // in Edge when scrolled to the right edge\n    var correction = 1;\n    var nodeHorizontalOffset = parseInt(node.scrollLeft + node.clientWidth, 10) - correction;\n    var nodeVerticalOffset = parseInt(node.scrollTop + node.clientHeight, 10) - correction;\n    // NOTE: prevent iOS to flicker in bounces and correct rendering on high dpi screens\n    if (node.scrollTop < 0 || node.scrollLeft < 0 || nodeHorizontalOffset > Math.max(node.scrollWidth, node.clientWidth) || nodeVerticalOffset > Math.max(node.scrollHeight, node.clientHeight)) {\n      return true;\n    }\n    return false;\n  };\n  VirtualTableLayout.prototype.updateViewport = function () {\n    var _a = this.props,\n      viewport = _a.viewport,\n      setViewport = _a.setViewport;\n    var newViewport = this.calculateViewport();\n    if (viewport !== newViewport) {\n      setViewport(newViewport);\n    }\n  };\n  VirtualTableLayout.prototype.calculateViewport = function () {\n    var _a = this.state,\n      viewportTop = _a.viewportTop,\n      skipItems = _a.skipItems,\n      viewportLeft = _a.viewportLeft,\n      containerHeight = _a.containerHeight,\n      containerWidth = _a.containerWidth;\n    var _b = this.props,\n      loadedRowsStart = _b.loadedRowsStart,\n      bodyRows = _b.bodyRows,\n      headerRows = _b.headerRows,\n      footerRows = _b.footerRows,\n      columns = _b.columns,\n      minColumnWidth = _b.minColumnWidth,\n      isDataRemote = _b.isDataRemote,\n      viewport = _b.viewport;\n    var getColumnWidth = this.getColumnWidthGetter(columns, containerWidth, minColumnWidth);\n    return getViewport({\n      viewportTop: viewportTop,\n      skipItems: skipItems,\n      viewportLeft: viewportLeft,\n      containerHeight: containerHeight,\n      containerWidth: containerWidth\n    }, {\n      loadedRowsStart: loadedRowsStart,\n      columns: columns,\n      bodyRows: bodyRows,\n      headerRows: headerRows,\n      footerRows: footerRows,\n      isDataRemote: isDataRemote,\n      viewport: viewport\n    }, this.getRowHeight, getColumnWidth);\n  };\n  VirtualTableLayout.prototype.getCollapsedGrids = function (viewport) {\n    var _a = this.state,\n      containerWidth = _a.containerWidth,\n      viewportLeft = _a.viewportLeft,\n      skipItems = _a.skipItems;\n    var _b = this.props,\n      headerRows = _b.headerRows,\n      bodyRows = _b.bodyRows,\n      footerRows = _b.footerRows,\n      columns = _b.columns,\n      loadedRowsStart = _b.loadedRowsStart,\n      totalRowCount = _b.totalRowCount,\n      getCellColSpan = _b.getCellColSpan,\n      minColumnWidth = _b.minColumnWidth;\n    var getColumnWidth = this.getColumnWidthGetter(columns, containerWidth, minColumnWidth);\n    return getCollapsedGrids({\n      headerRows: headerRows,\n      bodyRows: bodyRows,\n      footerRows: footerRows,\n      columns: columns,\n      loadedRowsStart: loadedRowsStart,\n      totalRowCount: totalRowCount,\n      getCellColSpan: getCellColSpan,\n      viewportLeft: viewportLeft,\n      containerWidth: containerWidth,\n      viewport: viewport,\n      skipItems: skipItems,\n      getRowHeight: this.getRowHeight,\n      getColumnWidth: getColumnWidth\n    });\n  };\n  VirtualTableLayout.prototype.render = function () {\n    var _a = this.props,\n      Container = _a.containerComponent,\n      Table = _a.tableComponent,\n      Head = _a.headComponent,\n      Body = _a.bodyComponent,\n      Footer = _a.footerComponent,\n      tableRef = _a.tableRef,\n      height = _a.height,\n      headerRows = _a.headerRows,\n      footerRows = _a.footerRows,\n      minColumnWidth = _a.minColumnWidth,\n      minWidth = _a.minWidth,\n      cellComponent = _a.cellComponent,\n      rowComponent = _a.rowComponent,\n      viewport = _a.viewport,\n      scrollTop = _a.scrollTop,\n      columns = _a.columns,\n      nextColumnId = _a.nextColumnId;\n    var scrollLeft = getScrollLeft(columns.length, minColumnWidth, nextColumnId);\n    var collapsedGrids = this.getCollapsedGrids(viewport);\n    var commonProps = {\n      cellComponent: cellComponent,\n      rowComponent: rowComponent,\n      minColumnWidth: minColumnWidth,\n      minWidth: minWidth\n    };\n    var sizerHeight = height === AUTO_HEIGHT ? null : height;\n    return createElement(Sizer, {\n      onSizeChange: this.handleContainerSizeChange,\n      containerComponent: Container,\n      style: {\n        height: sizerHeight\n      },\n      onScroll: this.onScroll,\n      scrollTop: scrollTop,\n      scrollLeft: scrollLeft\n    }, createElement(Table, {\n      forwardedRef: tableRef,\n      style: {\n        minWidth: minWidth + \"px\"\n      }\n    }, createElement(ColumnGroup, {\n      columns: collapsedGrids.bodyGrid.columns\n    }), !!headerRows.length && createElement(VirtualTableLayoutBlock, _assign({}, commonProps, {\n      name: \"header\",\n      isFixed: true,\n      collapsedGrid: collapsedGrids.headerGrid,\n      bodyComponent: Head\n    })), createElement(VirtualTableLayoutBlock, _assign({}, commonProps, {\n      name: \"body\",\n      collapsedGrid: collapsedGrids.bodyGrid,\n      bodyComponent: Body\n    })), !!footerRows.length && createElement(VirtualTableLayoutBlock, _assign({}, commonProps, {\n      name: \"footer\",\n      isFixed: true,\n      collapsedGrid: collapsedGrids.footerGrid,\n      bodyComponent: Footer\n    }))));\n  };\n  VirtualTableLayout.defaultProps = defaultProps$3;\n  return VirtualTableLayout;\n}(PureComponent);\nvar getColumnStyle = function getColumnStyle(_a) {\n  var column = _a.column;\n  return column.animationState;\n};\n/** @internal */\nvar RowLayout = memo(function (props) {\n  var row = props.row,\n    columns = props.columns,\n    Row = props.rowComponent,\n    Cell = props.cellComponent,\n    getCellColSpan = props.getCellColSpan;\n  var getColSpan = useCallback(function (tableRow, tableColumn) {\n    return getCellColSpan({\n      tableRow: tableRow,\n      tableColumn: tableColumn,\n      tableColumns: columns\n    });\n  }, [columns, getCellColSpan]);\n  return createElement(Row, {\n    tableRow: row,\n    style: getRowStyle({\n      row: row\n    })\n  }, columns.map(function (column) {\n    return createElement(Cell, {\n      key: column.key,\n      tableRow: row,\n      tableColumn: column,\n      style: getColumnStyle({\n        column: column\n      }),\n      colSpan: getColSpan(row, column)\n    });\n  }));\n});\n\n/** @internal */\nvar RowsBlockLayout = /*#__PURE__*/function (_super) {\n  __extends(RowsBlockLayout, _super);\n  function RowsBlockLayout() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  RowsBlockLayout.prototype.render = function () {\n    var _a = this.props,\n      rows = _a.rows,\n      columns = _a.columns,\n      Block = _a.blockComponent,\n      rowComponent = _a.rowComponent,\n      cellComponent = _a.cellComponent,\n      getCellColSpan = _a.getCellColSpan;\n    return createElement(Block, null, rows.map(function (row) {\n      return createElement(RowLayout, {\n        key: row.key,\n        row: row,\n        columns: columns,\n        rowComponent: rowComponent,\n        cellComponent: cellComponent,\n        getCellColSpan: getCellColSpan\n      });\n    }));\n  };\n  return RowsBlockLayout;\n}(PureComponent);\nvar defaultProps$4 = {\n  headerRows: [],\n  footerRows: [],\n  headComponent: function headComponent() {\n    return null;\n  },\n  footerComponent: function footerComponent() {\n    return null;\n  }\n};\n/** @internal */\nvar StaticTableLayout = /*#__PURE__*/function (_super) {\n  __extends(StaticTableLayout, _super);\n  function StaticTableLayout() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  StaticTableLayout.prototype.render = function () {\n    var _a = this.props,\n      headerRows = _a.headerRows,\n      bodyRows = _a.bodyRows,\n      footerRows = _a.footerRows,\n      columns = _a.columns,\n      minWidth = _a.minWidth,\n      Container = _a.containerComponent,\n      Table = _a.tableComponent,\n      headComponent = _a.headComponent,\n      bodyComponent = _a.bodyComponent,\n      footerComponent = _a.footerComponent,\n      rowComponent = _a.rowComponent,\n      cellComponent = _a.cellComponent,\n      getCellColSpan = _a.getCellColSpan,\n      tableRef = _a.tableRef;\n    var commonProps = {\n      columns: columns,\n      rowComponent: rowComponent,\n      cellComponent: cellComponent,\n      getCellColSpan: getCellColSpan\n    };\n    return createElement(Container, null, createElement(Table, {\n      forwardedRef: tableRef,\n      style: {\n        minWidth: \"calc(\" + minWidth + \")\"\n      }\n    }, createElement(ColumnGroup, {\n      columns: columns\n    }), !!headerRows.length && createElement(RowsBlockLayout, _assign({\n      rows: headerRows,\n      blockComponent: headComponent\n    }, commonProps)), createElement(RowsBlockLayout, _assign({\n      rows: bodyRows,\n      blockComponent: bodyComponent\n    }, commonProps)), !!footerRows.length && createElement(RowsBlockLayout, _assign({\n      rows: footerRows,\n      blockComponent: footerComponent\n    }, commonProps))));\n  };\n  StaticTableLayout.defaultProps = defaultProps$4;\n  return StaticTableLayout;\n}(PureComponent);\n\n/** @internal */\nvar emptyViewport = {\n  columns: [[0, 0]],\n  rows: [0, 0],\n  headerRows: [0, 0],\n  footerRows: [0, 0],\n  top: 0,\n  left: 0,\n  width: 800,\n  height: 600\n};\nvar tableColumnsComputed = function tableColumnsComputed(_a) {\n  var tableColumns = _a.tableColumns;\n  return checkColumnWidths(tableColumns);\n};\n/** @internal */\nvar makeVirtualTable = function makeVirtualTable(Table, _a) {\n  var VirtualLayout = _a.VirtualLayout,\n    FixedHeader = _a.FixedHeader,\n    FixedFooter = _a.FixedFooter,\n    SkeletonCell = _a.SkeletonCell,\n    defaultEstimatedRowHeight = _a.defaultEstimatedRowHeight,\n    defaultHeight = _a.defaultHeight;\n  var VirtualTable = /*#__PURE__*/function (_super) {\n    __extends(VirtualTable, _super);\n    function VirtualTable(props) {\n      var _this = _super.call(this, props) || this;\n      _this.setViewport = function (viewport) {\n        _this.setState({\n          viewport: viewport\n        });\n      };\n      _this.state = {\n        viewport: emptyViewport,\n        nextRowId: undefined,\n        nextColumnId: undefined\n      };\n      _this.scrollToRow = function (nextRowId) {\n        return _this.setState({\n          nextRowId: nextRowId\n        });\n      };\n      _this.scrollToColumn = function (nextColumnId) {\n        return _this.setState({\n          nextColumnId: nextColumnId\n        });\n      };\n      return _this;\n    }\n    VirtualTable.prototype.componentDidUpdate = function (prevProps, prevState) {\n      var prevId = prevState.nextRowId;\n      var currentId = this.state.nextRowId;\n      var areIdsEqual = currentId !== undefined && currentId === prevId;\n      if (areIdsEqual) {\n        this.setState({\n          nextRowId: undefined\n        });\n      }\n    };\n    VirtualTable.prototype.render = function () {\n      var _this = this;\n      var _a = this.props,\n        height = _a.height,\n        estimatedRowHeight = _a.estimatedRowHeight,\n        SkeletonStubCell = _a.skeletonCellComponent,\n        children = _a.children,\n        restProps = __rest(_a, [\"height\", \"estimatedRowHeight\", \"skeletonCellComponent\", \"children\"]);\n      var _b = this.state,\n        stateViewport = _b.viewport,\n        nextId = _b.nextRowId,\n        nextColumnId = _b.nextColumnId;\n      return createElement(Plugin, {\n        name: \"VirtualTable\"\n      }, createElement(Table, _assign({\n        layoutComponent: VirtualLayout\n      }, restProps)), createElement(Action, {\n        name: \"setViewport\",\n        action: this.setViewport\n      }), createElement(Action, {\n        name: \"scrollToRow\",\n        action: this.scrollToRow\n      }), createElement(Action, {\n        name: \"scrollToColumn\",\n        action: this.scrollToColumn\n      }), createElement(Getter, {\n        name: \"viewport\",\n        value: stateViewport\n      }), createElement(Getter, {\n        name: \"tableColumns\",\n        computed: tableColumnsComputed\n      }), createElement(Template, {\n        name: \"tableLayout\"\n      }, function (params) {\n        return createElement(TemplateConnector, null, function (_a, _b) {\n          var availableRowCount = _a.availableRowCount,\n            loadedRowsStart = _a.loadedRowsStart,\n            tableBodyRows = _a.tableBodyRows,\n            isDataRemote = _a.isDataRemote,\n            viewport = _a.viewport;\n          var setViewport = _b.setViewport;\n          var onTopRowChange = _this.props.onTopRowChange;\n          var rowId = getTopRowId(viewport, tableBodyRows, isDataRemote);\n          onTopRowChange(rowId);\n          var totalRowCount = availableRowCount || tableBodyRows.length;\n          var scrollTop = getScrollTop(tableBodyRows, totalRowCount, nextId, estimatedRowHeight, isDataRemote);\n          return createElement(TemplatePlaceholder, {\n            params: _assign(_assign({}, params), {\n              totalRowCount: totalRowCount,\n              loadedRowsStart: loadedRowsStart,\n              isDataRemote: isDataRemote,\n              height: height,\n              estimatedRowHeight: estimatedRowHeight,\n              setViewport: setViewport,\n              viewport: viewport,\n              scrollTop: scrollTop,\n              nextColumnId: nextColumnId\n            })\n          });\n        });\n      }), createElement(Template, {\n        name: \"tableCell\",\n        predicate: function predicate(_a) {\n          var tableRow = _a.tableRow;\n          return !!isStubTableCell(tableRow);\n        }\n      }, function (params) {\n        return createElement(TemplateConnector, null, function (_a) {\n          var isDataRemote = _a.isDataRemote;\n          return isDataRemote ? createElement(SkeletonStubCell, _assign({}, params)) : createElement(TemplatePlaceholder, null);\n        });\n      }));\n    };\n    VirtualTable.defaultProps = {\n      estimatedRowHeight: defaultEstimatedRowHeight,\n      height: defaultHeight,\n      skeletonCellComponent: SkeletonCell,\n      onTopRowChange: function onTopRowChange() {}\n    };\n    VirtualTable.TOP_POSITION = TOP_POSITION;\n    VirtualTable.BOTTOM_POSITION = BOTTOM_POSITION;\n    return VirtualTable;\n  }(PureComponent);\n  Object.values(Table.components).forEach(function (name) {\n    VirtualTable[name] = Table[name];\n  });\n  VirtualTable.FixedHeader = FixedHeader;\n  VirtualTable.FixedFooter = FixedFooter;\n  VirtualTable.SkeletonCell = SkeletonCell;\n  return VirtualTable;\n};\nvar Node = /*#__PURE__*/function () {\n  function Node(start, rows) {\n    this.prev = null;\n    this.next = null;\n    this.start = start;\n    this.rows = rows;\n  }\n  return Node;\n}();\n// tslint:disable-next-line:max-classes-per-file\nvar LRUCache = /*#__PURE__*/function () {\n  function LRUCache(pageSize, capacity) {\n    if (capacity === void 0) {\n      capacity = Number.POSITIVE_INFINITY;\n    }\n    this.pages = new Map();\n    this.pageSize = pageSize;\n    this.capacity = capacity;\n    this.initList();\n  }\n  LRUCache.prototype.initList = function () {\n    this.head = new Node(-1, []);\n    this.tail = new Node(-1, []);\n    this.head.next = this.tail;\n    this.tail.prev = this.head;\n  };\n  LRUCache.prototype.addPage = function (pageStart, rows) {\n    if (this.pages.has(pageStart)) {\n      this.removePage(pageStart);\n    }\n    var node = new Node(pageStart, rows);\n    var last = this.tail.prev;\n    last.next = node;\n    node.next = this.tail;\n    node.prev = last;\n    this.tail.prev = node;\n    this.pages.set(pageStart, node);\n    if (this.pages.size > this.capacity) {\n      this.removePage(this.head.next.start);\n    }\n  };\n  LRUCache.prototype.removePage = function (start) {\n    var node = this.pages.get(start);\n    node.prev.next = node.next;\n    node.next.prev = node.prev;\n    this.pages.delete(start);\n  };\n  LRUCache.prototype.getPage = function (pageStart) {\n    if (!this.pages.has(pageStart)) {\n      return null;\n    }\n    var rows = this.pages.get(pageStart).rows;\n    this.removePage(pageStart);\n    this.addPage(pageStart, rows);\n    return rows;\n  };\n  LRUCache.prototype.clear = function () {\n    this.pages.clear();\n    this.initList();\n  };\n  return LRUCache;\n}();\nvar createRowCache = function createRowCache(pageSize, capacity) {\n  if (pageSize === void 0) {\n    pageSize = 100;\n  }\n  if (capacity === void 0) {\n    capacity = Number.POSITIVE_INFINITY;\n  }\n  var cache = new LRUCache(pageSize, capacity / pageSize);\n  return {\n    getRows: function getRows(skip, take) {\n      var result = [];\n      var pageCount = Math.ceil(take / pageSize);\n      for (var i = 0; i < pageCount; i += 1) {\n        var pageStart = skip + i * pageSize;\n        var chunk = cache.getPage(pageStart);\n        if (chunk !== null) {\n          result = result.concat(chunk);\n        }\n        // yield if last page is incomplete\n        if (chunk === null || i !== pageCount - 1 && chunk.length !== pageSize) {\n          return result;\n        }\n      }\n      return result;\n    },\n    setRows: function setRows(skip, rows) {\n      var pageCount = Math.ceil(rows.length / pageSize);\n      for (var i = 0; i < pageCount; i += 1) {\n        var pageStart = i * pageSize;\n        var rowsChunk = rows.slice(pageStart, pageStart + pageSize);\n        // put incomplete page only if it is last one\n        if (rowsChunk.length === pageSize || i === pageCount - 1) {\n          cache.addPage(pageStart + skip, rowsChunk);\n        }\n      }\n    },\n    invalidate: function invalidate() {\n      return cache.clear();\n    }\n  };\n};\nvar withKeyboardNavigation = function withKeyboardNavigation(key1, key2) {\n  return function (Component) {\n    var ComponentWithNavigation = /*#__PURE__*/function (_super) {\n      __extends(ComponentWithNavigation, _super);\n      function ComponentWithNavigation(props) {\n        var _this = _super.call(this, props) || this;\n        _this.ref = {\n          current: null\n        };\n        _this.handleClick = _this.handleClick.bind(_this);\n        _this.setForwardedRef = _this.setForwardedRef.bind(_this);\n        return _this;\n      }\n      ComponentWithNavigation.prototype.setForwardedRef = function (node) {\n        var _a, _b;\n        (_a = this.ref.current) === null || _a === void 0 ? void 0 : _a.removeEventListener('mouseup', this.handleClick);\n        this.ref.current = node;\n        (_b = this.ref.current) === null || _b === void 0 ? void 0 : _b.addEventListener('mouseup', this.handleClick);\n      };\n      ComponentWithNavigation.prototype.componentDidMount = function () {\n        var _a = this.props,\n          updateRefForKeyboardNavigation = _a.updateRefForKeyboardNavigation,\n          tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        if (this.ref.current && updateRefForKeyboardNavigation) {\n          updateRefForKeyboardNavigation({\n            ref: this.ref,\n            key1: key1 || tableRow.key,\n            key2: key2 || tableColumn.key,\n            action: 'add'\n          });\n        }\n      };\n      ComponentWithNavigation.prototype.componentWillUnmount = function () {\n        var _a = this.props,\n          updateRefForKeyboardNavigation = _a.updateRefForKeyboardNavigation,\n          tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        if (this.ref.current && updateRefForKeyboardNavigation) {\n          updateRefForKeyboardNavigation({\n            ref: this.ref,\n            key1: key1 || tableRow.key,\n            key2: key2 || tableColumn.key,\n            action: 'remove'\n          });\n          this.ref.current.removeEventListener('mouseup', this.handleClick);\n        }\n      };\n      ComponentWithNavigation.prototype.handleClick = function (event) {\n        var _a = this.props,\n          tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn,\n          setFocusedElement = _a.setFocusedElement;\n        if (setFocusedElement) {\n          setFocusedElement({\n            key1: key1 || tableRow.key,\n            key2: key2 || tableColumn.key,\n            event: event\n          });\n        }\n      };\n      ComponentWithNavigation.prototype.render = function () {\n        var _a = this.props,\n          setFocusedElement = _a.setFocusedElement,\n          updateRefForKeyboardNavigation = _a.updateRefForKeyboardNavigation,\n          restProps = __rest(_a, [\"setFocusedElement\", \"updateRefForKeyboardNavigation\"]);\n        return createElement(Component, _assign({\n          forwardedRef: this.setForwardedRef\n        }, restProps));\n      };\n      return ComponentWithNavigation;\n    }(PureComponent);\n    return ComponentWithNavigation;\n  };\n};\nvar InlineSummaryItem = memo(function (_a) {\n  var _b = _a.summary,\n    messageKey = _b.messageKey,\n    columnTitle = _b.columnTitle,\n    SummaryComponent = _b.component,\n    getMessage = _a.getMessage;\n  return createElement(Fragment, null, getMessage(messageKey, {\n    columnTitle: columnTitle\n  }), createElement(SummaryComponent, null));\n});\nexport { ColumnChooser, CustomGrouping, CustomPaging, CustomSummary, CustomTreeData, DataTypeProvider, DragDropProvider, EditingState, ExportPanel, FilteringState, Grid, GroupPanelLayout, GroupingPanel, GroupingState, InlineSummaryItem, IntegratedFiltering, IntegratedGrouping, IntegratedPaging, IntegratedSelection, IntegratedSorting, IntegratedSummary, PagingPanel, PagingState, RowDetailState, SearchPanel, SearchState, SelectionState, SortingState, StaticTableLayout, SummaryState, Table, TableBandHeader, TableColumnReordering, TableColumnResizing, TableColumnVisibility, TableEditColumn, TableEditRow, TableFilterRow, TableFixedColumns, TableGroupRow, TableHeaderRow, TableInlineCellEditing, TableKeyboardNavigation, TableLayout, TableRowDetail, TableSelection, TableSummaryRow, TableSummaryRowBase, TableTreeColumn, Toolbar, TreeDataState, VirtualTableLayout, VirtualTableState, createRowCache, defaultMessages$1 as defaultMessages, emptyViewport, makeVirtualTable, withKeyboardNavigation };","map":{"version":3,"names":["showColumnWhenGroupedGetter","showColumnsWhenGrouped","columnExtensions","map","reduce","acc","columnExtension","columnName","showWhenGrouped","TableColumnsWithGrouping","memo","_a","indentColumnWidth","tableColumnsComputed","columns","tableColumns","grouping","draftGrouping","tableColumnsWithGrouping","createElement","Plugin","Getter","name","computed","defaultProps","GridCoreGetters","rows","getRowId","getCellValue","value","rowIdGetter","cellValueGetter","TableColumnsWithDataRowsGetter","useCallback","tableColumnsWithDataRows","checkTableColumnExtensions","visibleTableColumnsComputed","hiddenColumnNames","visibleTableColumns","VisibleTableColumns","OrderedTableColumns","order","columnsComputed","orderedColumns","GridCore","_super","__extends","props","_this","call","state","ref","rootRef","createRef","prototype","componentDidMount","setState","render","Root","rootComponent","restProps","__rest","__assign","Template","TemplatePlaceholder","PureComponent","GridBase","children","PluginHost","Grid","pluginDependencies","ColumnChooserBase","visible","handleToggle","bind","handleHide","setButtonRef","button","Overlay","overlayComponent","Container","containerComponent","Item","itemComponent","ToggleButton","toggleButtonComponent","messages","getMessage","getMessagesFormatter","dependencies","TemplateConnector","_b","isColumnTogglingEnabled","toggleColumnVisibility","Fragment","buttonRef","onToggle","active","target","onHide","columnChooserItems","item","column","togglingEnabled","key","disabled","components","ColumnChooser","columnExtensionValueGetter","defaultValue","getColumnExtensionValueGetter","filterExpressionComputed","filters","filterExpressionValue","filterExpression","FilteringStateBase","defaultFilters","stateHelper","createStateHelper","onFiltersChange","changeColumnFilter","applyFieldReducer","getDerivedStateFromProps","nextProps","prevState","columnFilteringEnabled","Action","action","FilteringState","pluginDependencies$1","optional","getCollapsedRowsComputed","filteredCollapsedRowsGetter","unwrappedRowsComputed","unwrappedFilteredRows","IntegratedFilteringBase","getColumnPredicate","getColumnExtension","predicate","rowsComputed","getRowLevelKey","getCollapsedRows","filteredRows","defaultPredicate","defaultFilterPredicate","IntegratedFiltering","columnExtensionValueGetter$1","EditingStateBase","rowChanges","defaultRowChanges","addedRows","defaultAddedRows","getRowChanges","stateRowChanges","getAddedRows","stateAddedRows","editingRowIds","defaultEditingRowIds","deletedRowIds","defaultDeletedRowIds","editingCells","defaultEditingCells","onEditingRowIdsChange","onEditingCellsChange","onAddedRowsChange","onRowChangesChange","onDeletedRowIdsChange","startEditRows","stopEditRows","startEditCells","stopEditCells","changeRow","cancelChangedRows","cancelChanges","commitChangedRows","rowIds","onCommitChanges","changed","changedRowsByIds","addRow","changeAddedRow","cancelAddedRows","commitAddedRows","added","addedRowsByIds","deleteRows","cancelDeletedRows","commitDeletedRows","deleted","_c","_d","_e","createRowChange","columnEditingEnabled","createRowChangeGetter","EditingState","PagingStateBase","currentPage","defaultCurrentPage","pageSize","undefined","defaultPageSize","onCurrentPageChange","onPageSizeChange","setCurrentPage","setPageSize","PagingState","pluginDependencies$2","rowsWithHeadersComputed","rowsWithPageHeaders","totalCountComputed","rowCount","paginatedRowsComputed","page","paginatedRows","currentPageComputed","totalCount","IntegratedPagingBase","IntegratedPaging","pluginDependencies$3","CustomPagingBase","CustomPaging","columnExtensionValueGetter$2","GroupingStateBase","defaultGrouping","expandedGroups","defaultExpandedGroups","onGroupingChange","onExpandedGroupsChange","changeColumnGrouping","toggleGroupExpanded","applyReducer","toggleExpandedGroups","draftColumnGrouping","cancelColumnGroupingDraft","changeColumnSorting","sorting","keepOther","restParams","groupingIndex","findIndex","columnGrouping","sortIndex","adjustSortIndex","getters","actions","groupIndex","nextState","prevGrouping","columnSortingIndex","columnSorting","prevGroupingIndex","length","columnGroupingEnabled","GroupingState","pluginDependencies$4","getCollapsedRowsComputed$1","groupCollapsedRowsGetter","expandedGroupedRowsComputed","isExporting","expandedGroupRows","IntegratedGroupingBase","getColumnCriteria","criteria","groupedRowsComputed","groupedRows","groupRowChecker","groupRowLevelKeyGetter","IntegratedGrouping","pluginDependencies$5","getCollapsedRowsComputed$2","expandedGroupedRowsComputed$1","getRowIdComputed","customGroupingRowIdGetter","CustomGroupingBase","getChildGroups","appliedGrouping","appliedExpandedGroups","customGroupedRows","CustomGrouping","SelectionStateBase","selection","defaultSelection","onSelectionChange","toggleSelection","SelectionState","rowsWithAvailableToSelectComputed","isGroupRow","rowsWithAvailableToSelect","allSelectedComputed","allSelected","someSelectedComputed","someSelected","selectAllAvailableComputed","availableToSelect","toggleSelectAll","unwrapRowsComputed","unwrapSelectedRows","pluginDependencies$6","IntegratedSelectionBase","IntegratedSelection","columnExtensionValueGetter$3","SortingStateBase","defaultSorting","onSortingChange","payload","persistentSortedColumns","getPersistentSortedColumns","calculateKeepOther","columnSortingEnabled","SortingState","pluginDependencies$7","IntegratedSortingBase","getColumnCompare","compare","sortedRows","IntegratedSorting","getTargetColumns","filter","type","find","DragDropProviderBase","clientOffset","change","bodyRef","document","body","Column","columnComponent","DragDropProvider$1","onChange","createPortal","DragDropProvider","pluginDependencies$8","tableHeaderRowsComputed","tableHeaderRows","tableHeaderRowsWithReordering","TableColumnReorderingRaw","cellDimensionGetters","cellDimensions","defaultOrder","sourceColumnIndex","targetColumnIndex","onOver","handleOver","onLeave","handleLeave","onDrop","handleDrop","getState","orderState","getDraftOrder","draftOrder","getAvailableColumns","cacheCellDimensions","resetCellDimensions","ensureCellDimensionGetters","Object","keys","forEach","columnIndex","TABLE_DATA_TYPE","storeCellDimensionsGetter","tableColumn","getter","x","sourceColumnName","availableColumns","relativeSourceColumnIndex","indexOf","relativeTargetIndex","getTableTargetColumnIndex","prevSourceColumnIndex","prevTargetColumnIndex","onOrderChange","nextOrder","changeColumnOrder","targetColumnName","tableContainerComponent","Row","rowComponent","Cell","cellComponent","params","draggingEnabled","PlaceholderWithRef","tableRow","TABLE_REORDERING_TYPE","getCellDimensions","TableContainer","DropTarget","TableColumnReordering","withComponents","RowPlaceholder","forwardRef","CellPlaceholder","tableBodyRowsComputed","isDataLoading","tableRowsWithDataRows","tableFooterRows","defaultMessages","noData","TableBase","Layout","layoutComponent","NoDataRow","noDataRowComponent","NoDataCell","noDataCellComponent","StubRow","stubRowComponent","StubCell","stubCellComponent","StubHeaderCell","stubHeaderCellComponent","tableComponent","headComponent","bodyComponent","footerComponent","tableCellColSpanGetter","headerRows","bodyRows","tableBodyRows","footerRows","getTableCellColSpan","getCellColSpan","isHeaderStubTableCell","isDataTableCell","row","content","isNoDataTableRow","isNoDataTableCell","isDataTableRow","COLUMN_TYPE","ROW_TYPE","NODATA_ROW_TYPE","TABLE_NODATA_TYPE","Table","TableSelectionBase","highlightRow","selectByRowClick","showSelectionColumn","showSelectAll","HeaderCell","headerCellComponent","selectionColumnWidth","tableColumnsWithSelection","isSelectAllTableCell","selectAllAvailable","select","isSelectTableCell","selected","rowId","highlighted","isRowHighlighted","TABLE_SELECT_TYPE","TableSelection","RowDetailStateBase","expandedRowIds","defaultExpandedRowIds","onExpandedRowIdsChange","toggleDetailRowExpanded","RowDetailState","getCellColSpanComputed","tableDetailCellColSpanGetter","pluginDependencies$9","TableRowDetailBase","rowHeight","Content","contentComponent","ToggleCell","toggleCellComponent","toggleColumnWidth","tableColumnsWithDetail","expandedDetailRowIds","tableRowsWithExpandedDetail","isDetailToggleTableCell","expanded","isDetailRowExpanded","isDetailTableRow","isDetailTableCell","TABLE_DETAIL_TYPE","TableRowDetail","defaultSummaryMessages","sum","min","max","avg","count","TableSummaryContent","columnSummaries","formatlessSummaryTypes","SummaryItem","summary","String","isFormatlessSummary","includes","defaultFormatlessSummaries","getInlineSummaryComponent","formatlessSummaries","flattenGroupInlineSummaries","groupSummaryItems","groupSummaryValues","getGroupInlineSummaries","compoundKey","colSummaries","__spread","summaries","columnTitle","title","messageKey","component","concat","pluginDependencies$a","side","defaultMessages$1","countOf","sumOf","maxOf","minOf","avgOf","tableBodyRowsComputed$1","tableRowsWithGrouping","getCellColSpanComputed$1","viewport","firstVisibleColumnIndex","tableGroupCellColSpanGetter","TableGroupRowBase","GroupCell","Icon","iconComponent","GroupRow","GroupIndentCell","indentCellComponent","InlineSummary","inlineSummaryComponent","InlineSummaryItem","inlineSummaryItemComponent","SummaryCell","summaryCellComponent","summaryItemComponent","contentCellPadding","isGroupTableRow","isGroupTableCell","inlineSummaries_1","cellIndent","calculateGroupCellIndent","contentIndent_1","groupKey","inlineSummaries","position","isGroupIndentTableCell","fixedProps","isGroupIndentStubTableCell","isGroupRowOrdinaryCell","isRowSummaryCell","getColumnSummaries","summaryItem","showInGroupFooter","alignByColumn","isPreviousCellContainSummary","TABLE_FLEX_TYPE","TABLE_GROUP_TYPE","TableGroupRow","tableHeaderRowsComputed$1","tableRowsWithHeading","TableHeaderRowBase","showSortingControls","showGroupingControls","HeaderRow","SortLabel","sortLabelComponent","GroupButton","groupButtonComponent","Title","titleComponent","isHeadingTableCell","tableColumnResizingEnabled","isColumnSortingEnabled","isColumnGroupingEnabled","columnResizingMode","changeTableColumnWidth","draftTableColumnWidth","cancelTableColumnWidthDraft","storeWidthGetters","atLeastOneDataColumn","sortingEnabled","groupingEnabled","nextColumnName","getNextColumnName","resizingEnabled","onWidthChange","shift","onWidthDraft","onWidthDraftCancel","getCellWidth","align","direction","getColumnSortingDirection","onSort","onGroup","isHeadingTableRow","TABLE_HEADING_TYPE","TableHeaderRow","CellPlaceholder$1","bandLevelsVisibilityComputed","columnIntervals","columnVisibleIntervals","tableHeaderColumnChains","bandLevels","bandLevelsVisibility","columnVisibleIntervalsComputed","TableBandHeaderBase","bandedHeaderCellComponent","InvisibleCell","invisibleCellComponent","columnBands","tableRowsWithBands","tableHeaderColumnChainsComputed","tableHeaderColumnChainsWithBands","columnBandLevels","isBandedOrHeaderRow","levelsVisibility","bandComponent","getBandComponent","BAND_DUPLICATE_RENDER","BAND_EMPTY_CELL","BAND_GROUP_CELL","BAND_HEADER_CELL","BAND_FILL_LEVEL_CELL","style","whiteSpace","isBandedTableRow","TABLE_BAND_TYPE","TableBandHeader","pluginDependencies$b","defaultMessages$2","filterPlaceholder","contains","notContains","startsWith","endsWith","equal","notEqual","greaterThan","greaterThanOrEqual","lessThan","lessThanOrEqual","TableFilterRowBase","filterOperations","showFilterSelector","FilterCell","FilterRow","FilterSelector","filterSelectorComponent","EditorComponent","editorComponent","tableHeaderRowsWithFilter","isFilterTableCell","isColumnFilteringEnabled","getAvailableFilterOperations","isDataRemote","scrollToRow","getColumnFilterConfig","onFilter","config","TOP_POSITION","columnFilterOperations","getColumnFilterOperations","selectedFilterOperation","getSelectedFilterOperation","handleFilterOperationChange","isFilterValueEmpty","operation","handleFilterValueChange","filteringEnabled","onValueChange","availableValues","isFilterTableRow","TABLE_FILTER_TYPE","TableFilterRow","pluginDependencies$c","TableEditRowBase","EditCell","EditRow","tableRowsWithEditing","isEditTableCell","isColumnEditingEnabled","isNew","isAddedTableRow","changedRow","getRowChange","newValue","changeArgs","editingEnabled","isEditTableRow","ADDED_ROW_TYPE","TABLE_ADDED_TYPE","EDIT_ROW_TYPE","TABLE_EDIT_TYPE","TableEditRow","pluginDependencies$d","defaultMessages$3","addCommand","editCommand","deleteCommand","commitCommand","cancelCommand","TableEditColumnBase","Command","commandComponent","showAddCommand","showEditCommand","showDeleteCommand","width","tableColumnsWithEditing","isHeadingEditCommandsTableCell","id","text","onExecute","isEditCommandsTableCell","isEdit","isEditing","TABLE_EDIT_COMMAND_TYPE","TableEditColumn","pluginDependencies$e","TableColumnResizingBase","widthGetters","cachedWidths","columnWidths","defaultColumnWidths","draftColumnWidths","onColumnWidthsChange","memoize","tableColumnsWithWidths","resizingMode","tableColumnsDraftComputed","tableColumnsWithDraftWidths","minColumnWidth","maxColumnWidth","storeCache","clearCache","componentDidUpdate","_","currentWidths","prevWidths","TableColumnResizing","pluginDependencies$f","defaultMessages$4","showAll","info","from","to","PagingPanelBase","Pager","pageSizes","totalPages","pageCount","PagingPanel","onDragStart","onDragEnd","ItemLayout","dragging","itemRef","itemElement","draft","DragSource","onStart","onEnd","defaultProps$1","onGroupDraft","onGroupDraftCancel","GroupPanelLayoutBase","itemRefs","draggingColumnName","targetItemIndex","handleDragEvent","eventHandler","restArgs","onEnter","flushSync","items","prevTargetItemIndex","itemGeometries","getBoundingClientRect","sourceItemIndex","getGroupCellTargetIndex","resetState","EmptyMessage","emptyMessageComponent","groupPanel","element","push","args","GroupPanelLayout","defaultMessages$5","groupByColumn","defaultProps$2","GroupingPanelRaw","LayoutComponent","EmptyMessagePlaceholder","forwardedRef","ItemPlaceholder","sortingDirection","groupingPanelItems","GroupingPanel","DataTypeProviderBase","columnNames","for","Formatter","formatterComponent","Editor","availableFilterOperations","getAvailableFilterOperationsComputed","getAvailableFilterOperationsGetter","join","DataTypeProvider","pluginDependencies$g","defaultMessages$6","noColumns","columnExtensionValueGetter$4","TableColumnVisibilityBase","defaultHiddenColumnNames","onHiddenColumnNamesChange","toggleColumn","columnTogglingEnabled","tableDataColumnsExist","TableColumnVisibility","ToolbarBase","FlexibleSpaceComponent","flexibleSpaceComponent","Toolbar","TreeDataStateBase","toggleRowExpanded","TreeDataState","pluginDependencies$h","expandedTreeRowsComputed","expandedTreeRows","getRowIdComputed$1","customTreeRowIdGetter","getRowLevelKeyComputed","customTreeRowLevelKeyGetter","isTreeRowLeafComputed","isTreeRowLeafGetter","getTreeRowLevelComputed","getTreeRowLevelGetter","collapsedTreeRowsGetterComputed","collapsedTreeRowsGetter","unwrappedTreeRowsComputed","unwrappedCustomTreeRows","CustomTreeDataBase","getChildRows","treeRowsComputed","customTreeRowsWithMeta","CustomTreeData","TableTreeColumnBase","forColumnName","showSelectionControls","Indent","indentComponent","ExpandButton","expandButtonComponent","Checkbox","checkboxComponent","checked","indeterminate","isTreeTableCell","isTreeRowLeaf","getTreeRowLevel","collapsedRows","level","TableTreeColumn","SearchStateBase","changeValue","changeSearchValue","searchFilterExpression","SearchState","pluginDependencies$i","defaultMessages$7","searchPlaceholder","SearchPanelBase","apply","arguments","Input","inputComponent","searchValue","setSearchPanelRef","inputRef","SearchPanel","tableHeaderRowsComputed$2","tableHeaderRowsWithFixed","tableHeaderColumnChainsWithFixed","CellPlaceholder$2","pluginDependencies$j","TableFixedColumnsBase","tableColumnDimensions","handleListenerSizeChange","ListenerRow","listenerRowComponent","ListenerCell","listenerCellComponent","leftColumns","rightColumns","tableColumnsWithFixed","fixed","focused","highlightSelectedRow","fixedColumnProps","calculateFixedColumnProps","isFixedTableRow","listen","onSizeChange","TableFixedColumns","groupSummaryItemsComputed","prepareGroupSummaryItems","SummaryStateBase","totalItems","groupItems","treeItems","SummaryState","pluginDependencies$k","IntegratedSummaryBase","calculator","totalSummaryValuesComputed","totalSummaryItems","totalSummaryValues","groupSummaryValuesComputed","treeSummaryValuesComputed","treeSummaryItems","treeSummaryValues","defaultCalculator","defaultSummaryCalculator","IntegratedSummary","pluginDependencies$l","CustomSummaryBase","totalValues","groupValues","treeValues","CustomSummary","dependencies$1","tableBodyRowsComputed$2","tableRowsWithSummaries","tableFooterRowsComputed","tableRowsWithTotalSummaries","TableSummaryRowBase","renderContent","TotalRow","totalRowComponent","groupRowComponent","TreeRow","treeRowComponent","TotalCell","totalCellComponent","groupCellComponent","TreeCell","treeCellComponent","TreeColumnCell","treeColumnCellComponent","TreeColumnContent","treeColumnContentComponent","TreeColumnIndent","treeColumnIndentComponent","isTotalSummaryTableCell","isGroupSummaryTableCell","isFooterSummary","isTreeSummaryTableCell","tableTreeColumnName","isTotalSummaryTableRow","isGroupSummaryTableRow","isTreeSummaryTableRow","TREE_ROW_TYPE","TABLE_TREE_SUMMARY_TYPE","GROUP_ROW_TYPE","TABLE_GROUP_SUMMARY_TYPE","TOTAL_ROW_TYPE","TABLE_TOTAL_SUMMARY_TYPE","TableSummaryRow","virtualRowsComputed","skip","virtualRowsCache","virtualRowsWithCache","virtualRows","availableRowCount","plainRows","loadedRowsStartComputed","loadedRowsStart","VirtualTableStateBase","requestTimer","setViewport","requestNextPage","referenceIndex","getReferenceIndex","needFetchMorePages","requestNextPageAction","forceReload","totalRowCount","infiniteScrolling","requestedStartIndex","requestedEndIndex","actualVirtualRows","emptyVirtualRows","getRequestMeta","requestedRange","actualBounds","shouldSendRequest","clearRowsCacheAction","__","resetVirtualTablePosition","requestFirstPage","getRows","stateAvailableCount","clearTimeout","window","setTimeout","start","end","loadCount","trimRowsToInterval","getAvailableRowCount","startIndex","endIndex","prevAvailableRowCount","prevRequestedStartIndex","prevVirtualRowCache","Math","newRowCount","componentWillUnmount","loading","VirtualTableState","pluginDependencies$m","rowsWithEditingCellsComputed","rowsWithEditingCells","columnsWithEditingCellsComputed","columnsWithEditingCells","INLINE_CELL_EDITING_ERROR","TableInlineCellEditingBase","startEditAction","selectTextOnEditStart","Error","startEditCellCallback","eventName","newParams","hasEditCell","onKeyDown","onBlur","onFocus","e","autoFocus","TableInlineCellEditing","defaultMessages$8","showExportMenu","exportAll","exportSelected","ExportPanelBase","Menu","menuComponent","MenuItem","menuItemComponent","startExport","onClick","selectedOnly","ExportPanel","CellPlaceholder$3","RowPlaceholder$1","TableKeyboardNavigationCore","elements","focusedCell","defaultFocusedCell","focusedElement","part","toString","handleKeyDownOnWidget","updateRef","setFocusedElement","current","addEventListener","removeEventListener","pushRef","key1","key2","rowKey","columnKey","focus","onFocusedCellChange","changeFocusedElement","searchPanelRef","removeRef","prevFocusedCell","event","scrollToColumn","inlineEditing","ctrlKey","metaKey","preventDefault","click","isCellExist","getClosestCellByRow","isTabArrowUpDown","getNextFocusedCell","scrolling","LEFT_POSITION","RIGHT_POSITION","index","getPart","getIndexToFocus","focusedRowEnabled","getFocusedGetter","getFocusing","tabIndex","updateRefForKeyboardNavigation","isCellFocused","isRowFocused","TableKeyboardNavigationBase","filterHeaderRows","TableKeyboardNavigation","getRowStyle","height","isNumber","Number","isNaN","TableLayoutBase","savedOffsetWidth","raf","animationState","Map","animations","savedScrollWidth","tableRef","prevProps","prevColumns","activeAnimationExists","shallowEqual","size","processAnimation","tableWidth","getTableWidth","getAnimations","cancelAnimationFrame","requestAnimationFrame","processAnimationFrame","offsetWidth","scrollWidth","widthChanged","columnCountChanged","getColumns","result","isFixedWidth","has","get","animationComponentState","filterActiveAnimations","evalAnimations","minWidth","TableLayout","shouldUpdateRow","prevCells","cells","prevRow","nextCells","nextRow","some","nextCell","i","prevCell","colSpan","VirtualRowLayout","VirtualTableLayoutBlock","collapsedGrid","Body","isFixed","visibleRow","ColumnGroup","styleWidth","AUTO_HEIGHT","MAX_WINDOW_HEIGHT","defaultProps$3","VirtualTableLayout","getRowHeight","estimatedRowHeight","onScroll","node","shouldSkipScrollEvent","viewportTop","scrollTop","viewportLeft","scrollLeft","containerHeight","skipItems","prevViewPort","countSkipRows","getCountSkipRows","dif","pxInPercent","isDif","abs","top","round","handleContainerSizeChange","containerWidth","getColumnWidthGetter","bodyRowsChanged","viewportTopChanged","viewportLeftChanged","containerWidthChanged","containerHeightChanged","isColumnsWidthDifferent","updateViewport","currentTarget","correction","nodeHorizontalOffset","parseInt","clientWidth","nodeVerticalOffset","clientHeight","scrollHeight","newViewport","calculateViewport","getColumnWidth","getViewport","getCollapsedGrids","Head","Footer","nextColumnId","getScrollLeft","collapsedGrids","commonProps","sizerHeight","Sizer","bodyGrid","headerGrid","footerGrid","getColumnStyle","RowLayout","getColSpan","RowsBlockLayout","Block","blockComponent","defaultProps$4","StaticTableLayout","emptyViewport","left","checkColumnWidths","makeVirtualTable","VirtualLayout","FixedHeader","FixedFooter","SkeletonCell","defaultEstimatedRowHeight","defaultHeight","VirtualTable","nextRowId","prevId","currentId","areIdsEqual","SkeletonStubCell","skeletonCellComponent","stateViewport","nextId","onTopRowChange","getTopRowId","getScrollTop","isStubTableCell","BOTTOM_POSITION","values","Node","prev","next","LRUCache","capacity","POSITIVE_INFINITY","pages","initList","head","tail","addPage","pageStart","removePage","last","set","delete","getPage","clear","createRowCache","cache","take","ceil","chunk","setRows","rowsChunk","slice","invalidate","withKeyboardNavigation","Component","ComponentWithNavigation","handleClick","setForwardedRef","SummaryComponent"],"sources":["C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\internal\\table-group-row-columns.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\internal\\grid-core-getters.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\internal\\table-columns-getter.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\internal\\visible-table-columns.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\internal\\ordered-table-columns.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\grid-core.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\grid.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\column-chooser.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\filtering-state.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\integrated-filtering.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\editing-state.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\paging-state.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\integrated-paging.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\custom-paging.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\grouping-state.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\integrated-grouping.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\custom-grouping.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\selection-state.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\integrated-selection.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\sorting-state.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\integrated-sorting.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\drag-drop-provider.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\table-column-reordering.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\table.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\table-selection.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\row-detail-state.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\table-row-detail.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\components\\summary\\constants.ts","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\components\\summary\\table-summary-content.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\components\\summary\\group-summaries.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\table-group-row.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\table-header-row.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\table-band-header.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\table-filter-row.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\table-edit-row.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\table-edit-column.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\table-column-resizing.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\paging-panel.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\components\\group-panel-layout\\item-layout.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\components\\group-panel-layout.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\grouping-panel.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\data-type-provider.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\table-column-visibility.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\toolbar.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\tree-data-state.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\custom-tree-data.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\table-tree-column.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\search-state.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\search-panel.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\table-fixed-columns.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\summary-state.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\integrated-summary.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\custom-summary.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\table-summary-row.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\virtual-table\\virtual-table-state.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\table-inline-cell-editing.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\export-panel.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\table-keyboard-navigation.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\utils\\helpers.ts","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\components\\table-layout.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\components\\table-layout\\virtual-row-layout.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\components\\table-layout\\virtual-table-layout-block.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\components\\table-layout\\column-group.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\components\\table-layout\\virtual-table-layout.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\components\\table-layout\\row-layout.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\components\\table-layout\\rows-block-layout.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\components\\table-layout\\static-table-layout.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\plugins\\virtual-table\\virtual-table.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\utils\\row-cache.ts","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\utils\\with-keyboard-navigation.tsx","C:\\Users\\family\\Desktop\\Typescriptgrid\\node_modules\\@devexpress\\dx-react-grid\\src\\components\\summary\\inline-summary-item.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Getter, Plugin, Getters,\n} from '@devexpress/dx-react-core';\nimport { tableColumnsWithGrouping } from '@devexpress/dx-grid-core';\nimport { ShowColumnWhenGroupedGetterFn, TableColumnsWithGroupingProps } from '../../types';\n\nconst showColumnWhenGroupedGetter: ShowColumnWhenGroupedGetterFn = (\n  showColumnsWhenGrouped, columnExtensions = [],\n) => {\n  const map = columnExtensions.reduce((acc, columnExtension) => {\n    acc[columnExtension.columnName] = columnExtension.showWhenGrouped;\n    return acc;\n  }, {});\n\n  return columnName => map[columnName] || showColumnsWhenGrouped;\n};\n\n/** @internal */\nexport const TableColumnsWithGrouping: React.FunctionComponent<\n  TableColumnsWithGroupingProps\n> = React.memo(({\n  indentColumnWidth, showColumnsWhenGrouped, columnExtensions,\n}) => {\n  const tableColumnsComputed = ({\n    columns, tableColumns, grouping, draftGrouping,\n  }: Getters) => tableColumnsWithGrouping(\n    columns,\n    tableColumns,\n    grouping,\n    draftGrouping,\n    indentColumnWidth!,\n    showColumnWhenGroupedGetter(showColumnsWhenGrouped!, columnExtensions),\n  );\n\n  return (\n    <Plugin>\n      <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n    </Plugin>\n  );\n});\n\nTableColumnsWithGrouping.defaultProps = {\n  indentColumnWidth: 0,\n};\n","import * as React from 'react';\nimport {\n  Getter, Plugin,\n} from '@devexpress/dx-react-core';\nimport { rowIdGetter, cellValueGetter } from '@devexpress/dx-grid-core';\nimport { GridCoreGettersProps } from '../../types';\n\nexport const GridCoreGetters: React.FunctionComponent<GridCoreGettersProps> = React.memo(({\n  rows,\n  columns,\n  getRowId,\n  getCellValue,\n}) => (\n  <Plugin>\n    <Getter name=\"rows\" value={rows} />\n    <Getter name=\"getRowId\" value={rowIdGetter(getRowId!, rows)} />\n    <Getter name=\"columns\" value={columns} />\n    <Getter name=\"getCellValue\" value={cellValueGetter(getCellValue!, columns)} />\n  </Plugin>\n));\n","import * as React from 'react';\nimport {\n  Getter, Plugin,\n} from '@devexpress/dx-react-core';\nimport { tableColumnsWithDataRows, checkTableColumnExtensions } from '@devexpress/dx-grid-core';\nimport { Table } from '../../types';\n\nexport const TableColumnsWithDataRowsGetter: React.FunctionComponent<\n  { columnExtensions?: Table.ColumnExtension[]; }\n> = React.memo(({ columnExtensions }) => {\n  const tableColumnsComputed = React.useCallback(\n    ({ columns }) => (\n      tableColumnsWithDataRows(columns, columnExtensions!)\n    ), [columnExtensions]);\n  checkTableColumnExtensions(columnExtensions!);\n\n  return (\n    <Plugin>\n      <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n    </Plugin>\n  );\n});\n","import * as React from 'react';\nimport {\n  Getter,\n  Plugin,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  visibleTableColumns,\n} from '@devexpress/dx-grid-core';\nimport { VisibleTableColumnsProps } from '../../types';\n\nconst visibleTableColumnsComputed = (\n  { tableColumns, hiddenColumnNames }: Getters,\n) => visibleTableColumns(tableColumns, hiddenColumnNames);\n\n/** @internal */\nexport const VisibleTableColumns: React.FunctionComponent<\n  VisibleTableColumnsProps\n> = React.memo(({\n  hiddenColumnNames,\n}) => (\n  <Plugin>\n    <Getter name=\"hiddenColumnNames\" value={hiddenColumnNames} />\n    <Getter name=\"tableColumns\" computed={visibleTableColumnsComputed} />\n  </Plugin>\n));\n\nVisibleTableColumns.defaultProps = {\n  hiddenColumnNames: [],\n};\n","import * as React from 'react';\nimport {\n  Getter,\n  Plugin,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  orderedColumns,\n} from '@devexpress/dx-grid-core';\nimport { OrderedTableColumnsProps } from '../../types';\n\n/** @internal */\nexport const OrderedTableColumns: React.FunctionComponent<\n  OrderedTableColumnsProps\n> = ({\n  order,\n}) => {\n  const columnsComputed = (\n    { tableColumns }: Getters,\n  ) => orderedColumns(tableColumns, order!);\n\n  return (\n    <Plugin>\n      <Getter name=\"tableColumns\" computed={columnsComputed} />\n    </Plugin>\n  );\n};\n\nOrderedTableColumns.defaultProps = {\n  order: [],\n};\n","import * as React from 'react';\nimport {\n  Plugin, Getter, Template, TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\nimport { GridProps } from '../types';\nimport { GridCoreGetters } from './internal';\n\nexport class GridCore extends React.PureComponent<GridProps, any> {\n  rootRef: React.RefObject<HTMLTableElement>;\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      ref: {},\n    };\n    this.rootRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.setState({\n      ref: this.rootRef,\n    });\n  }\n\n  render() {\n    const {\n      rootComponent: Root,\n      ...restProps\n    } = this.props;\n    const { ref } = this.state;\n\n    return (\n      <Plugin>\n        <Getter name=\"skip\" value={0} />\n        <Getter name=\"loadedRowsStart\" value={0} />\n        <Getter name=\"rootRef\" value={ref} />\n        <GridCoreGetters {...restProps} />\n\n        <Template name=\"root\">\n          <Root rootRef={this.rootRef}>\n            <TemplatePlaceholder name=\"header\" />\n            <TemplatePlaceholder name=\"body\" />\n            <TemplatePlaceholder name=\"footer\" />\n          </Root>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n","import * as React from 'react';\nimport { PluginHost } from '@devexpress/dx-react-core';\nimport { GridCore } from './plugins/grid-core';\nimport { GridProps } from './types';\n\nconst GridBase: React.SFC<GridProps> = ({\n  rows,\n  columns,\n  getRowId,\n  getCellValue,\n  rootComponent,\n  children,\n}) => (\n  <PluginHost>\n    <GridCore\n      rows={rows}\n      columns={columns}\n      getRowId={getRowId}\n      getCellValue={getCellValue}\n      rootComponent={rootComponent}\n    />\n    {children}\n  </PluginHost>\n);\n\n/***\n * The Grid is a root container component designed to process and display data specified via\n * the `rows` property. You can configure columns using the `columns` property. The Grid's\n * functionality  is implemented in several plugins specified as child components.\n * See the plugins concept for details.\n * */\nexport const Grid: React.ComponentType<GridProps> = GridBase;\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Template, TemplatePlaceholder, Plugin, TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport { columnChooserItems } from '@devexpress/dx-grid-core';\nimport { ColumnChooserState, ColumnChooserProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'TableColumnVisibility' },\n  { name: 'Toolbar' },\n];\n\nclass ColumnChooserBase extends React.PureComponent<ColumnChooserProps, ColumnChooserState> {\n  static defaultProps = {\n    messages: {},\n  };\n  static components = {\n    overlayComponent: 'Overlay',\n    containerComponent: 'Container',\n    itemComponent: 'Item',\n    toggleButtonComponent: 'ToggleButton',\n  };\n  button!: React.ReactInstance;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      visible: false,\n    };\n\n    this.handleToggle = this.handleToggle.bind(this);\n    this.handleHide = this.handleHide.bind(this);\n    this.setButtonRef = this.setButtonRef.bind(this);\n  }\n\n  setButtonRef(button) {\n    this.button = button;\n  }\n\n  handleToggle() {\n    const { visible } = this.state;\n    this.setState({ visible: !visible });\n  }\n\n  handleHide() {\n    this.setState({ visible: false });\n  }\n\n  render() {\n    const {\n      overlayComponent: Overlay,\n      containerComponent: Container,\n      itemComponent: Item,\n      toggleButtonComponent: ToggleButton,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter(messages!);\n    const { visible } = this.state;\n\n    return (\n      <Plugin\n        name=\"ColumnChooser\"\n        dependencies={pluginDependencies}\n      >\n        <Template name=\"toolbarContent\">\n          <TemplatePlaceholder />\n          <TemplateConnector>\n            {(\n              { columns, hiddenColumnNames, isColumnTogglingEnabled },\n              { toggleColumnVisibility },\n            ) => (\n              <React.Fragment>\n                <ToggleButton\n                  buttonRef={this.setButtonRef}\n                  onToggle={this.handleToggle}\n                  getMessage={getMessage}\n                  active={visible}\n                />\n                <Overlay\n                  visible={visible}\n                  target={this.button}\n                  onHide={this.handleHide}\n                >\n                  <Container>\n                    {columnChooserItems(columns, hiddenColumnNames)\n                      .map((item) => {\n                        const { name: columnName } = item.column;\n                        const togglingEnabled = isColumnTogglingEnabled(columnName);\n                        return (\n                          <Item\n                            key={columnName}\n                            item={item}\n                            disabled={!togglingEnabled}\n                            onToggle={() => toggleColumnVisibility(columnName)}\n                          />\n                        );\n                      })}\n                  </Container>\n                </Overlay>\n              </React.Fragment>\n            )}\n          </TemplateConnector>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/***\n * The ColumnChooser plugin allows a user to toggle grid columns' visibility at runtime.\n * The column chooser lists columns with checkboxes that control a corresponding\n * column's visibility.\n * */\nexport const ColumnChooser: React.ComponentType<ColumnChooserProps> = ColumnChooserBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  changeColumnFilter,\n  getColumnExtensionValueGetter,\n  filterExpression,\n  ChangeFilterPayload,\n} from '@devexpress/dx-grid-core';\nimport { FilteringStateProps, FilteringStateState } from '../types';\n\nconst columnExtensionValueGetter = (columnExtensions, defaultValue) => (\n  getColumnExtensionValueGetter(columnExtensions, 'filteringEnabled', defaultValue)\n);\nconst filterExpressionComputed = (\n  { filters, filterExpression: filterExpressionValue }: Getters,\n) => filterExpression(filters, filterExpressionValue);\n\nclass FilteringStateBase extends React.PureComponent<FilteringStateProps, FilteringStateState> {\n  static defaultProps = {\n    defaultFilters: [],\n    columnFilteringEnabled: true,\n  };\n  changeColumnFilter: (payload: ChangeFilterPayload) => void;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      filters: props.filters || props.defaultFilters,\n    };\n    const stateHelper = createStateHelper(\n      this,\n      {\n        filters: () => {\n          const { onFiltersChange } = this.props;\n          return onFiltersChange;\n        },\n      },\n    );\n\n    this.changeColumnFilter = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'filters', changeColumnFilter);\n  }\n\n  // tslint:disable-next-line:member-ordering\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      filters = prevState.filters,\n    } = nextProps;\n\n    return {\n      filters,\n    };\n  }\n\n  render() {\n    const { filters } = this.state;\n    const { columnExtensions, columnFilteringEnabled } = this.props;\n\n    return (\n      <Plugin\n        name=\"FilteringState\"\n      >\n        <Getter name=\"filters\" value={filters} />\n        <Getter name=\"filterExpression\" computed={filterExpressionComputed} />\n        <Getter\n          name=\"isColumnFilteringEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnFilteringEnabled)}\n        />\n        <Action name=\"changeColumnFilter\" action={this.changeColumnFilter} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that manages the filtering state. */\nexport const FilteringState: React.ComponentType<FilteringStateProps> = FilteringStateBase;\n","import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport {\n  filteredRows,\n  filteredCollapsedRowsGetter,\n  unwrappedFilteredRows,\n  getColumnExtension,\n  defaultFilterPredicate,\n  FilterPredicate,\n} from '@devexpress/dx-grid-core';\nimport { PureComputed } from '@devexpress/dx-core';\nimport { IntegratedFilteringProps, DefaultPredicateFn } from '../types';\n\nconst pluginDependencies = [\n  { name: 'FilteringState', optional: true },\n  { name: 'SearchState', optional: true },\n];\n\nconst getCollapsedRowsComputed = ({ rows }: Getters) => filteredCollapsedRowsGetter(rows);\nconst unwrappedRowsComputed = ({ rows }: Getters) => unwrappedFilteredRows(rows);\n\nclass IntegratedFilteringBase extends React.PureComponent<IntegratedFilteringProps> {\n  static defaultPredicate: DefaultPredicateFn;\n\n  render() {\n    const { columnExtensions } = this.props;\n    const getColumnPredicate: PureComputed<\n      [string], FilterPredicate\n    > = columnName => getColumnExtension(\n      columnExtensions, columnName,\n    ).predicate!;\n\n    const rowsComputed = ({\n      rows,\n      filterExpression,\n      getCellValue,\n      getRowLevelKey,\n      getCollapsedRows,\n    }: Getters) => filteredRows(\n      rows,\n      filterExpression,\n      getCellValue,\n      getColumnPredicate,\n      getRowLevelKey,\n      getCollapsedRows,\n    );\n\n    return (\n      <Plugin\n        name=\"IntegratedFiltering\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={rowsComputed} />\n        <Getter name=\"getCollapsedRows\" computed={getCollapsedRowsComputed} />\n        <Getter name=\"rows\" computed={unwrappedRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\nIntegratedFilteringBase.defaultPredicate = defaultFilterPredicate;\n\nexport const IntegratedFiltering: React.ComponentType<IntegratedFilteringProps> & {\n  /***\n   * The built-in filter predicate.\n   * The `filter` parameter accepts an object containing the 'value' field.\n   **/\n  defaultPredicate: DefaultPredicateFn;\n} = IntegratedFilteringBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, StateHelper,\n} from '@devexpress/dx-react-core';\nimport {\n  createRowChangeGetter,\n  startEditRows,\n  stopEditRows,\n  addRow,\n  changeAddedRow,\n  cancelAddedRows,\n  addedRowsByIds,\n  changeRow,\n  cancelChanges,\n  changedRowsByIds,\n  deleteRows,\n  cancelDeletedRows,\n  getColumnExtensionValueGetter,\n  startEditCells,\n  stopEditCells,\n} from '@devexpress/dx-grid-core';\nimport { EditingStateProps, EditingStateState } from '../types';\n\nconst columnExtensionValueGetter = (\n  columnExtensions, defaultValue,\n) => getColumnExtensionValueGetter(columnExtensions, 'editingEnabled', defaultValue);\n\nclass EditingStateBase extends React.PureComponent<EditingStateProps, EditingStateState> {\n  static defaultProps = {\n    columnEditingEnabled: true,\n    defaultEditingRowIds: [],\n    defaultEditingCells: [],\n    defaultRowChanges: {},\n    defaultAddedRows: [],\n    defaultDeletedRowIds: [],\n  };\n  startEditRows: (payload: any) => void;\n  stopEditRows: (payload: any) => void;\n  startEditCells: (payload: any) => void;\n  stopEditCells: (payload: any) => void;\n  changeRow: (payload: any) => void;\n  cancelChangedRows: (payload: any) => void;\n  commitChangedRows: ({ rowIds }: { rowIds: any; }) => void;\n  addRow: (payload: any) => void;\n  changeAddedRow: (payload: any) => void;\n  cancelAddedRows: (payload: any) => void;\n  commitAddedRows: ({ rowIds }: { rowIds: any; }) => void;\n  deleteRows: (payload: any) => void;\n  cancelDeletedRows: (payload: any) => void;\n  commitDeletedRows: ({ rowIds }: { rowIds: any; }) => void;\n\n  constructor(props) {\n    super(props);\n    const rowChanges = props.rowChanges || props.defaultRowChanges;\n    const addedRows = props.addedRows || props.defaultAddedRows;\n    const getRowChanges = () => {\n      const { rowChanges: stateRowChanges } = this.state;\n      return stateRowChanges;\n    };\n    const getAddedRows = () => {\n      const { addedRows: stateAddedRows } = this.state;\n      return stateAddedRows;\n    };\n\n    this.state = {\n      addedRows,\n      rowChanges,\n      editingRowIds: props.editingRowIds || props.defaultEditingRowIds,\n      deletedRowIds: props.deletedRowIds || props.defaultDeletedRowIds,\n      editingCells: props.editingCells || props.defaultEditingCells,\n    };\n\n    const stateHelper: StateHelper = createStateHelper(\n      this,\n      {\n        editingRowIds: () => {\n          const { onEditingRowIdsChange } = this.props;\n          return onEditingRowIdsChange;\n        },\n        editingCells: () => {\n          const { onEditingCellsChange } = this.props;\n          return onEditingCellsChange;\n        },\n        addedRows: () => {\n          const { onAddedRowsChange } = this.props;\n          return onAddedRowsChange;\n        },\n        rowChanges: () => {\n          const { onRowChangesChange } = this.props;\n          return onRowChangesChange;\n        },\n        deletedRowIds: () => {\n          const { onDeletedRowIdsChange } = this.props;\n          return onDeletedRowIdsChange;\n        },\n      },\n    );\n\n    this.startEditRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'editingRowIds', startEditRows);\n    this.stopEditRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'editingRowIds', stopEditRows);\n\n    this.startEditCells = stateHelper.applyFieldReducer\n    .bind(stateHelper, 'editingCells', startEditCells);\n    this.stopEditCells = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'editingCells', stopEditCells);\n\n    this.changeRow = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'rowChanges', changeRow);\n    this.cancelChangedRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'rowChanges', cancelChanges);\n    this.commitChangedRows = ({ rowIds }) => {\n      const { onCommitChanges } = this.props;\n      onCommitChanges({\n        changed: changedRowsByIds(getRowChanges(), rowIds),\n      });\n      this.cancelChangedRows({ rowIds });\n    };\n\n    this.addRow = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'addedRows', addRow);\n    this.changeAddedRow = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'addedRows', changeAddedRow);\n    this.cancelAddedRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'addedRows', cancelAddedRows);\n    this.commitAddedRows = ({ rowIds }) => {\n      const { onCommitChanges } = this.props;\n      onCommitChanges({\n        added: addedRowsByIds(getAddedRows(), rowIds),\n      });\n      this.cancelAddedRows({ rowIds });\n    };\n\n    this.deleteRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'deletedRowIds', deleteRows);\n    this.cancelDeletedRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'deletedRowIds', cancelDeletedRows);\n    this.commitDeletedRows = ({ rowIds }) => {\n      const { onCommitChanges } = this.props;\n      onCommitChanges({ deleted: rowIds });\n      this.cancelDeletedRows({ rowIds });\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      editingRowIds = prevState.editingRowIds,\n      editingCells = prevState.editingCells,\n      rowChanges = prevState.rowChanges,\n      addedRows = prevState.addedRows,\n      deletedRowIds = prevState.deletedRowIds,\n    } = nextProps;\n\n    return {\n      editingRowIds,\n      editingCells,\n      rowChanges,\n      addedRows,\n      deletedRowIds,\n    };\n  }\n\n  render() {\n    const { createRowChange, columnExtensions, columnEditingEnabled } = this.props;\n    const {\n      editingRowIds, editingCells, rowChanges, addedRows, deletedRowIds,\n    } = this.state;\n\n    return (\n      <Plugin\n        name=\"EditingState\"\n      >\n        <Getter\n          name=\"createRowChange\"\n          value={createRowChangeGetter(createRowChange, columnExtensions)}\n        />\n\n        <Getter name=\"editingRowIds\" value={editingRowIds} />\n        <Action name=\"startEditRows\" action={this.startEditRows} />\n        <Action name=\"stopEditRows\" action={this.stopEditRows} />\n\n        <Getter name=\"editingCells\" value={editingCells} />\n        <Action name=\"startEditCells\" action={this.startEditCells} />\n        <Action name=\"stopEditCells\" action={this.stopEditCells} />\n\n        <Getter name=\"rowChanges\" value={rowChanges} />\n        <Action name=\"changeRow\" action={this.changeRow} />\n        <Action name=\"cancelChangedRows\" action={this.cancelChangedRows} />\n        <Action name=\"commitChangedRows\" action={this.commitChangedRows} />\n\n        <Getter name=\"addedRows\" value={addedRows} />\n        <Action name=\"addRow\" action={this.addRow} />\n        <Action name=\"changeAddedRow\" action={this.changeAddedRow} />\n        <Action name=\"cancelAddedRows\" action={this.cancelAddedRows} />\n        <Action name=\"commitAddedRows\" action={this.commitAddedRows} />\n\n        <Getter name=\"deletedRowIds\" value={deletedRowIds} />\n        <Action name=\"deleteRows\" action={this.deleteRows} />\n        <Action name=\"cancelDeletedRows\" action={this.cancelDeletedRows} />\n        <Action name=\"commitDeletedRows\" action={this.commitDeletedRows} />\n\n        <Getter\n          name=\"isColumnEditingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnEditingEnabled)}\n        />\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that manages grid rows' editing state. It arranges grid rows\n * by different lists depending on a row's state.\n * */\nexport const EditingState: React.ComponentType<EditingStateProps> = EditingStateBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper,\n} from '@devexpress/dx-react-core';\nimport { setCurrentPage, setPageSize } from '@devexpress/dx-grid-core';\nimport { PagingStateProps, PagingStateState } from '../types';\n\nclass PagingStateBase extends React.PureComponent<PagingStateProps, PagingStateState> {\n  static defaultProps = {\n    defaultPageSize: 10,\n    defaultCurrentPage: 0,\n  };\n  setCurrentPage: (payload: any) => void;\n  setPageSize: (payload: any) => void;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentPage: props.currentPage || props.defaultCurrentPage,\n      pageSize: props.pageSize !== undefined ? props.pageSize : props.defaultPageSize,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        currentPage: () => {\n          const { onCurrentPageChange } = this.props;\n          return onCurrentPageChange;\n        },\n        pageSize: () => {\n          const { onPageSizeChange } = this.props;\n          return onPageSizeChange;\n        },\n      },\n    );\n\n    this.setCurrentPage = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'currentPage', setCurrentPage);\n    this.setPageSize = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'pageSize', setPageSize);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      currentPage = prevState.currentPage,\n      pageSize = prevState.pageSize,\n    } = nextProps;\n\n    return {\n      currentPage,\n      pageSize,\n    };\n  }\n\n  render() {\n    const { pageSize, currentPage } = this.state;\n\n    return (\n      <Plugin\n        name=\"PagingState\"\n      >\n        <Getter name=\"currentPage\" value={currentPage} />\n        <Getter name=\"pageSize\" value={pageSize} />\n        <Action name=\"setCurrentPage\" action={this.setCurrentPage} />\n        <Action name=\"setPageSize\" action={this.setPageSize} />\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that manages the paging state. It controls the total page count depending on the\n * total row count and the specified page size, controls the currently selected page number\n * and changes it in response to the corresponding actions.\n * */\nexport const PagingState: React.ComponentType<PagingStateProps> = PagingStateBase;\n","import * as React from 'react';\nimport { Getter, Plugin, Getters, Actions } from '@devexpress/dx-react-core';\nimport {\n  paginatedRows, rowsWithPageHeaders, rowCount, currentPage,\n} from '@devexpress/dx-grid-core';\nimport { IntegratedPagingProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'PagingState' },\n];\n\nconst rowsWithHeadersComputed = (\n  { rows, pageSize, getRowLevelKey }: Getters,\n) => rowsWithPageHeaders(rows, pageSize, getRowLevelKey);\nconst totalCountComputed = ({ rows }: Getters) => rowCount(rows);\nconst paginatedRowsComputed = (\n  { rows, pageSize, currentPage: page }: Getters,\n) => paginatedRows(rows, pageSize, page);\nconst currentPageComputed = (\n  { currentPage: page, totalCount, pageSize }: Getters, { setCurrentPage }: Actions,\n) => currentPage(page, totalCount, pageSize, setCurrentPage);\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass IntegratedPagingBase extends React.PureComponent<IntegratedPagingProps> {\n  render() {\n    return (\n      <Plugin\n        name=\"IntegratedPaging\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={rowsWithHeadersComputed} />\n        <Getter name=\"totalCount\" computed={totalCountComputed} />\n        <Getter name=\"currentPage\" computed={currentPageComputed} />\n        <Getter name=\"rows\" computed={paginatedRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that performs built-in data paging. It also changes the current page if the provided\n * one cannot be applied due to fewer available pages.\n * */\nexport const IntegratedPaging: React.ComponentType<IntegratedPagingProps> = IntegratedPagingBase;\n","import * as React from 'react';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\nimport { CustomPagingProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'PagingState' },\n];\n\nclass CustomPagingBase extends React.PureComponent<CustomPagingProps> {\n  static defaultProps = {\n    totalCount: 0,\n  };\n\n  render() {\n    const { totalCount } = this.props;\n\n    return (\n      <Plugin\n        name=\"CustomPaging\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"totalCount\" value={totalCount} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that allows implementing a custom totalCount calculation logic. */\nexport const CustomPaging: React.ComponentType<CustomPagingProps> = CustomPagingBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, StateHelper, ActionFn, Getters, Actions,\n} from '@devexpress/dx-react-core';\nimport {\n  changeColumnGrouping,\n  toggleExpandedGroups,\n  draftColumnGrouping,\n  cancelColumnGroupingDraft,\n  getColumnExtensionValueGetter,\n  adjustSortIndex,\n  ChangeGroupingPayload,\n  ToggleGroupPayload,\n  ChangeSortingPayload,\n} from '@devexpress/dx-grid-core';\nimport { GroupingStateProps, GroupingStateState } from '../types';\n\nconst dependencies = [\n  { name: 'SortingState', optional: true },\n];\n\nconst columnExtensionValueGetter = (\n  columnExtensions, defaultValue,\n) => getColumnExtensionValueGetter(columnExtensions, 'groupingEnabled', defaultValue);\n\nclass GroupingStateBase extends React.PureComponent<GroupingStateProps, GroupingStateState> {\n  static defaultProps = {\n    defaultGrouping: [],\n    defaultExpandedGroups: [],\n    columnGroupingEnabled: true,\n  };\n  stateHelper: StateHelper;\n  draftColumnGrouping: ActionFn<ChangeGroupingPayload>;\n  toggleGroupExpanded: ActionFn<ToggleGroupPayload>;\n  cancelColumnGroupingDraft: ActionFn<void>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      grouping: props.grouping || props.defaultGrouping,\n      draftGrouping: null,\n      expandedGroups: props.expandedGroups || props.defaultExpandedGroups,\n    };\n\n    this.stateHelper = createStateHelper(\n      this,\n      {\n        grouping: () => {\n          const { onGroupingChange } = this.props;\n          return onGroupingChange;\n        },\n        expandedGroups: () => {\n          const { onExpandedGroupsChange } = this.props;\n          return onExpandedGroupsChange;\n        },\n      },\n    );\n\n    this.changeColumnGrouping = this.changeColumnGrouping.bind(this);\n    this.toggleGroupExpanded = this.stateHelper.applyReducer\n      .bind(this.stateHelper, toggleExpandedGroups);\n    this.draftColumnGrouping = this.stateHelper.applyReducer\n      .bind(this.stateHelper, draftColumnGrouping);\n    this.cancelColumnGroupingDraft = this.stateHelper.applyReducer\n      .bind(this.stateHelper, cancelColumnGroupingDraft);\n    this.changeColumnSorting = this.changeColumnSorting.bind(this);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      grouping = prevState.grouping,\n      expandedGroups = prevState.expandedGroups,\n    } = nextProps;\n\n    return {\n      grouping,\n      expandedGroups,\n    };\n  }\n\n  changeColumnSorting(\n    { columnName, keepOther, ...restParams }: ChangeSortingPayload,\n    { sorting }: Getters,\n    { changeColumnSorting }: Actions,\n  ) {\n    const { grouping } = this.state;\n    const groupingIndex = grouping\n      .findIndex(columnGrouping => columnGrouping.columnName === columnName);\n    if (groupingIndex === -1) {\n      changeColumnSorting({\n        columnName,\n        keepOther: keepOther || grouping.map(columnGrouping => columnGrouping.columnName),\n        ...restParams,\n      });\n      return false;\n    }\n\n    const sortIndex = adjustSortIndex(groupingIndex, grouping, sorting);\n    changeColumnSorting({\n      columnName,\n      sortIndex,\n      keepOther: true,\n      ...restParams,\n    });\n    return false;\n  }\n\n  changeColumnGrouping(\n    { columnName, groupIndex }: ChangeGroupingPayload,\n    getters?: Getters,\n    actions?: Actions,\n  ) {\n    this.stateHelper.applyReducer(\n      changeColumnGrouping,\n      { columnName, groupIndex },\n      (nextState, state) => {\n        const { grouping } = nextState;\n        const { grouping: prevGrouping } = state;\n        const { sorting } = getters!;\n        const { changeColumnSorting } = actions!;\n\n        if (!sorting) return;\n\n        const columnSortingIndex = sorting\n          .findIndex(columnSorting => columnSorting.columnName === columnName);\n        const prevGroupingIndex = prevGrouping\n          .findIndex(columnGrouping => columnGrouping.columnName === columnName);\n        const groupingIndex = grouping\n          .findIndex(columnGrouping => columnGrouping.columnName === columnName);\n\n        if (columnSortingIndex === -1\n          || (prevGroupingIndex === prevGrouping.length - 1 && groupingIndex === -1)) return;\n\n        const sortIndex = adjustSortIndex(\n          groupingIndex === -1 ? grouping.length : groupingIndex,\n          grouping,\n          sorting,\n        );\n\n        if (columnSortingIndex === sortIndex) return;\n\n        changeColumnSorting({\n          sortIndex,\n          keepOther: true,\n          ...sorting[columnSortingIndex],\n        });\n      },\n    );\n  }\n\n  render() {\n    const { grouping, draftGrouping, expandedGroups } = this.state;\n    const { columnExtensions, columnGroupingEnabled } = this.props;\n\n    return (\n      <Plugin\n        name=\"GroupingState\"\n        dependencies={dependencies}\n      >\n        <Getter name=\"grouping\" value={grouping} />\n        <Getter name=\"draftGrouping\" value={draftGrouping || grouping} />\n        <Getter\n          name=\"isColumnGroupingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnGroupingEnabled)}\n        />\n        <Action name=\"changeColumnGrouping\" action={this.changeColumnGrouping} />\n        <Action name=\"draftColumnGrouping\" action={this.draftColumnGrouping} />\n        <Action name=\"cancelColumnGroupingDraft\" action={this.cancelColumnGroupingDraft} />\n\n        <Getter name=\"expandedGroups\" value={expandedGroups} />\n        <Action name=\"toggleGroupExpanded\" action={this.toggleGroupExpanded} />\n\n        <Action name=\"changeColumnSorting\" action={this.changeColumnSorting} />\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that manages the grouping state. It lists columns used for grouping and stores\n * information about expanded/collapsed groups.\n * */\nexport const GroupingState: React.ComponentType<GroupingStateProps> = GroupingStateBase;\n","import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport {\n  groupRowChecker,\n  groupRowLevelKeyGetter,\n  groupCollapsedRowsGetter,\n  groupedRows,\n  expandedGroupRows,\n  getColumnExtension,\n} from '@devexpress/dx-grid-core';\nimport { IntegratedGroupingProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'GroupingState' },\n];\n\nconst getCollapsedRowsComputed = (\n  { getCollapsedRows }: Getters,\n) => groupCollapsedRowsGetter(getCollapsedRows);\nconst expandedGroupedRowsComputed = (\n  { rows, grouping, expandedGroups, isExporting }: Getters,\n) => expandedGroupRows(rows, grouping, expandedGroups, isExporting);\n\nclass IntegratedGroupingBase extends React.PureComponent<IntegratedGroupingProps> {\n  render() {\n    const { columnExtensions } = this.props;\n    const getColumnCriteria = columnName => (getColumnExtension(\n      columnExtensions, columnName,\n    ) as any).criteria;\n\n    const groupedRowsComputed = (\n      { rows, grouping, getCellValue }: Getters,\n    ) => groupedRows(rows, grouping, getCellValue, getColumnCriteria);\n\n    return (\n      <Plugin\n        name=\"IntegratedGrouping\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"isGroupRow\" value={groupRowChecker} />\n        <Getter name=\"getRowLevelKey\" value={groupRowLevelKeyGetter} />\n        <Getter name=\"getCollapsedRows\" computed={getCollapsedRowsComputed} />\n        <Getter name=\"rows\" computed={groupedRowsComputed} />\n        <Getter name=\"rows\" computed={expandedGroupedRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/* tslint:disable: max-line-length */\n/** A plugin that performs built-in grouping and group expanding/collapsing. */\nexport const IntegratedGrouping: React.ComponentType<IntegratedGroupingProps> = IntegratedGroupingBase;\n/* tslint:enable: max-line-length */\n","import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport {\n  groupRowChecker,\n  groupRowLevelKeyGetter,\n  groupCollapsedRowsGetter,\n  customGroupingRowIdGetter,\n  customGroupedRows,\n  expandedGroupRows,\n} from '@devexpress/dx-grid-core';\nimport { CustomGroupingProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'GroupingState' },\n];\n\nconst getCollapsedRowsComputed = (\n  { getCollapsedRows }: Getters,\n) => groupCollapsedRowsGetter(getCollapsedRows);\nconst expandedGroupedRowsComputed = (\n  { rows, grouping, expandedGroups, isExporting }: Getters,\n) => expandedGroupRows(rows, grouping, expandedGroups, isExporting);\nconst getRowIdComputed = ({ getRowId, rows }: Getters) => customGroupingRowIdGetter(getRowId, rows);\n\nclass CustomGroupingBase extends React.PureComponent<CustomGroupingProps> {\n  render() {\n    const {\n      getChildGroups,\n      grouping: appliedGrouping,\n      expandedGroups: appliedExpandedGroups,\n    } = this.props;\n    const groupedRowsComputed = (\n      { rows, grouping }: Getters,\n    ) => customGroupedRows(rows, grouping, getChildGroups);\n\n    return (\n      <Plugin\n        name=\"CustomGrouping\"\n        dependencies={pluginDependencies}\n      >\n        {appliedGrouping && (\n          <Getter name=\"grouping\" value={appliedGrouping} />\n        )}\n        {appliedExpandedGroups && (\n          <Getter name=\"expandedGroups\" value={appliedExpandedGroups} />\n        )}\n        <Getter name=\"isGroupRow\" value={groupRowChecker} />\n        <Getter name=\"getRowLevelKey\" value={groupRowLevelKeyGetter} />\n        <Getter name=\"getCollapsedRows\" computed={getCollapsedRowsComputed} />\n        <Getter name=\"rows\" computed={groupedRowsComputed} />\n        <Getter name=\"getRowId\" computed={getRowIdComputed} />\n        <Getter name=\"rows\" computed={expandedGroupedRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n// tslint:disable-next-line: max-line-length\n/** A plugin that converts custom formatted grouped data to a supported format and performs local group expanding/collapsing. */\nexport const CustomGrouping: React.ComponentType<CustomGroupingProps> = CustomGroupingBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, ActionFn,\n} from '@devexpress/dx-react-core';\nimport { toggleSelection } from '@devexpress/dx-grid-core';\nimport { SelectionStateProps, SelectionStateState } from '../types';\n\nclass SelectionStateBase extends React.PureComponent<SelectionStateProps, SelectionStateState> {\n  static defaultProps = {\n    defaultSelection: [],\n  };\n  toggleSelection: ActionFn<any>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selection: props.selection || props.defaultSelection,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        selection: () => {\n          const { onSelectionChange } = this.props;\n          return onSelectionChange;\n        },\n      },\n    );\n\n    this.toggleSelection = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'selection', toggleSelection);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      selection = prevState.selection,\n    } = nextProps;\n\n    return {\n      selection,\n    };\n  }\n\n  render() {\n    const { selection } = this.state;\n\n    return (\n      <Plugin\n        name=\"SelectionState\"\n      >\n        <Getter name=\"selection\" value={selection} />\n        <Action name=\"toggleSelection\" action={this.toggleSelection} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that manages the selection state. */\nexport const SelectionState: React.ComponentType<SelectionStateProps> = SelectionStateBase;\n","import * as React from 'react';\nimport { Getter, Action, Plugin, Getters, Actions } from '@devexpress/dx-react-core';\nimport {\n  rowsWithAvailableToSelect,\n  someSelected,\n  allSelected,\n  unwrapSelectedRows,\n} from '@devexpress/dx-grid-core';\nimport { IntegratedSelectionProps } from '../types';\n\nconst rowsWithAvailableToSelectComputed = (\n  { rows, getRowId, isGroupRow }: Getters,\n) => rowsWithAvailableToSelect(rows, getRowId, isGroupRow);\nconst allSelectedComputed = ({ rows, selection }: Getters) => allSelected(rows, selection);\nconst someSelectedComputed = ({ rows, selection }: Getters) => someSelected(rows, selection);\nconst selectAllAvailableComputed = (\n  { rows: { availableToSelect } }: Getters,\n) => !!availableToSelect.length;\n\nconst toggleSelectAll = (\n  state, { rows: { availableToSelect } }: Getters, { toggleSelection }: Actions,\n) => {\n  toggleSelection({ state, rowIds: availableToSelect });\n};\nconst unwrapRowsComputed = ({ rows }: Getters) => unwrapSelectedRows(rows);\n\nconst pluginDependencies = [\n  { name: 'SelectionState' },\n];\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass IntegratedSelectionBase extends React.PureComponent<IntegratedSelectionProps> {\n  render() {\n    return (\n      <Plugin\n        name=\"IntegratedSelection\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={rowsWithAvailableToSelectComputed} />\n        <Getter name=\"allSelected\" computed={allSelectedComputed} />\n        <Getter name=\"someSelected\" computed={someSelectedComputed} />\n        <Getter name=\"selectAllAvailable\" computed={selectAllAvailableComputed} />\n        <Action name=\"toggleSelectAll\" action={toggleSelectAll} />\n        <Getter name=\"rows\" computed={unwrapRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/* tslint:disable: max-line-length */\n/** A plugin that performs built-in selection. */\nexport const IntegratedSelection: React.ComponentType<IntegratedSelectionProps> = IntegratedSelectionBase;\n/* tslint:enable: max-line-length */\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, ActionFn,\n} from '@devexpress/dx-react-core';\nimport {\n  changeColumnSorting,\n  getColumnExtensionValueGetter,\n  getPersistentSortedColumns,\n  calculateKeepOther,\n  ChangeSortingPayload,\n} from '@devexpress/dx-grid-core';\nimport { SortingStateProps, SortingStateState } from '../types';\n\nconst columnExtensionValueGetter = (\n  columnExtensions, defaultValue,\n) => getColumnExtensionValueGetter(columnExtensions, 'sortingEnabled', defaultValue);\n\nclass SortingStateBase extends React.PureComponent<SortingStateProps, SortingStateState> {\n  static defaultProps = {\n    defaultSorting: [],\n    columnSortingEnabled: true,\n  };\n  changeColumnSorting: ActionFn<ChangeSortingPayload>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sorting: props.sorting || props.defaultSorting,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        sorting: () => {\n          const { onSortingChange } = this.props;\n          return onSortingChange;\n        },\n      },\n    );\n\n    this.changeColumnSorting = stateHelper.applyReducer\n      .bind(stateHelper, (prevState, payload) => {\n        const { sorting = prevState.sorting } = this.props;\n        const persistentSortedColumns = getPersistentSortedColumns(sorting, props.columnExtensions);\n        const keepOther = calculateKeepOther(\n          prevState.sorting, payload.keepOther, persistentSortedColumns,\n        );\n        return changeColumnSorting(prevState, { ...payload, keepOther });\n      });\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      sorting = prevState.sorting,\n    } = nextProps;\n\n    return {\n      sorting,\n    };\n  }\n\n  render() {\n    const { sorting } = this.state;\n    const { columnExtensions, columnSortingEnabled } = this.props;\n\n    return (\n      <Plugin\n        name=\"SortingState\"\n      >\n        <Getter name=\"sorting\" value={sorting} />\n        <Getter\n          name=\"isColumnSortingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnSortingEnabled)}\n        />\n        <Action name=\"changeColumnSorting\" action={this.changeColumnSorting} />\n      </Plugin>\n    );\n  }\n}\n\n// tslint:disable-next-line: max-line-length\n/** A plugin that manages the sorting state. It controls the list of columns that participate in sorting. */\nexport const SortingState: React.ComponentType<SortingStateProps> = SortingStateBase;\n","import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport { sortedRows, getColumnExtension } from '@devexpress/dx-grid-core';\nimport { IntegratedSortingProps, IntegratedSorting as IntegratedSortingNs } from '../types';\n\nconst pluginDependencies = [\n  { name: 'SortingState' },\n];\n\nclass IntegratedSortingBase extends React.PureComponent<IntegratedSortingProps> {\n  render() {\n    const { columnExtensions } = this.props;\n    const getColumnCompare = columnName => (\n      getColumnExtension(columnExtensions, columnName) as IntegratedSortingNs.ColumnExtension\n    ).compare!;\n\n    const rowsComputed = (\n      { rows, sorting, getCellValue, isGroupRow, getRowLevelKey }: Getters,\n    ) => sortedRows(rows, sorting, getCellValue, getColumnCompare, isGroupRow, getRowLevelKey);\n\n    return (\n      <Plugin\n        name=\"IntegratedSorting\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={rowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that performs built-in data sorting. */\nexport const IntegratedSorting: React.ComponentType<IntegratedSortingProps> = IntegratedSortingBase;\n","import * as React from 'react';\nimport { createPortal } from 'react-dom';\nimport {\n  Plugin, Getter, Template, TemplatePlaceholder,\n  TemplateConnector,\n  DragDropProvider as DragDropProviderCore,\n} from '@devexpress/dx-react-core';\nimport { DragDropProviderProps, DragDropProviderState } from '../types';\n\nconst getTargetColumns = (payload, columns) => payload\n  .filter(item => item.type === 'column')\n  .map(item => columns.find(column => column.name === item.columnName));\n\n// tslint:disable-next-line: max-line-length\nclass DragDropProviderBase extends React.PureComponent<DragDropProviderProps, DragDropProviderState> {\n  static components = {\n    containerComponent: 'Container',\n    columnComponent: 'Column',\n  };\n  change: (object) => void;\n  bodyRef!: HTMLElement;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      payload: null,\n      clientOffset: null,\n    };\n\n    this.change = ({ payload, clientOffset }) => this.setState({ payload, clientOffset });\n  }\n\n  componentDidMount() {\n    this.bodyRef = document.body;\n  }\n\n  render() {\n    const {\n      containerComponent: Container,\n      columnComponent: Column,\n    } = this.props;\n    const {\n      payload,\n      clientOffset,\n    } = this.state;\n\n    return (\n      <Plugin\n        name=\"DragDropProvider\"\n      >\n        <Getter name=\"draggingEnabled\" value />\n        <Template name=\"root\">\n          <DragDropProviderCore\n            onChange={this.change}\n          >\n            <TemplatePlaceholder />\n          </DragDropProviderCore>\n          {payload && (\n            <TemplateConnector>\n              {({ columns }) => (\n                createPortal(\n                  <Container\n                    clientOffset={clientOffset!}\n                  >\n                    {getTargetColumns(payload, columns)\n                      .map(column => (\n                        <Column\n                          key={column.name}\n                          column={column}\n                        />\n                      ))\n                    }\n                  </Container>,\n                  this.bodyRef,\n                )\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n// tslint:disable-next-line: max-line-length\n/** A plugin that implements the drag-and-drop functionality and visualizes columns that are being dragged. */\nexport const DragDropProvider: React.ComponentType<DragDropProviderProps> = DragDropProviderBase;\n","import * as React from 'react';\nimport {\n  Getter,\n  Plugin,\n  Template,\n  PlaceholderWithRef,\n  TemplateConnector,\n  DropTarget,\n  withComponents,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  TABLE_DATA_TYPE,\n  TABLE_REORDERING_TYPE,\n  changeColumnOrder,\n  getTableTargetColumnIndex,\n  tableHeaderRowsWithReordering,\n  draftOrder as draftOrderComputed,\n  TargetColumnGeometry,\n  TableColumn,\n} from '@devexpress/dx-grid-core';\nimport { OrderedTableColumns } from './internal/ordered-table-columns';\nimport {\n  Table as TableNS, CellDimensionsGetter, TableColumnReorderingProps,\n  DragOverArgs, TableColumnReorderingState,\n} from '../types';\n\nconst pluginDependencies = [\n  { name: 'Table' },\n  { name: 'DragDropProvider', optional: true },\n];\n\nconst tableHeaderRowsComputed = (\n  { tableHeaderRows }: Getters,\n) => tableHeaderRowsWithReordering(tableHeaderRows);\n\n// tslint:disable-next-line: max-line-length\nclass TableColumnReorderingRaw extends React.PureComponent<TableColumnReorderingProps, TableColumnReorderingState> {\n  static defaultProps = {\n    defaultOrder: [],\n  };\n  static components = {\n    tableContainerComponent: 'TableContainer',\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n  };\n  cellDimensionGetters: { [colName: string]: CellDimensionsGetter } = {};\n  cellDimensions: TargetColumnGeometry[] = [];\n  onOver: (arg: DragOverArgs) => void;\n  onLeave: () => void;\n  onDrop: () => void;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      order: props.defaultOrder,\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1,\n    };\n\n    this.onOver = this.handleOver.bind(this);\n    this.onLeave = this.handleLeave.bind(this);\n    this.onDrop = this.handleDrop.bind(this);\n  }\n\n  getState() {\n    const { order: orderState } = this.state;\n    const {\n      order = orderState,\n    } = this.props;\n    return {\n      ...this.state,\n      order,\n    };\n  }\n\n  getDraftOrder() {\n    const { order, sourceColumnIndex, targetColumnIndex } = this.getState();\n    return draftOrderComputed(order, sourceColumnIndex, targetColumnIndex);\n  }\n\n  getAvailableColumns() {\n    return this.getDraftOrder()\n      .filter(columnName => !!this.cellDimensionGetters[columnName]);\n  }\n\n  cacheCellDimensions() {\n    this.cellDimensions = (this.cellDimensions && this.cellDimensions.length)\n      ? this.cellDimensions\n      : this.getAvailableColumns()\n        .map(columnName => this.cellDimensionGetters[columnName]());\n  }\n\n  resetCellDimensions() {\n    this.cellDimensions = [];\n  }\n\n  ensureCellDimensionGetters(tableColumns: ReadonlyArray<TableColumn>) {\n    Object.keys(this.cellDimensionGetters)\n      .forEach((columnName) => {\n        const columnIndex = tableColumns\n          .findIndex(({ type, column }) => type === TABLE_DATA_TYPE && column!.name === columnName);\n        if (columnIndex === -1) {\n          delete this.cellDimensionGetters[columnName];\n        }\n      });\n  }\n\n// tslint:disable-next-line: max-line-length\n  storeCellDimensionsGetter(tableColumn: Readonly<TableColumn>, getter: CellDimensionsGetter, tableColumns: ReadonlyArray<TableColumn>) {\n    if (tableColumn.type === TABLE_DATA_TYPE) {\n      this.cellDimensionGetters[tableColumn.column!.name] = getter;\n    }\n    this.ensureCellDimensionGetters(tableColumns);\n  }\n\n  handleOver({ payload, clientOffset: { x } }: DragOverArgs) {\n    const sourceColumnName = payload[0].columnName;\n    const availableColumns = this.getAvailableColumns();\n    const relativeSourceColumnIndex = availableColumns.indexOf(sourceColumnName);\n\n    if (relativeSourceColumnIndex === -1) return;\n\n    this.cacheCellDimensions();\n    const cellDimensions = this.cellDimensions;\n\n    const relativeTargetIndex = getTableTargetColumnIndex(cellDimensions, x);\n\n    if (relativeTargetIndex === -1) return;\n\n    const {\n      sourceColumnIndex: prevSourceColumnIndex,\n      targetColumnIndex: prevTargetColumnIndex,\n    } = this.getState();\n    const draftOrder = this.getDraftOrder();\n    const targetColumnIndex = draftOrder.indexOf(availableColumns[relativeTargetIndex]);\n\n    if (targetColumnIndex === prevTargetColumnIndex) return;\n\n    const sourceColumnIndex = prevSourceColumnIndex === -1\n      ? draftOrder.indexOf(sourceColumnName)\n      : prevSourceColumnIndex;\n\n    this.setState({\n      sourceColumnIndex,\n      targetColumnIndex,\n    });\n  }\n\n  handleLeave() {\n    this.setState({\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1,\n    });\n\n    this.resetCellDimensions();\n  }\n\n  handleDrop() {\n    const { sourceColumnIndex, targetColumnIndex, order } = this.getState();\n    const { onOrderChange } = this.props;\n\n    if (sourceColumnIndex === -1 && targetColumnIndex === -1) return;\n\n    const nextOrder = changeColumnOrder(order, {\n      sourceColumnName: order[sourceColumnIndex],\n      targetColumnName: order[targetColumnIndex],\n    }) as string[];\n\n    this.setState({\n      order: nextOrder,\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1,\n    });\n\n    if (onOrderChange) {\n      onOrderChange(nextOrder);\n    }\n\n    this.resetCellDimensions();\n  }\n\n  render() {\n    const {\n      tableContainerComponent: Container,\n      rowComponent: Row,\n      cellComponent: Cell,\n    } = this.props;\n\n    this.cellDimensionGetters = {};\n\n    return (\n      <Plugin\n        name=\"TableColumnReordering\"\n        dependencies={pluginDependencies}\n      >\n        <OrderedTableColumns order={this.getDraftOrder()} />\n\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n        <Template name=\"table\">\n          {params => (\n            <TemplateConnector>\n              {({ draggingEnabled }) => (\n                <Container\n                  {...params}\n                  onOver={this.onOver}\n                  onLeave={this.onLeave}\n                  onDrop={this.onDrop}\n                  draggingEnabled={draggingEnabled}\n                >\n                  <PlaceholderWithRef />\n                </Container>\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: Getters) => tableRow.type === TABLE_REORDERING_TYPE}\n        >\n          {params => (\n            <Row {...params} />\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: Getters) => tableRow.type === TABLE_REORDERING_TYPE}\n        >\n          {(params: TableNS.CellProps) => (\n            <TemplateConnector>\n              {({ tableColumns }: Getters) => (\n                <Cell\n                  {...params}\n                  getCellDimensions={getter => this.storeCellDimensionsGetter(\n                    params.tableColumn, getter, tableColumns,\n                  )}\n                />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nconst TableContainer = ({\n  onOver, onLeave, onDrop, children, draggingEnabled,\n}) => (\n  draggingEnabled ? (\n    <DropTarget\n      onOver={onOver}\n      onLeave={onLeave}\n      onDrop={onDrop}\n    >\n      {children}\n    </DropTarget>\n  ) : children\n);\n\n/** A plugin that manages the displayed columns' order. */\nexport const TableColumnReordering: React.ComponentType<TableColumnReorderingProps>\n  = withComponents({ TableContainer })(TableColumnReorderingRaw);\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Getter,\n  Template,\n  TemplatePlaceholder,\n  TemplateConnector,\n  Plugin,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  tableRowsWithDataRows,\n  tableCellColSpanGetter,\n  isNoDataTableRow,\n  isNoDataTableCell,\n  isDataTableCell,\n  isHeaderStubTableCell,\n  isDataTableRow,\n  TABLE_DATA_TYPE,\n  TABLE_NODATA_TYPE,\n} from '@devexpress/dx-grid-core';\nimport { TableProps, Table as TableNS, TableLayoutProps } from '../types';\nimport { TableColumnsWithDataRowsGetter } from './internal/table-columns-getter';\n\nconst RowPlaceholder = React.forwardRef((props, ref) => (\n  <TemplatePlaceholder name=\"tableRow\" params={{ ...props, ref }} />\n));\nconst CellPlaceholder = props => <TemplatePlaceholder name=\"tableCell\" params={props} />;\n\nconst tableHeaderRows = [];\nconst tableBodyRowsComputed = ({ rows, getRowId, isDataLoading }: Getters) => (\n  tableRowsWithDataRows(rows, getRowId, isDataLoading)\n);\nconst tableFooterRows = [];\n\nconst defaultMessages = {\n  noData: 'No data',\n};\n\nclass TableBase extends React.PureComponent<TableProps> {\n  static COLUMN_TYPE = TABLE_DATA_TYPE;\n  static ROW_TYPE = TABLE_DATA_TYPE;\n  static NODATA_ROW_TYPE = TABLE_NODATA_TYPE;\n  static defaultProps = {\n    messages: {},\n  };\n  static components = {\n    tableComponent: 'Table',\n    headComponent: 'TableHead',\n    bodyComponent: 'TableBody',\n    footerComponent: 'TableFooter',\n    containerComponent: 'Container',\n    layoutComponent: 'Layout',\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    noDataRowComponent: 'NoDataRow',\n    noDataCellComponent: 'NoDataCell',\n    stubRowComponent: 'StubRow',\n    stubCellComponent: 'StubCell',\n    stubHeaderCellComponent: 'StubHeaderCell',\n  };\n\n  render() {\n    const {\n      layoutComponent: Layout,\n      cellComponent: Cell,\n      rowComponent: Row,\n      noDataRowComponent: NoDataRow,\n      noDataCellComponent: NoDataCell,\n      stubRowComponent: StubRow,\n      stubCellComponent: StubCell,\n      stubHeaderCellComponent: StubHeaderCell,\n      columnExtensions,\n      messages,\n      containerComponent,\n      tableComponent,\n      headComponent,\n      bodyComponent,\n      footerComponent,\n    } = this.props;\n\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    return (\n      <Plugin\n        name=\"Table\"\n      >\n        <Getter name=\"tableHeaderRows\" value={tableHeaderRows} />\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Getter name=\"tableFooterRows\" value={tableFooterRows} />\n        <TableColumnsWithDataRowsGetter columnExtensions={columnExtensions} />\n        <Getter name=\"getTableCellColSpan\" value={tableCellColSpanGetter} />\n\n        <Template name=\"body\">\n          <TemplatePlaceholder name=\"table\" />\n        </Template>\n        <Template name=\"table\">\n          {params => (\n            <TemplateConnector>\n              {({\n                tableHeaderRows: headerRows,\n                tableBodyRows: bodyRows,\n                tableFooterRows: footerRows,\n                tableColumns: columns,\n                getTableCellColSpan,\n              }) => (\n                <TemplatePlaceholder\n                  name=\"tableLayout\"\n                  params={{\n                    ...params,\n                    tableComponent,\n                    headComponent,\n                    bodyComponent,\n                    footerComponent,\n                    containerComponent,\n                    headerRows,\n                    bodyRows,\n                    footerRows,\n                    columns,\n                    rowComponent: RowPlaceholder,\n                    cellComponent: CellPlaceholder,\n                    getCellColSpan: getTableCellColSpan,\n                  }}\n                />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template name=\"tableLayout\">\n          {(params: TableLayoutProps) => (\n            <Layout {...params} />\n          )}\n        </Template>\n        <Template name=\"tableCell\">\n          {(params: TableNS.CellProps) => (\n            <TemplateConnector>\n              {(\n                { tableHeaderRows: headerRows },\n              ) => (isHeaderStubTableCell(params.tableRow, headerRows)\n                ? <StubHeaderCell {...params} />\n                : <StubCell {...params} />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }: any) => isDataTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableNS.CellProps) => (\n            <TemplateConnector>\n              {({ getCellValue }) => {\n                const columnName = params.tableColumn.column!.name;\n                const value = getCellValue(params.tableRow.row, columnName);\n                return (\n                  <TemplatePlaceholder\n                    name=\"valueFormatter\"\n                    params={{\n                      value,\n                      row: params.tableRow.row,\n                      column: params.tableColumn.column,\n                    }}\n                  >\n                    {content => (\n                      <Cell\n                        {...params}\n                        row={params.tableRow.row}\n                        column={params.tableColumn.column!}\n                        value={value}\n                      >\n                        {content}\n                      </Cell>\n                    )}\n                  </TemplatePlaceholder>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: any) => !!isNoDataTableRow(tableRow)}\n        >\n          {(params: TableNS.CellProps) => (\n            <TemplateConnector>\n              {({ tableColumns }) => {\n                if (isNoDataTableCell(params.tableColumn, tableColumns)) {\n                  return (\n                    <NoDataCell\n                      {...params}\n                      getMessage={getMessage}\n                    />\n                  );\n                }\n                return null;\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template name=\"tableRow\">\n          {(params: TableNS.RowProps) => (\n            <StubRow {...params} />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isDataTableRow(tableRow)}\n        >\n          {(params: TableNS.RowProps) => (\n            <Row\n              {...params}\n              row={params.tableRow.row}\n            />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isNoDataTableRow(tableRow)}\n        >\n          {(params: TableNS.RowProps) => <NoDataRow {...params} />}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that renders Grid data as a table. This plugin enables you to customize\n * table rows and columns, and contains the Table Row and Table Cell components\n * that can be extended by other plugins\n * */\nexport const Table: React.ComponentType<TableProps> & {\n  /** The data column type's indentifier. */\n  COLUMN_TYPE: symbol;\n  /** The data row type's indentifier. */\n  ROW_TYPE: symbol;\n  /** The nodata row type's indentifier. */\n  NODATA_ROW_TYPE: symbol;\n} = TableBase;\n","import * as React from 'react';\nimport {\n  Getter, Template, Plugin,\n  TemplateConnector,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  TABLE_SELECT_TYPE,\n  tableColumnsWithSelection,\n  isSelectTableCell,\n  isSelectAllTableCell,\n  isDataTableRow,\n  isRowHighlighted,\n} from '@devexpress/dx-grid-core';\nimport { TableSelectionProps, TableCellProps, TableRowProps } from '../types';\n\nclass TableSelectionBase extends React.PureComponent<TableSelectionProps> {\n  static defaultProps = {\n    highlightRow: false,\n    selectByRowClick: false,\n    showSelectAll: false,\n    showSelectionColumn: true,\n  };\n  static components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    headerCellComponent: 'HeaderCell',\n  };\n  static COLUMN_TYPE = TABLE_SELECT_TYPE;\n\n  render() {\n    const {\n      highlightRow,\n      selectByRowClick,\n      showSelectionColumn,\n      showSelectAll,\n      headerCellComponent: HeaderCell,\n      cellComponent: Cell,\n      rowComponent: Row,\n      selectionColumnWidth,\n    } = this.props;\n\n    const tableColumnsComputed = (\n      { tableColumns }: Getters,\n    ) => tableColumnsWithSelection(tableColumns, selectionColumnWidth, showSelectionColumn);\n\n    return (\n      <Plugin\n        name=\"TableSelection\"\n        dependencies={[\n          { name: 'Table' },\n          { name: 'SelectionState' },\n          { name: 'IntegratedSelection', optional: !showSelectAll },\n        ]}\n      >\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        {highlightRow && (\n          <Getter name=\"highlightSelectedRow\" value />\n        )}\n\n        {(showSelectionColumn && showSelectAll) && (\n          <Template\n            name=\"tableCell\"\n            predicate={({\n              tableRow, tableColumn,\n            }: any) => isSelectAllTableCell(tableRow, tableColumn)}\n          >\n            {(params: TableCellProps) => (\n              <TemplateConnector>\n                {({ selectAllAvailable, allSelected, someSelected }, { toggleSelectAll }) => (\n                  <HeaderCell\n                    {...params}\n                    disabled={!selectAllAvailable}\n                    allSelected={allSelected}\n                    someSelected={someSelected}\n                    onToggle={select => toggleSelectAll(select)}\n                  />\n                )}\n              </TemplateConnector>\n            )}\n          </Template>\n        )}\n        {showSelectionColumn && (\n          <Template\n            name=\"tableCell\"\n            predicate={({ tableRow, tableColumn }: any) => isSelectTableCell(tableRow, tableColumn)}\n          >\n            {(params: TableCellProps) => (\n              <TemplateConnector>\n                {({ selection }, { toggleSelection }) => (\n                  <Cell\n                    {...params}\n                    row={params.tableRow.row}\n                    selected={selection.indexOf(params.tableRow.rowId) !== -1}\n                    onToggle={() => toggleSelection({ rowIds: [params.tableRow.rowId] })}\n                  />\n                )}\n              </TemplateConnector>\n            )}\n          </Template>\n        )}\n        {(highlightRow || selectByRowClick) && (\n          <Template\n            name=\"tableRow\"\n            predicate={({ tableRow }: any) => !!isDataTableRow(tableRow)}\n          >\n            {(params: TableRowProps) => (\n              <TemplateConnector>\n                {({ selection }, { toggleSelection }) => (\n                  <Row\n                    {...params}\n                    selectByRowClick={selectByRowClick}\n                    highlighted={isRowHighlighted(highlightRow!, selection, params.tableRow)}\n                    onToggle={() => toggleSelection({ rowIds: [params.tableRow.rowId] })}\n                  />\n                )}\n              </TemplateConnector>\n            )}\n          </Template>\n        )}\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that visualizes table rows' selection state by rendering selection checkboxes\n * and highlighting the selected rows.\n * */\nexport const TableSelection: React.ComponentType<TableSelectionProps> & {\n  /** The selection column type's indentifier. */\n  COLUMN_TYPE: symbol;\n} = TableSelectionBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, ActionFn,\n} from '@devexpress/dx-react-core';\nimport { toggleDetailRowExpanded, ToggleRowPayload } from '@devexpress/dx-grid-core';\nimport { RowDetailStateProps, RowDetailStateState } from '../types';\n\n// tslint:disable-next-line: max-line-length\nclass RowDetailStateBase extends React.PureComponent<RowDetailStateProps, RowDetailStateState> {\n  static defaultProps = {\n    defaultExpandedRowIds: [],\n  };\n  toggleDetailRowExpanded: ActionFn<ToggleRowPayload>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expandedRowIds: props.expandedRowIds || props.defaultExpandedRowIds,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        expandedRowIds: () => {\n          const { onExpandedRowIdsChange } = this.props;\n          return onExpandedRowIdsChange;\n        },\n      },\n    );\n\n    this.toggleDetailRowExpanded = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'expandedRowIds', toggleDetailRowExpanded);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      expandedRowIds = prevState.expandedRowIds,\n    } = nextProps;\n\n    return {\n      expandedRowIds,\n    };\n  }\n\n  render() {\n    const { expandedRowIds } = this.state;\n\n    return (\n      <Plugin\n        name=\"RowDetailState\"\n      >\n        <Getter name=\"expandedDetailRowIds\" value={expandedRowIds} />\n        <Action name=\"toggleDetailRowExpanded\" action={this.toggleDetailRowExpanded} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that manages the expanded state for table row details. */\nexport const RowDetailState: React.ComponentType<RowDetailStateProps> = RowDetailStateBase;\n","import * as React from 'react';\nimport {\n  Getter, Template, Plugin, TemplateConnector, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  tableRowsWithExpandedDetail,\n  tableDetailCellColSpanGetter,\n  isDetailRowExpanded,\n  tableColumnsWithDetail,\n  isDetailToggleTableCell,\n  isDetailTableRow,\n  isDetailTableCell,\n  TABLE_DETAIL_TYPE,\n} from '@devexpress/dx-grid-core';\nimport { TableRowDetailProps, TableCellProps, TableRowProps } from '../types';\n\nconst getCellColSpanComputed = (\n  { getTableCellColSpan }: Getters,\n) => tableDetailCellColSpanGetter(getTableCellColSpan);\n\nconst pluginDependencies = [\n  { name: 'RowDetailState' },\n  { name: 'Table' },\n];\n\nclass TableRowDetailBase extends React.PureComponent<TableRowDetailProps> {\n  static ROW_TYPE = TABLE_DETAIL_TYPE;\n  static COLUMN_TYPE = TABLE_DETAIL_TYPE;\n  static defaultProps = {\n    contentComponent: () => null,\n  };\n  static components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    toggleCellComponent: 'ToggleCell',\n  };\n\n  render() {\n    const {\n      rowHeight,\n      contentComponent: Content,\n      toggleCellComponent: ToggleCell,\n      cellComponent: Cell,\n      rowComponent: Row,\n      toggleColumnWidth,\n    } = this.props;\n\n    const tableColumnsComputed = (\n      { tableColumns }: Getters,\n    ) => tableColumnsWithDetail(tableColumns, toggleColumnWidth);\n    const tableBodyRowsComputed = (\n      { tableBodyRows, expandedDetailRowIds }: Getters,\n    ) => tableRowsWithExpandedDetail(tableBodyRows, expandedDetailRowIds, rowHeight!);\n\n    return (\n      <Plugin\n        name=\"TableRowDetail\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Getter name=\"getTableCellColSpan\" computed={getCellColSpanComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isDetailToggleTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({ expandedDetailRowIds }, { toggleDetailRowExpanded }) => (\n                <ToggleCell\n                  {...params}\n                  row={params.tableRow.row}\n                  expanded={isDetailRowExpanded(expandedDetailRowIds, params.tableRow.rowId!)}\n                  onToggle={() => toggleDetailRowExpanded({ rowId: params.tableRow.rowId })}\n                />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: any) => !!isDetailTableRow(tableRow)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({ tableColumns }) => {\n                if (isDetailTableCell(params.tableColumn, tableColumns)) {\n                  return (\n                    <Cell\n                      {...params}\n                      row={params.tableRow.row}\n                    >\n                      {Content && <Content row={params.tableRow.row} />}\n                    </Cell>\n                  );\n                }\n                return null;\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isDetailTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <Row\n              {...params}\n              row={params.tableRow.row}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders detail rows. */\nexport const TableRowDetail: React.ComponentType<TableRowDetailProps> & {\n  /** The detail column type's identifier. */\n  COLUMN_TYPE: symbol;\n  /** The detail row type's indentifier. */\n  ROW_TYPE: symbol;\n} = TableRowDetailBase;\n","export const defaultSummaryMessages = {\n  sum: 'Sum',\n  min: 'Min',\n  max: 'Max',\n  avg: 'Avg',\n  count: 'Count',\n};\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  defaultFormatlessSummaries, ColumnSummary,\n} from '@devexpress/dx-grid-core';\nimport { TemplatePlaceholder } from '@devexpress/dx-react-core';\nimport { TableSummaryContentProps, SummaryItemProps } from '../../types';\nimport { defaultSummaryMessages } from './constants';\n\nexport const TableSummaryContent: React.SFC<TableSummaryContentProps> = ({\n  column, columnSummaries, formatlessSummaryTypes,\n  itemComponent: Item,\n  messages,\n}) => {\n  const getMessage = getMessagesFormatter({ ...defaultSummaryMessages, ...messages });\n  const SummaryItem: React.SFC<SummaryItemProps> = ({ summary, children }) => (\n    <Item\n      getMessage={getMessage}\n      type={summary.type}\n      value={summary.value}\n    >\n      {children || String(summary.value)}\n    </Item>\n  );\n  const isFormatlessSummary = (summary: ColumnSummary) => (\n    summary.value === null\n    || formatlessSummaryTypes.includes(summary.type)\n    || defaultFormatlessSummaries.includes(summary.type)\n  );\n\n  return (\n    <React.Fragment>\n      {columnSummaries.map((summary) => {\n        if (isFormatlessSummary(summary)) {\n          return <SummaryItem key={summary.type} summary={summary} />;\n        }\n        return (\n          <TemplatePlaceholder\n            key={summary.type}\n            name=\"valueFormatter\"\n            params={{\n              column,\n              value: summary.value,\n            }}\n          >\n            {content => (\n              <SummaryItem summary={summary}>\n                {content}\n              </SummaryItem>\n            )}\n          </TemplatePlaceholder>\n        );\n      })}\n    </React.Fragment>\n  );\n};\n","import * as React from 'react';\nimport { TemplatePlaceholder } from '@devexpress/dx-react-core';\nimport { getGroupInlineSummaries } from '@devexpress/dx-grid-core';\nimport { GetInlineSummaryComponent, FlattenGroupInlineSummariesFn } from '../../types';\n\nconst getInlineSummaryComponent: GetInlineSummaryComponent = (\n  column, summary, formatlessSummaries,\n) => () => (\n  (summary.value === null || formatlessSummaries.includes(summary.type))\n    ? <>{summary.value}</>\n    : (\n      <TemplatePlaceholder\n        key={summary.type}\n        name=\"valueFormatter\"\n        params={{\n          column,\n          value: summary.value,\n        }}\n      >\n        {content => content || summary.value}\n      </TemplatePlaceholder>\n    )\n);\n\nexport const flattenGroupInlineSummaries: FlattenGroupInlineSummariesFn = (\n  columns, tableRow, groupSummaryItems, groupSummaryValues,\n  formatlessSummaries,\n) => (\n  getGroupInlineSummaries(\n    groupSummaryItems, columns,\n    groupSummaryValues[tableRow.row.compoundKey],\n  )\n    .map(colSummaries => ([\n      ...colSummaries.summaries.map(summary => ({\n        ...summary,\n        columnTitle: colSummaries.column.title,\n        messageKey: `${summary.type}Of`,\n        component: getInlineSummaryComponent(\n          colSummaries.column, summary, formatlessSummaries,\n        ),\n      })),\n    ]))\n    .reduce((acc, summaries) => acc.concat(summaries), [])\n);\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Getter, Template, Plugin, TemplatePlaceholder, TemplateConnector, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  tableRowsWithGrouping,\n  tableGroupCellColSpanGetter,\n  isGroupTableCell,\n  isGroupIndentTableCell,\n  isGroupTableRow,\n  TABLE_GROUP_TYPE,\n  getColumnSummaries,\n  defaultFormatlessSummaries,\n  isPreviousCellContainSummary,\n  isRowSummaryCell,\n  isGroupRowOrdinaryCell,\n  calculateGroupCellIndent,\n  isGroupIndentStubTableCell,\n  GroupSummaryItem,\n  TABLE_FLEX_TYPE,\n} from '@devexpress/dx-grid-core';\nimport { TableColumnsWithGrouping } from './internal';\nimport {\n  TableGroupRowProps, TableCellProps, TableRowProps,\n} from '../types';\nimport { TableSummaryContent } from '../components/summary/table-summary-content';\nimport { flattenGroupInlineSummaries } from '../components/summary/group-summaries';\n\nconst pluginDependencies = [\n  { name: 'GroupingState' },\n  { name: 'Table' },\n  { name: 'DataTypeProvider', optional: true },\n  { name: 'SummaryState', optional: true },\n  { name: 'CustomSummary', optional: true },\n  { name: 'IntegratedSummary', optional: true },\n  { name: 'Table' },\n  { name: 'DataTypeProvider', optional: true },\n  { name: 'TableSelection', optional: true },\n];\nconst side = 'left';\n\n/** @internal */\nexport const defaultMessages = {\n  countOf: 'Count: ',\n  sumOf: 'Sum of {columnTitle} is ',\n  maxOf: 'Max of {columnTitle} is ',\n  minOf: 'Min of {columnTitle} is ',\n  avgOf: 'Avg of {columnTitle} is ',\n};\n\nconst tableBodyRowsComputed = (\n  { tableBodyRows, isGroupRow }: Getters,\n) => tableRowsWithGrouping(tableBodyRows, isGroupRow);\nconst getCellColSpanComputed = (\n  { getTableCellColSpan, groupSummaryItems, viewport }: Getters,\n) => {\n  const firstVisibleColumnIndex = viewport?.columns[0][0];\n  return tableGroupCellColSpanGetter(\n    getTableCellColSpan,\n    groupSummaryItems,\n    firstVisibleColumnIndex,\n  );\n};\n\nclass TableGroupRowBase extends React.PureComponent<TableGroupRowProps> {\n  static ROW_TYPE = TABLE_GROUP_TYPE;\n  static COLUMN_TYPE = TABLE_GROUP_TYPE;\n  static defaultProps = {\n    showColumnsWhenGrouped: false,\n    formatlessSummaryTypes: [],\n  };\n  static components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    contentComponent: 'Content',\n    iconComponent: 'Icon',\n    containerComponent: 'Container',\n    indentCellComponent: 'IndentCell',\n    inlineSummaryComponent: 'InlineSummary',\n    inlineSummaryItemComponent: 'InlineSummaryItem',\n    summaryCellComponent: 'SummaryCell',\n    summaryItemComponent: 'SummaryItem',\n    stubCellComponent: 'StubCell',\n  };\n\n  render() {\n    const {\n      cellComponent: GroupCell,\n      contentComponent: Content,\n      iconComponent: Icon,\n      rowComponent: GroupRow,\n      containerComponent: Container,\n      indentCellComponent: GroupIndentCell,\n      inlineSummaryComponent: InlineSummary,\n      inlineSummaryItemComponent: InlineSummaryItem,\n      summaryCellComponent: SummaryCell,\n      summaryItemComponent: SummaryItem,\n      stubCellComponent: StubCell,\n      indentColumnWidth,\n      contentCellPadding,\n      showColumnsWhenGrouped,\n      columnExtensions,\n      messages,\n      formatlessSummaryTypes,\n    } = this.props;\n\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    return (\n      <Plugin\n        name=\"TableGroupRow\"\n        dependencies={pluginDependencies}\n      >\n        <TableColumnsWithGrouping\n          columnExtensions={columnExtensions}\n          showColumnsWhenGrouped={showColumnsWhenGrouped}\n          indentColumnWidth={indentColumnWidth}\n        />\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Getter name=\"getTableCellColSpan\" computed={getCellColSpanComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: any) => isGroupTableRow(tableRow)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {(\n                {\n                  grouping, expandedGroups, groupSummaryItems, groupSummaryValues, columns,\n                },\n                { toggleGroupExpanded },\n              ) => {\n                if (isGroupTableCell(params.tableRow, params.tableColumn)) {\n                  const formatlessSummaries = defaultFormatlessSummaries\n                    .concat(formatlessSummaryTypes!);\n\n                  const inlineSummaries = groupSummaryItems\n                    ? flattenGroupInlineSummaries(\n                      columns, params.tableRow, groupSummaryItems,\n                      groupSummaryValues, formatlessSummaries,\n                    ) : [];\n                  const cellIndent = calculateGroupCellIndent(\n                    params.tableColumn, grouping, indentColumnWidth,\n                  );\n                  const contentIndent = `calc(${cellIndent}px + ${contentCellPadding})`;\n\n                  return (\n                    <TemplatePlaceholder\n                      name=\"valueFormatter\"\n                      params={{\n                        column: params.tableColumn.column,\n                        value: params.tableRow.row.value,\n                      }}\n                    >\n                      {content => (\n                        <GroupCell\n                          {...params}\n                          contentComponent={Content}\n                          iconComponent={Icon}\n                          containerComponent={Container}\n                          row={params.tableRow.row}\n                          column={params.tableColumn.column!}\n                          expanded={expandedGroups.indexOf(params.tableRow.row.compoundKey) !== -1}\n                          onToggle={\n                            () => toggleGroupExpanded({ groupKey: params.tableRow.row.compoundKey })\n                          }\n                          inlineSummaries={inlineSummaries}\n                          inlineSummaryComponent={InlineSummary}\n                          inlineSummaryItemComponent={InlineSummaryItem}\n                          getMessage={getMessage}\n                          position={contentIndent}\n                          side={side}\n                        >\n                          {content}\n                        </GroupCell>\n                      )}\n                    </TemplatePlaceholder>\n                  );\n                }\n                if (isGroupIndentTableCell(params.tableRow, params.tableColumn, grouping)) {\n                  const fixedProps = {\n                    side,\n                    position: calculateGroupCellIndent(\n                      params.tableColumn, grouping, indentColumnWidth,\n                    ),\n                  };\n                  if (GroupIndentCell) {\n                    return (\n                      <GroupIndentCell\n                        {...params}\n                        {...fixedProps}\n                        row={params.tableRow.row}\n                        column={params.tableColumn.column!}\n                      />\n                    );\n                  }\n                  return <TemplatePlaceholder params={fixedProps} />;\n                }\n                if (isGroupIndentStubTableCell(params.tableRow, params.tableColumn, grouping)) {\n                  return <TemplatePlaceholder params={params} />;\n                }\n                return null;\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({\n            tableRow, tableColumn,\n          }: any) => (isGroupRowOrdinaryCell(tableRow, tableColumn))}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {(\n                {\n                  groupSummaryItems, groupSummaryValues, grouping, tableColumns,\n                },\n                { toggleGroupExpanded },\n              ) => {\n                const { tableColumn, tableRow } = params;\n                const onToggle = () => toggleGroupExpanded({ groupKey: tableRow.row.compoundKey });\n\n                if (isRowSummaryCell(tableRow, tableColumn, grouping, groupSummaryItems)) {\n                  const columnSummaries = getColumnSummaries(\n                    groupSummaryItems,\n                    tableColumn.column!.name,\n                    groupSummaryValues[tableRow.row.compoundKey],\n                    summaryItem => (\n                      !(summaryItem as GroupSummaryItem).showInGroupFooter! &&\n                      (summaryItem as GroupSummaryItem).alignByColumn!\n                    ),\n                  );\n\n                  return (\n                    <SummaryCell\n                      {...params}\n                      row={params.tableRow.row}\n                      column={params.tableColumn.column!}\n                      onToggle={onToggle}\n                    >\n                      <TableSummaryContent\n                        column={tableColumn.column!}\n                        columnSummaries={columnSummaries}\n                        formatlessSummaryTypes={formatlessSummaryTypes!}\n                        itemComponent={SummaryItem}\n                        messages={messages!}\n                      />\n                    </SummaryCell>\n                  );\n                }\n\n                // NOTE: ensure that right-aligned summary will fit into a column\n                if (isPreviousCellContainSummary(\n                  tableRow, tableColumn, tableColumns, grouping, groupSummaryItems,\n                ) || TABLE_FLEX_TYPE === tableColumn.type) {\n                  return <StubCell {...params} onToggle={onToggle} />;\n                }\n\n                return <TemplatePlaceholder />;\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => isGroupTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <GroupRow\n              {...params}\n              row={params.tableRow.row}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders group rows and enables them to expand and collapse. */\nexport const TableGroupRow: React.ComponentType<TableGroupRowProps> & {\n  /** The group column type's identifier. */\n  COLUMN_TYPE: symbol;\n  /** The group row type's identifier. */\n  ROW_TYPE: symbol;\n} = TableGroupRowBase;\n","import * as React from 'react';\nimport {\n  Getter, Template, Plugin, TemplateConnector, TemplatePlaceholder, Getters,\n} from '@devexpress/dx-react-core';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  getColumnSortingDirection,\n  tableRowsWithHeading,\n  isHeadingTableCell,\n  isHeadingTableRow,\n  getNextColumnName,\n  TABLE_DATA_TYPE,\n  TABLE_HEADING_TYPE,\n} from '@devexpress/dx-grid-core';\nimport { TableHeaderRowProps, TableCellProps, TableRowProps } from '../types';\n\nconst tableHeaderRowsComputed = (\n  { tableHeaderRows }: Getters,\n) => tableRowsWithHeading(tableHeaderRows || []);\n\nclass TableHeaderRowBase extends React.PureComponent<TableHeaderRowProps> {\n  static ROW_TYPE = TABLE_HEADING_TYPE;\n  static defaultProps = {\n    showSortingControls: false,\n    showGroupingControls: false,\n    messages: {},\n  };\n  static components = {\n    cellComponent: 'Cell',\n    rowComponent: 'Row',\n    contentComponent: 'Content',\n    sortLabelComponent: 'SortLabel',\n    titleComponent: 'Title',\n    groupButtonComponent: 'GroupButton',\n  };\n\n  render() {\n    const {\n      showSortingControls,\n      showGroupingControls,\n      cellComponent: HeaderCell,\n      rowComponent: HeaderRow,\n      contentComponent: Content,\n      sortLabelComponent: SortLabel,\n      groupButtonComponent: GroupButton,\n      titleComponent: Title,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter(messages!);\n\n    return (\n      <Plugin\n        name=\"TableHeaderRow\"\n        dependencies={[\n          { name: 'Table' },\n          { name: 'SortingState', optional: !showSortingControls },\n          { name: 'GroupingState', optional: !showGroupingControls },\n          { name: 'DragDropProvider', optional: true },\n          { name: 'TableColumnResizing', optional: true },\n        ]}\n      >\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }: any) => isHeadingTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({\n                sorting, tableColumns, draggingEnabled, tableColumnResizingEnabled,\n                isColumnSortingEnabled, isColumnGroupingEnabled, columnResizingMode,\n              }, {\n                changeColumnSorting, changeColumnGrouping,\n                changeTableColumnWidth, draftTableColumnWidth, cancelTableColumnWidthDraft,\n                storeWidthGetters = () => {},\n              }) => {\n                const { name: columnName, title: columnTitle } = params.tableColumn.column!;\n                const atLeastOneDataColumn = tableColumns\n                  .filter(({ type }) => type === TABLE_DATA_TYPE).length > 1;\n                const sortingEnabled = isColumnSortingEnabled\n                  && isColumnSortingEnabled(columnName);\n                const groupingEnabled = isColumnGroupingEnabled\n                  && isColumnGroupingEnabled(columnName)\n                  && atLeastOneDataColumn;\n                const nextColumnName = getNextColumnName(tableColumns, columnName);\n\n                return (\n                  <HeaderCell\n                    {...params}\n                    column={params.tableColumn.column!}\n                    draggingEnabled={draggingEnabled && atLeastOneDataColumn}\n                    resizingEnabled={\n                      tableColumnResizingEnabled\n                      && (!!nextColumnName || columnResizingMode === 'widget')\n                    }\n                    onWidthChange={({ shift }) => changeTableColumnWidth({\n                      columnName, nextColumnName, shift,\n                    })}\n                    onWidthDraft={({ shift }) => draftTableColumnWidth({\n                      columnName, nextColumnName, shift,\n                    })}\n                    onWidthDraftCancel={() => cancelTableColumnWidthDraft()}\n                    getCellWidth={getter => storeWidthGetters({\n                      tableColumn: params.tableColumn , getter, tableColumns,\n                    })}\n                  >\n                    <TemplatePlaceholder\n                      name=\"tableHeaderCellBefore\"\n                      params={{\n                        column: params.tableColumn.column,\n                      }}\n                    />\n                    <Content\n                      column={params.tableColumn.column!}\n                      align={params.tableColumn.align!}\n                    >\n                      {showSortingControls ? (\n                        <SortLabel\n                          column={params.tableColumn.column!}\n                          align={params.tableColumn.align!}\n                          direction={getColumnSortingDirection(sorting, columnName) || null}\n                          disabled={!sortingEnabled}\n                          onSort={({ direction, keepOther }) => {\n                            changeColumnSorting({ columnName, direction, keepOther });\n                          }}\n                          getMessage={getMessage}\n                        >\n                          <Title>\n                            {columnTitle || columnName}\n                          </Title>\n                        </SortLabel>\n                      ) : (\n                        <Title>\n                          {columnTitle || columnName}\n                        </Title>\n                      )}\n                    </Content>\n                    {showGroupingControls ? (\n                      <GroupButton\n                        disabled={!groupingEnabled}\n                        onGroup={() => changeColumnGrouping({ columnName })}\n                      />\n                    ) : null}\n                  </HeaderCell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isHeadingTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => <HeaderRow {...params} />}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableHeaderRowBase.components = {\n  cellComponent: 'Cell',\n  rowComponent: 'Row',\n  contentComponent: 'Content',\n  sortLabelComponent: 'SortLabel',\n  titleComponent: 'Title',\n  groupButtonComponent: 'GroupButton',\n};\n\n/***\n * A plugin that renders the table's header row. The Column's `title` field specifies the\n * column's title in the header row.The plugin also allows you to manage a column's sorting\n * and grouping state and initiate column dragging.\n * */\nexport const TableHeaderRow: React.ComponentType<TableHeaderRowProps> & {\n  /** The header row type's identifier. */\n  ROW_TYPE: symbol;\n} = TableHeaderRowBase;\n","import * as React from 'react';\nimport {\n  Getter, Template, Plugin,\n  TemplateConnector, TemplatePlaceholder, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  getBandComponent, tableHeaderColumnChainsWithBands,\n  isBandedTableRow, isBandedOrHeaderRow,\n  tableRowsWithBands, isHeadingTableCell,\n  BAND_GROUP_CELL, BAND_HEADER_CELL,\n  BAND_EMPTY_CELL, BAND_DUPLICATE_RENDER,\n  TABLE_BAND_TYPE,\n  BAND_FILL_LEVEL_CELL,\n  bandLevelsVisibility,\n  columnBandLevels,\n  columnVisibleIntervals,\n} from '@devexpress/dx-grid-core';\nimport { TableBandHeaderProps, TableBandHeader as BandHeaderNS, TableRowProps } from '../types';\n\nconst CellPlaceholder = (props: BandHeaderNS.CellProps) => <TemplatePlaceholder params={props} />;\n\nconst bandLevelsVisibilityComputed = (\n  { columnVisibleIntervals: columnIntervals, tableHeaderColumnChains, bandLevels }: Getters,\n) => bandLevelsVisibility(\n  columnIntervals, tableHeaderColumnChains, bandLevels,\n);\n\nconst columnVisibleIntervalsComputed = (\n  { viewport, tableColumns }: Getters,\n) => columnVisibleIntervals(viewport, tableColumns);\n\nclass TableBandHeaderBase extends React.PureComponent<TableBandHeaderProps> {\n  static ROW_TYPE = TABLE_BAND_TYPE;\n  static components = {\n    cellComponent: 'Cell',\n    rowComponent: 'Row',\n    bandedHeaderCellComponent: 'BandedHeaderCell',\n    invisibleCellComponent: 'InvisibleCell',\n  };\n\n  render() {\n    const {\n      cellComponent: Cell,\n      rowComponent: Row,\n      bandedHeaderCellComponent: HeaderCell,\n      invisibleCellComponent: InvisibleCell,\n      columnBands,\n    } = this.props;\n\n    const tableHeaderRowsComputed = (\n      { tableHeaderRows, tableColumns }: Getters,\n    ) => tableRowsWithBands(\n      tableHeaderRows, columnBands, tableColumns,\n    );\n    const tableHeaderColumnChainsComputed = (\n      { tableHeaderRows, tableColumns }: Getters,\n    ) => tableHeaderColumnChainsWithBands(\n      tableHeaderRows, tableColumns, columnBands,\n    );\n    const bandLevels = columnBandLevels(columnBands);\n\n    return (\n      <Plugin\n        name=\"TableBandHeader\"\n        dependencies={[\n          { name: 'Table' },\n          { name: 'TableHeaderRow' },\n          { name: 'TableSelection', optional: true },\n          { name: 'TableEditColumn', optional: true },\n          { name: 'TableColumnVisibility', optional: true },\n          { name: 'TableGroupRow', optional: true },\n        ]}\n      >\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n        {/* internal */}\n        <Getter name=\"columnVisibleIntervals\" computed={columnVisibleIntervalsComputed} />\n        <Getter name=\"tableHeaderColumnChains\" computed={tableHeaderColumnChainsComputed} />\n        <Getter name=\"bandLevels\" value={bandLevels} />\n        <Getter name=\"bandLevelsVisibility\" computed={bandLevelsVisibilityComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: any) => isBandedOrHeaderRow(tableRow)}\n        >\n          {(params: BandHeaderNS.CellProps) => (\n            <TemplateConnector>\n              {({\n                tableColumns,\n                tableHeaderRows,\n                tableHeaderColumnChains,\n                columnVisibleIntervals: columnIntervals, bandLevelsVisibility: levelsVisibility,\n              }) => {\n                const bandComponent = getBandComponent(\n                  params,\n                  tableHeaderRows, tableColumns,\n                  columnBands, tableHeaderColumnChains, columnIntervals,\n                  levelsVisibility,\n                );\n                switch (bandComponent.type) {\n                  case BAND_DUPLICATE_RENDER:\n                    return <TemplatePlaceholder params={{ ...params }} />;\n\n                  case BAND_EMPTY_CELL:\n                    return <InvisibleCell />;\n\n                  case BAND_GROUP_CELL: {\n                    const { value, ...payload } = bandComponent.payload!;\n                    return (\n                      <Cell {...params} {...payload}>\n                        {value}\n                      </Cell>\n                    );\n                  }\n\n                  case BAND_HEADER_CELL:\n                    return (\n                      <TemplatePlaceholder\n                        name=\"tableCell\"\n                        params={{ ...params, ...bandComponent.payload }}\n                      />\n                    );\n\n                  case BAND_FILL_LEVEL_CELL:\n                    return (\n                      <Cell\n                        {...params}\n                        {...bandComponent.payload}\n                        style={{ whiteSpace: 'pre' }}\n                      >\n                        {' '}\n                      </Cell>\n                    );\n                  default:\n                    return null;\n                }\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }: any) => isHeadingTableCell(tableRow, tableColumn)}\n        >\n          {(params: BandHeaderNS.CellProps) => (\n            <HeaderCell component={CellPlaceholder} {...params} />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => isBandedTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => <Row {...params} />}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableBandHeaderBase.components = {\n  cellComponent: 'Cell',\n  rowComponent: 'Row',\n  bandedHeaderCellComponent: 'BandedHeaderCell',\n  invisibleCellComponent: 'InvisibleCell',\n};\n\n/** A plugin that renders the banded cells. */\nexport const TableBandHeader: React.ComponentType<TableBandHeaderProps> & {\n  /** The band row type's identifier. */\n  ROW_TYPE: symbol;\n} = TableBandHeaderBase;\n","import * as React from 'react';\nimport {\n  Getter, Template, TemplatePlaceholder, TemplateConnector, Plugin, Getters, Actions,\n} from '@devexpress/dx-react-core';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  getColumnFilterConfig,\n  tableHeaderRowsWithFilter,\n  isFilterTableCell,\n  isFilterTableRow,\n  getColumnFilterOperations,\n  isFilterValueEmpty,\n  getSelectedFilterOperation,\n  TABLE_FILTER_TYPE,\n  FilterConfig,\n  TOP_POSITION,\n} from '@devexpress/dx-grid-core';\nimport { TableFilterRowProps, TableFilterRowState, TableCellProps, TableRowProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'FilteringState' },\n  { name: 'Table' },\n  { name: 'DataTypeProvider', optional: true },\n];\n\nconst defaultMessages = {\n  filterPlaceholder: 'Filter...',\n  contains: 'Contains',\n  notContains: 'Does not contain',\n  startsWith: 'Starts with',\n  endsWith: 'Ends with',\n  equal: 'Equals',\n  notEqual: 'Does not equal',\n  greaterThan: 'Greater than',\n  greaterThanOrEqual: 'Greater than or equal to',\n  lessThan: 'Less than',\n  lessThanOrEqual: 'Less than or equal to',\n};\n\nclass TableFilterRowBase extends React.PureComponent<TableFilterRowProps, TableFilterRowState> {\n  static ROW_TYPE = TABLE_FILTER_TYPE;\n  static defaultProps = {\n    showFilterSelector: false,\n    messages: {},\n  };\n  static components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    filterSelectorComponent: 'FilterSelector',\n    iconComponent: 'Icon',\n    editorComponent: 'Editor',\n    toggleButtonComponent: 'ToggleButton',\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      filterOperations: {},\n    };\n  }\n\n  render() {\n    const {\n      rowHeight,\n      showFilterSelector,\n      cellComponent: FilterCell,\n      rowComponent: FilterRow,\n      filterSelectorComponent: FilterSelector,\n      iconComponent,\n      toggleButtonComponent,\n      editorComponent: EditorComponent,\n      messages,\n    } = this.props;\n\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    const tableHeaderRowsComputed = (\n      { tableHeaderRows }: Getters,\n    ) => tableHeaderRowsWithFilter(tableHeaderRows, rowHeight!);\n\n    return (\n      <Plugin\n        name=\"TableFilterRow\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }: any) => isFilterTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {(\n                { filters, isColumnFilteringEnabled, getAvailableFilterOperations, isDataRemote },\n                { changeColumnFilter, scrollToRow }: Actions,\n              ) => {\n                const { filterOperations } = this.state;\n                const { name: columnName } = params.tableColumn.column!;\n                const filter = getColumnFilterConfig(filters, columnName)!;\n                const onFilter = (\n                  config: FilterConfig | null,\n                ) => {\n                  if (isDataRemote) {\n                    scrollToRow(TOP_POSITION);\n                  }\n                  changeColumnFilter({ columnName, config });\n                };\n                const columnFilterOperations = getColumnFilterOperations(\n                  getAvailableFilterOperations, columnName,\n                );\n                const selectedFilterOperation = getSelectedFilterOperation(\n                  filterOperations, columnName, filter, columnFilterOperations,\n                );\n                const handleFilterOperationChange = (value: string) => {\n                  this.setState({\n                    filterOperations: {\n                      ...filterOperations,\n                      [columnName]: value,\n                    },\n                  });\n                  if (filter && !isFilterValueEmpty(filter.value)) {\n                    onFilter({ value: filter.value, operation: value });\n                  }\n                };\n                const handleFilterValueChange = (value: any) => onFilter(!isFilterValueEmpty(value)\n                  ? { value, operation: selectedFilterOperation }\n                  : null);\n                const filteringEnabled = isColumnFilteringEnabled(columnName);\n                return (\n                  <TemplatePlaceholder\n                    name=\"valueEditor\"\n                    params={{\n                      column: params.tableColumn.column,\n                      value: filter ? filter.value : undefined,\n                      onValueChange: handleFilterValueChange,\n                      disabled: !filteringEnabled,\n                    }}\n                  >\n                    {content => (\n                      <FilterCell\n                        {...params}\n                        getMessage={getMessage}\n                        column={params.tableColumn.column!}\n                        filter={filter}\n                        filteringEnabled={filteringEnabled}\n                        onFilter={onFilter}\n                      >\n                        {showFilterSelector\n                          ? (\n                            <FilterSelector\n                              toggleButtonComponent={toggleButtonComponent}\n                              iconComponent={iconComponent}\n                              value={selectedFilterOperation}\n                              availableValues={columnFilterOperations as string[]}\n                              onChange={handleFilterOperationChange}\n                              disabled={!filteringEnabled}\n                              getMessage={getMessage}\n                            />\n                          ) : null\n                        }\n                        {content || (\n                          <EditorComponent\n                            value={filter ? filter.value : undefined}\n                            disabled={!filteringEnabled}\n                            getMessage={getMessage}\n                            onChange={handleFilterValueChange}\n                          />\n                        )}\n                      </FilterCell>\n                    )}\n                  </TemplatePlaceholder>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isFilterTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => <FilterRow {...params} />}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders a filter row. */\nexport const TableFilterRow: React.ComponentType<TableFilterRowProps> & {\n  /** The filter row type's identifier. */\n  ROW_TYPE: symbol;\n} = TableFilterRowBase;\n","import * as React from 'react';\nimport {\n  Getter, Template, TemplatePlaceholder, TemplateConnector, Plugin, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  getRowChange,\n  tableRowsWithEditing,\n  isEditTableRow,\n  isAddedTableRow,\n  isEditTableCell,\n  TABLE_EDIT_TYPE,\n  TABLE_ADDED_TYPE,\n} from '@devexpress/dx-grid-core';\nimport { TableEditRowProps, TableCellProps, TableRowProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'EditingState' },\n  { name: 'Table' },\n  { name: 'DataTypeProvider', optional: true },\n];\n\nclass TableEditRowBase extends React.PureComponent<TableEditRowProps> {\n  static ADDED_ROW_TYPE = TABLE_ADDED_TYPE;\n  static EDIT_ROW_TYPE = TABLE_EDIT_TYPE;\n  static components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n  };\n\n  render() {\n    const {\n      cellComponent: EditCell,\n      rowComponent: EditRow,\n      rowHeight,\n    } = this.props;\n\n    const tableBodyRowsComputed = (\n      { tableBodyRows, editingRowIds, addedRows }: Getters,\n    ) => tableRowsWithEditing(tableBodyRows, editingRowIds, addedRows, rowHeight);\n\n    return (\n      <Plugin\n        name=\"TableEditRow\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }: any) => isEditTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({\n                getCellValue,\n                createRowChange,\n                rowChanges,\n                isColumnEditingEnabled,\n              }, {\n                changeAddedRow,\n                changeRow,\n              }) => {\n                const { rowId, row } = params.tableRow;\n                const { column } = params.tableColumn;\n                const { name: columnName } = column!;\n\n                const isNew = isAddedTableRow(params.tableRow);\n                const changedRow = isNew\n                  ? row\n                  : { ...row, ...getRowChange(rowChanges, rowId!) };\n\n                const value = getCellValue(changedRow, columnName);\n                const onValueChange = (newValue: any) => {\n                  const changeArgs = {\n                    rowId,\n                    change: createRowChange(changedRow, newValue, columnName),\n                  };\n                  if (isNew) {\n                    changeAddedRow(changeArgs);\n                  } else {\n                    changeRow(changeArgs);\n                  }\n                };\n                const editingEnabled = isColumnEditingEnabled(columnName);\n                return (\n                  <TemplatePlaceholder\n                    name=\"valueEditor\"\n                    params={{\n                      column,\n                      row,\n                      value,\n                      onValueChange,\n                      disabled: !editingEnabled,\n                    }}\n                  >\n                    {content => (\n                      <EditCell\n                        {...params}\n                        row={row}\n                        column={column!}\n                        value={value}\n                        editingEnabled={editingEnabled}\n                        onValueChange={onValueChange}\n                      >\n                        {content}\n                      </EditCell>\n                    )}\n                  </TemplatePlaceholder>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={(\n            { tableRow }: any,\n          ) => !!(isEditTableRow(tableRow) || isAddedTableRow(tableRow))}\n        >\n          {(params: TableRowProps) => (\n            <EditRow\n              {...params}\n              row={params.tableRow.row}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders a row being edited. */\nexport const TableEditRow: React.ComponentType<TableEditRowProps> & {\n  /** The added row type's identifier. */\n  ADDED_ROW_TYPE: symbol;\n  /** The edit row type's identifier. */\n  EDIT_ROW_TYPE: symbol;\n} = TableEditRowBase;\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Getter, Template, Plugin, TemplateConnector, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  TABLE_EDIT_COMMAND_TYPE,\n  tableColumnsWithEditing,\n  isHeadingEditCommandsTableCell,\n  isEditCommandsTableCell,\n  isAddedTableRow,\n  isEditTableRow,\n} from '@devexpress/dx-grid-core';\nimport { TableEditColumnProps, TableCellProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'EditingState' },\n  { name: 'Table' },\n];\n\nconst defaultMessages = {\n  addCommand: 'New',\n  editCommand: 'Edit',\n  deleteCommand: 'Delete',\n  commitCommand: 'Save',\n  cancelCommand: 'Cancel',\n};\n\nclass TableEditColumnBase extends React.PureComponent<TableEditColumnProps> {\n  static COLUMN_TYPE = TABLE_EDIT_COMMAND_TYPE;\n  static defaultProps = {\n    showAddCommand: false,\n    showEditCommand: false,\n    showDeleteCommand: false,\n    width: 140,\n    messages: {},\n  };\n  static components = {\n    cellComponent: 'Cell',\n    headerCellComponent: 'HeaderCell',\n    commandComponent: 'Command',\n  };\n\n  render() {\n    const {\n      cellComponent: Cell,\n      headerCellComponent: HeaderCell,\n      commandComponent: Command,\n      showAddCommand,\n      showEditCommand,\n      showDeleteCommand,\n      width,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n    const tableColumnsComputed = (\n      { tableColumns }: Getters,\n    ) => tableColumnsWithEditing(tableColumns, width!);\n\n    return (\n      <Plugin\n        name=\"TableEditColumn\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isHeadingEditCommandsTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {(getters, actions) => (\n                <HeaderCell {...params}>\n                  {showAddCommand && (\n                    <Command\n                      id=\"add\"\n                      text={getMessage('addCommand')}\n                      onExecute={() => actions.addRow()}\n                    />\n                  )}\n                </HeaderCell>\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isEditCommandsTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {(getters, actions) => {\n                const isEdit = isEditTableRow(params.tableRow);\n                const isNew = isAddedTableRow(params.tableRow);\n                const isEditing = isEdit || isNew;\n                const rowIds = [params.tableRow.rowId];\n                return (\n                  <Cell\n                    {...params}\n                    row={params.tableRow.row}\n                  >\n                    {showEditCommand && !isEditing && (\n                      <Command\n                        id=\"edit\"\n                        text={getMessage('editCommand')}\n                        onExecute={() => actions.startEditRows({ rowIds })}\n                      />\n                    )}\n                    {showDeleteCommand && !isEditing && (\n                      <Command\n                        id=\"delete\"\n                        text={getMessage('deleteCommand')}\n                        onExecute={() => {\n                          actions.deleteRows({ rowIds });\n                          actions.commitDeletedRows({ rowIds });\n                        }}\n                      />\n                    )}\n                    {isEditing && (\n                      <Command\n                        id=\"commit\"\n                        text={getMessage('commitCommand')}\n                        onExecute={() => {\n                          if (isNew) {\n                            actions.commitAddedRows({ rowIds });\n                          } else {\n                            actions.stopEditRows({ rowIds });\n                            actions.commitChangedRows({ rowIds });\n                          }\n                        }}\n                      />\n                    )}\n                    {isEditing && (\n                      <Command\n                        id=\"cancel\"\n                        text={getMessage('cancelCommand')}\n                        onExecute={() => {\n                          if (isNew) {\n                            actions.cancelAddedRows({ rowIds });\n                          } else {\n                            actions.stopEditRows({ rowIds });\n                            actions.cancelChangedRows({ rowIds });\n                          }\n                        }}\n                      />\n                    )}\n                  </Cell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that renders a command column. This column contains controls used for row editing,\n * creating, or deleting and committing/canceling changes.\n * */\nexport const TableEditColumn: React.ComponentType<TableEditColumnProps> & {\n  /** The edit column type's identifier. */\n  COLUMN_TYPE: symbol;\n} = TableEditColumnBase;\n","import * as React from 'react';\nimport { memoize, MemoizedComputed } from '@devexpress/dx-core';\nimport {\n  Plugin, Getter, Action, createStateHelper, StateHelper, ActionFn, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  tableColumnsWithWidths,\n  tableColumnsWithDraftWidths,\n  changeTableColumnWidth,\n  draftTableColumnWidth,\n  cancelTableColumnWidthDraft,\n  ColumnWidthPayload,\n  TableColumnWidthInfo,\n  TABLE_DATA_TYPE,\n} from '@devexpress/dx-grid-core';\nimport { TableColumnResizingProps, TableColumnResizingState, CellWidthGetter } from '../types';\n\nconst pluginDependencies = [\n  { name: 'Table' },\n];\n\n// tslint:disable-next-line: max-line-length\nclass TableColumnResizingBase extends React.PureComponent<TableColumnResizingProps, TableColumnResizingState> {\n  static defaultProps = {\n    defaultColumnWidths: [],\n    resizingMode: 'widget',\n  };\n  changeTableColumnWidth: ActionFn<ColumnWidthPayload>;\n  draftTableColumnWidth: ActionFn<ColumnWidthPayload>;\n  cancelTableColumnWidthDraft: ActionFn<any>;\n  storeWidthGetters: ActionFn<object>;\n  storeCache: (payload) => void;\n  clearCache: () => void;\n  tableColumnsComputed: MemoizedComputed<TableColumnWidthInfo[], typeof tableColumnsWithWidths>;\n  // tslint:disable-next-line: max-line-length\n  tableColumnsDraftComputed: MemoizedComputed<TableColumnWidthInfo[], typeof tableColumnsWithDraftWidths>;\n\n  widthGetters: { [colName: string]: CellWidthGetter } = {};\n  cachedWidths: { [colName: string]: number } = {};\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      columnWidths: props.columnWidths || props.defaultColumnWidths,\n      draftColumnWidths: [],\n    };\n\n    const stateHelper: StateHelper = createStateHelper(\n      this,\n      {\n        columnWidths: () => {\n          const { onColumnWidthsChange } = this.props;\n          return onColumnWidthsChange;\n        },\n      },\n    );\n\n    this.tableColumnsComputed = memoize(\n      columnWidths => (\n        { tableColumns }: Getters,\n      ) => tableColumnsWithWidths(tableColumns, columnWidths, this.props.resizingMode!),\n    );\n    this.tableColumnsDraftComputed = memoize(\n      draftColumnWidths => (\n        { tableColumns }: Getters,\n      ) => tableColumnsWithDraftWidths(\n        tableColumns, draftColumnWidths, this.props.resizingMode!,\n      ),\n    );\n\n    this.changeTableColumnWidth = stateHelper.applyReducer.bind(\n      stateHelper, (prevState, payload) => {\n        const cachedWidths = { ...this.cachedWidths };\n        const { minColumnWidth, maxColumnWidth, columnExtensions, resizingMode } = this.props;\n        return changeTableColumnWidth(\n          prevState,\n          { ...payload, cachedWidths, resizingMode,\n            minColumnWidth, maxColumnWidth, columnExtensions },\n        );\n      },\n    );\n    this.draftTableColumnWidth = stateHelper.applyReducer.bind(\n      stateHelper, (prevState, payload) => {\n        this.storeCache(payload);\n        const cachedWidths = this.cachedWidths;\n        const { minColumnWidth, maxColumnWidth, columnExtensions, resizingMode } = this.props;\n        return draftTableColumnWidth(\n          prevState,\n          { ...payload, cachedWidths, resizingMode,\n            minColumnWidth, maxColumnWidth, columnExtensions },\n        );\n      },\n    );\n    this.cancelTableColumnWidthDraft = stateHelper.applyReducer.bind(\n      stateHelper, cancelTableColumnWidthDraft,\n    );\n\n    this.storeCache = ({ columnName, nextColumnName }) => {\n      if (Object.keys(this.cachedWidths).length === 0) {\n        this.cachedWidths[columnName] = this.widthGetters[columnName]();\n        if (nextColumnName) {\n          this.cachedWidths[nextColumnName] = this.widthGetters[nextColumnName]();\n        }\n      }\n    };\n    this.clearCache = () => {\n      Object.keys(this.cachedWidths)\n      .forEach(columnName => delete this.cachedWidths[columnName]);\n    };\n\n    this.storeWidthGetters = memoize(({ tableColumn, getter, tableColumns }) => {\n      if (tableColumn.type === TABLE_DATA_TYPE) {\n        this.widthGetters[tableColumn.column!.name] = getter;\n      }\n      Object.keys(this.widthGetters)\n      .forEach((columnName) => {\n        const columnIndex = tableColumns\n          .findIndex(({ type, column }) => type === TABLE_DATA_TYPE && column!.name === columnName);\n        if (columnIndex === -1) {\n          delete this.widthGetters[columnName];\n        }\n      });\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      columnWidths = prevState.columnWidths,\n    } = nextProps;\n\n    return {\n      columnWidths,\n    };\n  }\n\n  componentDidUpdate (_, prevState) {\n    const { columnWidths: currentWidths } = this.state;\n    const { columnWidths: prevWidths } = prevState;\n    if (currentWidths !== prevWidths) {\n      this.clearCache();\n    }\n  }\n\n  render() {\n    const { columnWidths, draftColumnWidths } = this.state;\n    const { resizingMode } = this.props;\n    const tableColumnsComputed = this.tableColumnsComputed(columnWidths);\n    const tableColumnsDraftComputed = this.tableColumnsDraftComputed(draftColumnWidths);\n\n    return (\n      <Plugin\n        name=\"TableColumnResizing\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableColumnResizingEnabled\" value />\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        <Getter name=\"tableColumns\" computed={tableColumnsDraftComputed} />\n        <Getter name=\"columnResizingMode\" value={resizingMode} />\n        <Action name=\"changeTableColumnWidth\" action={this.changeTableColumnWidth} />\n        <Action name=\"draftTableColumnWidth\" action={this.draftTableColumnWidth} />\n        <Action name=\"cancelTableColumnWidthDraft\" action={this.cancelTableColumnWidthDraft} />\n        <Action name=\"storeWidthGetters\" action={this.storeWidthGetters} />\n      </Plugin>\n    );\n  }\n}\n\n/* tslint:disable: max-line-length */\n/** A plugin that manages table column widths. */\nexport const TableColumnResizing: React.ComponentType<TableColumnResizingProps> = TableColumnResizingBase;\n/* tslint:enable: max-line-length */\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Template, TemplatePlaceholder, Plugin,\n  TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport { pageCount } from '@devexpress/dx-grid-core';\nimport { PagingPanelProps, TableKeyboardNavigation } from '../types';\n\nconst pluginDependencies = [\n  { name: 'PagingState' },\n];\n\nconst defaultMessages = {\n  showAll: 'All',\n  info: ({ from, to, count }) => `${from}${from < to ? `-${to}` : ''} of ${count}`,\n};\n\nclass PagingPanelBase extends React.PureComponent<PagingPanelProps> {\n  static defaultProps = {\n    pageSizes: [],\n    messages: {},\n  };\n  static components = {\n    containerComponent: 'Container',\n  };\n\n  render() {\n    const {\n      containerComponent: Pager,\n      pageSizes,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    return (\n      <Plugin\n        name=\"PagingPanel\"\n        dependencies={pluginDependencies}\n      >\n        <Template name=\"footer\">\n          {(params: TableKeyboardNavigation.ExtraProps) => (\n            <React.Fragment>\n              <TemplatePlaceholder />\n              <TemplateConnector>\n              {({ currentPage, pageSize, totalCount },\n                { setCurrentPage, setPageSize }) => (\n                <Pager\n                  {...params}\n                  currentPage={currentPage}\n                  pageSize={pageSize}\n                  totalCount={totalCount}\n                  totalPages={pageCount(totalCount, pageSize)}\n                  pageSizes={pageSizes!}\n                  getMessage={getMessage}\n                  onCurrentPageChange={setCurrentPage}\n                  onPageSizeChange={setPageSize}\n                />\n              )}\n              </TemplateConnector>\n            </React.Fragment>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders the paging panel used for navigation through data pages. */\nexport const PagingPanel: React.ComponentType<PagingPanelProps> = PagingPanelBase;\n","import * as React from 'react';\nimport { DragSource } from '@devexpress/dx-react-core';\nimport { GroupingPanel as GP } from '../../types';\n\nconst defaultProps = {\n  draggingEnabled: false,\n  onDragStart: () => {},\n  onDragEnd: () => {},\n};\ntype GPItemLayoutProps = GP.GroupingItemLayoutProps & typeof defaultProps;\n\n// tslint:disable-next-line: max-line-length\nexport class ItemLayout extends React.PureComponent<GPItemLayoutProps, GP.GroupingItemLayoutState> {\n  static defaultProps = defaultProps;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dragging: false,\n    };\n  }\n\n  render() {\n    const {\n      item,\n      itemComponent: Item,\n      itemRef,\n      draggingEnabled,\n      onDragStart,\n      onDragEnd,\n    } = this.props;\n    const { dragging } = this.state;\n\n    const itemElement = <Item item={{ ...item, draft: dragging || item.draft }} />;\n\n    return (draggingEnabled ? (\n      <DragSource\n        payload={[{ type: 'column', columnName: item.column.name }]}\n        onStart={() => {\n          this.setState({ dragging: true });\n          onDragStart();\n        }}\n        onEnd={() => {\n          this.setState({ dragging: false });\n          onDragEnd();\n        }}\n        ref={itemRef}\n      >\n        {itemElement}\n      </DragSource>\n    ) : (\n      itemElement\n    ));\n  }\n}\n","import * as React from 'react';\nimport { flushSync } from 'react-dom';\nimport { DropTarget } from '@devexpress/dx-react-core';\nimport { getGroupCellTargetIndex } from '@devexpress/dx-grid-core';\nimport { ItemLayout } from './group-panel-layout/item-layout';\nimport { GroupingPanel as GP } from '../types';\n\nconst defaultProps = {\n  onGroup: () => {},\n  draggingEnabled: false,\n  isColumnGroupingEnabled: () => false,\n  onGroupDraft: () => {},\n  onGroupDraftCancel: () => {},\n};\ntype GPLayoutProps = GP.LayoutProps & typeof defaultProps;\n\n// tslint:disable-next-line: max-line-length\nclass GroupPanelLayoutBase extends React.PureComponent<GPLayoutProps, GP.GroupingItemLayoutState> {\n  static defaultProps = defaultProps;\n  handleDragEvent: (...args: any) => void;\n  onEnter: (any) => void;\n  onOver: (any) => void;\n  itemRefs: Element[] = [];\n  draggingColumnName: string | null = null;\n  onLeave: () => void;\n  onDrop: () => void;\n  onDragStart: (columnName: any) => void;\n  onDragEnd: () => void;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sourceColumnName: null,\n      targetItemIndex: -1,\n    };\n    this.handleDragEvent = (eventHandler, { payload, ...restArgs }) => {\n      const { isColumnGroupingEnabled } = this.props;\n      const { columnName } = payload[0];\n\n      if (isColumnGroupingEnabled(columnName)) {\n        eventHandler({ payload, ...restArgs });\n      }\n    };\n    this.onEnter = ({ payload }) => {\n      flushSync(() => this.setState({\n        sourceColumnName: payload[0].columnName,\n      }));\n    };\n    this.onOver = ({ clientOffset }) => {\n      const { onGroupDraft, items } = this.props;\n      const { sourceColumnName, targetItemIndex: prevTargetItemIndex } = this.state;\n      // eslint-disable-next-line react/no-find-dom-node\n      const itemGeometries = this.itemRefs\n        .map(ref => ref.getBoundingClientRect());\n      const sourceItemIndex = items.findIndex(({ column }) => column.name === sourceColumnName);\n      const targetItemIndex = getGroupCellTargetIndex(\n        itemGeometries,\n        sourceItemIndex,\n        clientOffset,\n      );\n\n      if (prevTargetItemIndex === targetItemIndex) return;\n\n      onGroupDraft({\n        columnName: sourceColumnName,\n        groupIndex: targetItemIndex,\n      });\n      this.setState({ targetItemIndex });\n    };\n    this.onLeave = () => {\n      const { onGroupDraft } = this.props;\n      const { sourceColumnName } = this.state;\n      if (!this.draggingColumnName) {\n        this.resetState();\n        return;\n      }\n      onGroupDraft({\n        columnName: sourceColumnName,\n        groupIndex: -1,\n      });\n      this.setState({\n        targetItemIndex: -1,\n      });\n    };\n    this.onDrop = () => {\n      const { onGroup } = this.props;\n      const { sourceColumnName, targetItemIndex } = this.state;\n      this.resetState();\n      onGroup({\n        columnName: sourceColumnName,\n        groupIndex: targetItemIndex,\n      });\n    };\n    this.onDragStart = (columnName) => {\n      this.draggingColumnName = columnName;\n    };\n    this.onDragEnd = () => {\n      this.draggingColumnName = null;\n      const { sourceColumnName, targetItemIndex } = this.state;\n      const { onGroup } = this.props;\n      if (sourceColumnName && targetItemIndex === -1) {\n        onGroup({\n          columnName: sourceColumnName,\n        });\n      }\n      this.resetState();\n    };\n  }\n\n  resetState() {\n    const { onGroupDraftCancel } = this.props;\n    onGroupDraftCancel();\n    this.setState({\n      sourceColumnName: null,\n      targetItemIndex: -1,\n    });\n  }\n\n  render() {\n    const {\n      items,\n      emptyMessageComponent: EmptyMessage,\n      containerComponent: Container,\n      itemComponent: Item,\n      draggingEnabled,\n      isColumnGroupingEnabled,\n    } = this.props;\n\n    this.itemRefs = [];\n\n    const groupPanel = (items.length ? (\n      <Container>\n        {items.map((item) => {\n          const { name: columnName } = item.column;\n          return (\n            <ItemLayout\n              key={columnName}\n              item={item}\n              itemComponent={Item}\n              itemRef={element => element && this.itemRefs.push(element)}\n              draggingEnabled={draggingEnabled && isColumnGroupingEnabled(columnName)}\n              onDragStart={() => this.onDragStart(columnName)}\n              onDragEnd={this.onDragEnd}\n            />\n          );\n        })}\n      </Container>\n    ) : (\n      <EmptyMessage />\n    ));\n\n    return draggingEnabled\n      ? (\n        <DropTarget\n          onEnter={args => this.handleDragEvent(this.onEnter, args)}\n          onOver={args => this.handleDragEvent(this.onOver, args)}\n          onLeave={args => this.handleDragEvent(this.onLeave, args)}\n          onDrop={args => this.handleDragEvent(this.onDrop, args)}\n        >\n          {groupPanel}\n        </DropTarget>\n      )\n      : groupPanel;\n  }\n}\n\n/** @internal */\nexport const GroupPanelLayout: React.ComponentType<GP.LayoutProps> = GroupPanelLayoutBase;\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Template, TemplatePlaceholder, Plugin, TemplateConnector, withComponents,\n  Getters, Actions,\n} from '@devexpress/dx-react-core';\nimport {\n  groupingPanelItems,\n  getColumnSortingDirection,\n  TOP_POSITION,\n  GroupingPanelItem,\n} from '@devexpress/dx-grid-core';\nimport { GroupPanelLayout as Layout } from '../components/group-panel-layout';\nimport { GroupingPanelProps } from '../types';\n\nconst defaultMessages = {\n  groupByColumn: 'Drag a column header here to group by that column',\n};\n\nconst defaultProps = {\n  showSortingControls: false,\n  showGroupingControls: false,\n  messages: {},\n};\n\nclass GroupingPanelRaw extends React.PureComponent<GroupingPanelProps & typeof defaultProps> {\n  static defaultProps = defaultProps;\n  static components = {\n    layoutComponent: 'Layout',\n    containerComponent: 'Container',\n    itemComponent: 'Item',\n    emptyMessageComponent: 'EmptyMessage',\n  };\n\n  render() {\n    const {\n      layoutComponent: LayoutComponent,\n      containerComponent: Container,\n      itemComponent: Item,\n      emptyMessageComponent: EmptyMessage,\n      showSortingControls,\n      showGroupingControls,\n      messages,\n    } = this.props;\n\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    const EmptyMessagePlaceholder = ({ forwardedRef }: { forwardedRef?: React.Ref<Element> }) => (\n      <EmptyMessage\n        getMessage={getMessage}\n        forwardedRef={forwardedRef}\n      />\n    );\n\n    const ItemPlaceholder = ({\n      item, forwardedRef,\n    }: { item: GroupingPanelItem, forwardedRef?: React.Ref<Element> }) => {\n      const { name: columnName } = item.column;\n\n      return (\n        <TemplateConnector>\n          {(\n            { sorting, isColumnSortingEnabled, isColumnGroupingEnabled },\n            { changeColumnGrouping, changeColumnSorting },\n          ) => {\n            const sortingEnabled = isColumnSortingEnabled && isColumnSortingEnabled(columnName);\n            const groupingEnabled = isColumnGroupingEnabled && isColumnGroupingEnabled(columnName);\n\n            return (\n              <Item\n                forwardedRef={forwardedRef}\n                item={item}\n                sortingEnabled={sortingEnabled}\n                groupingEnabled={groupingEnabled}\n                showSortingControls={showSortingControls}\n                sortingDirection={showSortingControls\n                  ? getColumnSortingDirection(sorting, columnName)! : undefined}\n                showGroupingControls={showGroupingControls}\n                onGroup={() => changeColumnGrouping({ columnName })}\n                onSort={(\n                  { direction, keepOther },\n                ) => changeColumnSorting({ columnName, direction, keepOther })}\n              />\n            );\n          }}\n        </TemplateConnector>\n      );\n    };\n\n    return (\n      <Plugin\n        name=\"GroupingPanel\"\n        dependencies={[\n          { name: 'GroupingState' },\n          { name: 'Toolbar' },\n          { name: 'SortingState', optional: !showSortingControls },\n        ]}\n      >\n        <Template name=\"toolbarContent\">\n          <TemplateConnector>\n            {({\n              columns, grouping, draftGrouping,\n              draggingEnabled, isColumnGroupingEnabled, isDataRemote,\n            }: Getters, {\n              changeColumnGrouping, draftColumnGrouping, cancelColumnGroupingDraft, scrollToRow,\n            }: Actions) => {\n              const onGroup = (config) => {\n                if (isDataRemote) {\n                  scrollToRow(TOP_POSITION);\n                }\n                changeColumnGrouping(config);\n              };\n\n              return <LayoutComponent\n                items={groupingPanelItems(columns, grouping, draftGrouping)}\n                isColumnGroupingEnabled={isColumnGroupingEnabled}\n                draggingEnabled={draggingEnabled}\n                onGroup={onGroup}\n                onGroupDraft={draftColumnGrouping}\n                onGroupDraftCancel={cancelColumnGroupingDraft}\n                itemComponent={ItemPlaceholder}\n                emptyMessageComponent={EmptyMessagePlaceholder}\n                containerComponent={Container}\n              />;\n            }}\n          </TemplateConnector>\n          <TemplatePlaceholder />\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that renders the Grouping Panel in the Grid's header. This panel displays grouped\n * columns and allows a user to modify grouping options.Optionally, the plugin allows an end-user\n * to change grouped columns' sorting order and render sorting indicators.\n * */\nexport const GroupingPanel: React.ComponentType<GroupingPanelProps> = withComponents(\n  { Layout },\n)(GroupingPanelRaw);\n","import * as React from 'react';\nimport { Plugin, Template, Getter, Getters } from '@devexpress/dx-react-core';\nimport { getAvailableFilterOperationsGetter } from '@devexpress/dx-grid-core';\nimport {\n  DataTypeProvider as DataTypeProviderNS, DataTypeProviderProps,\n} from '../types';\n\nclass DataTypeProviderBase extends React.PureComponent<DataTypeProviderProps> {\n  render() {\n    const {\n      for: columnNames,\n      formatterComponent: Formatter,\n      editorComponent: Editor,\n      availableFilterOperations,\n    } = this.props;\n\n    const getAvailableFilterOperationsComputed = (\n      { getAvailableFilterOperations }: Getters,\n    ) => getAvailableFilterOperationsGetter(\n      getAvailableFilterOperations,\n      availableFilterOperations!,\n      columnNames,\n    );\n\n    return (\n      <Plugin name=\"DataTypeProvider\" key={columnNames.join('_')}>\n        <Getter\n          name=\"getAvailableFilterOperations\"\n          computed={getAvailableFilterOperationsComputed}\n        />\n        {Formatter\n          ? (\n            <Template\n              name=\"valueFormatter\"\n              predicate={({ column }: any) => columnNames.includes(column.name)}\n            >\n              {(params: DataTypeProviderNS.ValueFormatterProps) => <Formatter {...params} />}\n            </Template>\n          )\n          : null\n        }\n        {Editor\n          ? (\n            <Template\n              name=\"valueEditor\"\n              predicate={({ column }: any) => columnNames.includes(column.name)}\n            >\n              {(params: DataTypeProviderNS.ValueEditorProps) => <Editor {...params} />}\n            </Template>\n          )\n          : null\n        }\n      </Plugin>\n    );\n  }\n}\n\n// tslint:disable-next-line: max-line-length\n/** A plugin that allows you to customize formatting options and editors depending on the data type. */\nexport const DataTypeProvider: React.ComponentType<DataTypeProviderProps> = DataTypeProviderBase;\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Action,\n  Getter,\n  Plugin,\n  Template,\n  TemplateConnector,\n  TemplatePlaceholder,\n  createStateHelper,\n  ActionFn,\n} from '@devexpress/dx-react-core';\nimport {\n  toggleColumn,\n  tableDataColumnsExist,\n  getColumnExtensionValueGetter,\n} from '@devexpress/dx-grid-core';\nimport { VisibleTableColumns } from './internal/visible-table-columns';\nimport { TableColumnVisibilityProps, TableColumnVisibilityState } from '../types';\n\nconst pluginDependencies = [\n  { name: 'Table' },\n];\n\nconst defaultMessages = {\n  noColumns: 'Nothing to show',\n};\n\nconst columnExtensionValueGetter = (\n  columnExtensions, defaultValue,\n) => getColumnExtensionValueGetter(columnExtensions, 'togglingEnabled', defaultValue);\n\n// tslint:disable-next-line: max-line-length\nclass TableColumnVisibilityBase extends React.PureComponent<TableColumnVisibilityProps, TableColumnVisibilityState> {\n  static defaultProps = {\n    defaultHiddenColumnNames: [],\n    messages: {},\n    columnTogglingEnabled: true,\n  };\n  static components = {\n    emptyMessageComponent: 'EmptyMessage',\n  };\n  toggleColumnVisibility: ActionFn<string[]>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hiddenColumnNames: props.hiddenColumnNames || props.defaultHiddenColumnNames,\n    };\n    const stateHelper = createStateHelper(\n      this,\n      {\n        hiddenColumnNames: () => {\n          const { onHiddenColumnNamesChange } = this.props;\n          return onHiddenColumnNamesChange;\n        },\n      },\n    );\n\n    this.toggleColumnVisibility = stateHelper.applyFieldReducer.bind(\n      stateHelper, 'hiddenColumnNames', toggleColumn,\n    );\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      hiddenColumnNames = prevState.hiddenColumnNames,\n    } = nextProps;\n\n    return {\n      hiddenColumnNames,\n    };\n  }\n\n  render() {\n    const {\n      emptyMessageComponent: EmptyMessage,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n    const { hiddenColumnNames } = this.state;\n    const { columnExtensions, columnTogglingEnabled } = this.props;\n\n    return (\n      <Plugin\n        name=\"TableColumnVisibility\"\n        dependencies={pluginDependencies}\n      >\n        <VisibleTableColumns hiddenColumnNames={hiddenColumnNames} />\n\n        <Getter\n          name=\"isColumnTogglingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnTogglingEnabled)}\n        />\n        <Action\n          name=\"toggleColumnVisibility\"\n          action={this.toggleColumnVisibility}\n        />\n\n        <Template name=\"table\">\n          {params => (\n            <TemplateConnector>\n              {({ tableColumns }) => (tableDataColumnsExist(tableColumns)\n                ? <TemplatePlaceholder />\n                : (\n                  <EmptyMessage\n                    getMessage={getMessage}\n                    {...params}\n                  />\n                )\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableColumnVisibilityBase.components = {\n  emptyMessageComponent: 'EmptyMessage',\n};\n\n/* tslint:disable: max-line-length */\n/** A plugin that manages Grid columns' visibility. */\nexport const TableColumnVisibility: React.ComponentType<TableColumnVisibilityProps> = TableColumnVisibilityBase;\n/* tslint:enable: max-line-length */\n","import * as React from 'react';\n\nimport {\n  Template,\n  Plugin,\n  TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\nimport { ToolbarProps, TableKeyboardNavigation } from '../types';\n\nclass ToolbarBase extends React.PureComponent<ToolbarProps> {\n  static components = {\n    rootComponent: 'Root',\n    flexibleSpaceComponent: 'FlexibleSpace',\n  };\n\n  render() {\n    const {\n      rootComponent: Root,\n      flexibleSpaceComponent: FlexibleSpaceComponent,\n    } = this.props;\n    return (\n      <Plugin\n        name=\"Toolbar\"\n      >\n        <Template name=\"header\">\n        {(params: TableKeyboardNavigation.ExtraProps) => (\n          <React.Fragment>\n            <Root {...params}>\n              <TemplatePlaceholder name=\"toolbarContent\" />\n            </Root>\n            <TemplatePlaceholder />\n          </React.Fragment>\n        )}\n        </Template>\n        <Template name=\"toolbarContent\">\n          <FlexibleSpaceComponent />\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders the Grid toolbar. */\nexport const Toolbar: React.ComponentType<ToolbarProps> = ToolbarBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, ActionFn,\n} from '@devexpress/dx-react-core';\nimport { toggleRowExpanded, ToggleRowPayload } from '@devexpress/dx-grid-core';\nimport { TreeDataStateProps, TreeDataStateState } from '../types';\n\nclass TreeDataStateBase extends React.PureComponent<TreeDataStateProps, TreeDataStateState> {\n  static defaultProps = {\n    defaultExpandedRowIds: [],\n  };\n  toggleRowExpanded: ActionFn<ToggleRowPayload>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expandedRowIds: props.expandedRowIds || props.defaultExpandedRowIds,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        expandedRowIds: () => {\n          const { onExpandedRowIdsChange } = this.props;\n          return onExpandedRowIdsChange;\n        },\n      },\n    );\n\n    this.toggleRowExpanded = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'expandedRowIds', toggleRowExpanded);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      expandedRowIds = prevState.expandedRowIds,\n    } = nextProps;\n\n    return {\n      expandedRowIds,\n    };\n  }\n\n  render() {\n    const { expandedRowIds } = this.state;\n\n    return (\n      <Plugin\n        name=\"TreeDataState\"\n      >\n        <Getter name=\"expandedRowIds\" value={expandedRowIds} />\n        {' '}\n        {/* collision =( */}\n        <Action name=\"toggleRowExpanded\" action={this.toggleRowExpanded} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that manages the expanded state for tree rows. */\nexport const TreeDataState: React.ComponentType<TreeDataStateProps> = TreeDataStateBase;\n","import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport {\n  customTreeRowLevelKeyGetter,\n  customTreeRowIdGetter,\n  customTreeRowsWithMeta,\n  expandedTreeRows,\n  collapsedTreeRowsGetter,\n  isTreeRowLeafGetter,\n  getTreeRowLevelGetter,\n  unwrappedCustomTreeRows,\n} from '@devexpress/dx-grid-core';\nimport { CustomTreeDataProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'TreeDataState' },\n];\n\nconst expandedTreeRowsComputed = (\n  { rows, getRowId, expandedRowIds }: Getters,\n) => expandedTreeRows(rows, getRowId, expandedRowIds);\nconst getRowIdComputed = (\n  { getRowId, rows }: Getters,\n) => customTreeRowIdGetter(getRowId, rows);\nconst getRowLevelKeyComputed = (\n  { getRowLevelKey, rows }: Getters,\n) => customTreeRowLevelKeyGetter(getRowLevelKey, rows);\nconst isTreeRowLeafComputed = ({ rows }: Getters) => isTreeRowLeafGetter(rows);\nconst getTreeRowLevelComputed = ({ rows }: Getters) => getTreeRowLevelGetter(rows);\nconst collapsedTreeRowsGetterComputed = (\n  { rows, getCollapsedRows }: Getters,\n) => collapsedTreeRowsGetter(getCollapsedRows, rows);\nconst unwrappedTreeRowsComputed = ({ rows }: Getters) => unwrappedCustomTreeRows(rows);\n\nclass CustomTreeDataBase extends React.PureComponent<CustomTreeDataProps> {\n  render() {\n    const {\n      getChildRows,\n    } = this.props;\n    const treeRowsComputed = ({ rows }: Getters) => customTreeRowsWithMeta(rows, getChildRows);\n\n    return (\n      <Plugin\n        name=\"CustomTreeData\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={treeRowsComputed} />\n        <Getter name=\"getRowId\" computed={getRowIdComputed} />\n        <Getter name=\"getRowLevelKey\" computed={getRowLevelKeyComputed} />\n        <Getter name=\"isTreeRowLeaf\" computed={isTreeRowLeafComputed} />\n        <Getter name=\"getTreeRowLevel\" computed={getTreeRowLevelComputed} />\n        <Getter name=\"rows\" computed={expandedTreeRowsComputed} />\n        <Getter name=\"getCollapsedRows\" computed={collapsedTreeRowsGetterComputed} />\n        <Getter name=\"rows\" computed={unwrappedTreeRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that converts custom formatted tree data to a supported format and performs\n * local row expanding/collapsing.\n * */\nexport const CustomTreeData: React.ComponentType<CustomTreeDataProps> = CustomTreeDataBase;\n","import * as React from 'react';\nimport {\n  Template, Getter, Plugin, TemplateConnector, TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\nimport { isTreeTableCell } from '@devexpress/dx-grid-core';\nimport { TableTreeColumnProps, TableCellProps } from '../types';\n\nclass TableTreeColumnBase extends React.PureComponent<TableTreeColumnProps> {\n  static defaultProps = {\n    showSelectionControls: false,\n    showSelectAll: false,\n  };\n  static components = {\n    cellComponent: 'Cell',\n    contentComponent: 'Content',\n    indentComponent: 'Indent',\n    expandButtonComponent: 'ExpandButton',\n    checkboxComponent: 'Checkbox',\n  };\n\n  render() {\n    const {\n      for: forColumnName,\n      showSelectionControls,\n      showSelectAll,\n      indentComponent: Indent,\n      expandButtonComponent: ExpandButton,\n      checkboxComponent: Checkbox,\n      contentComponent: Content,\n      cellComponent: Cell,\n    } = this.props;\n    return (\n      <Plugin\n        name=\"TableTreeColumn\"\n        dependencies={[\n          { name: 'DataTypeProvider', optional: true },\n          { name: 'TreeDataState' },\n          { name: 'SelectionState', optional: !showSelectionControls },\n          { name: 'IntegratedSelection', optional: !showSelectAll },\n          { name: 'Table' },\n          { name: 'TableHeaderRow', optional: true },\n        ]}\n        key={forColumnName}\n      >\n        <Getter name=\"tableTreeColumnName\" value={forColumnName} />\n        <Template\n          name=\"tableHeaderCellBefore\"\n          predicate={({ column }: any) => column.name === forColumnName}\n        >\n          <ExpandButton\n            visible={false}\n            expanded={false}\n            onToggle={() => {}}\n          />\n          {showSelectionControls && showSelectAll && (\n            <TemplateConnector>\n              {({ selectAllAvailable, allSelected, someSelected }, { toggleSelectAll }) => (\n                <Checkbox\n                  disabled={!selectAllAvailable}\n                  checked={allSelected}\n                  indeterminate={someSelected}\n                  onChange={toggleSelectAll}\n                />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isTreeTableCell(tableRow, tableColumn, forColumnName)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({\n                getCollapsedRows, expandedRowIds, selection, isTreeRowLeaf, getTreeRowLevel,\n                getCellValue,\n              }, {\n                toggleRowExpanded, toggleSelection,\n              }) => {\n                const { row, rowId } = params.tableRow;\n                const columnName = params.tableColumn.column!.name;\n                const value = getCellValue(row, columnName);\n                const collapsedRows = getCollapsedRows(row);\n                return (\n                  <TemplatePlaceholder\n                    name=\"valueFormatter\"\n                    params={{\n                      value,\n                      row,\n                      column: params.tableColumn.column,\n                    }}\n                  >\n                    {content => (\n                      <Cell\n                        {...params}\n                        row={row}\n                        column={params.tableColumn.column!}\n                        value={value}\n                      >\n                        <Indent\n                          level={getTreeRowLevel(row)}\n                        />\n                        <ExpandButton\n                          visible={collapsedRows ? !!collapsedRows.length : !isTreeRowLeaf(row)}\n                          expanded={expandedRowIds.indexOf(rowId) > -1}\n                          onToggle={() => toggleRowExpanded({ rowId })}\n                        />\n                        {showSelectionControls && (\n                          <Checkbox\n                            disabled={false}\n                            checked={selection.indexOf(rowId) > -1}\n                            indeterminate={false}\n                            onChange={() => toggleSelection({ rowIds: [rowId] })}\n                          />\n                        )}\n                        <Content>\n                          {content || value}\n                        </Content>\n                      </Cell>\n                    )}\n                  </TemplatePlaceholder>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders a table column with a toggle button and sorting indicators. */\nexport const TableTreeColumn: React.ComponentType<TableTreeColumnProps> = TableTreeColumnBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, ActionFn, Getters,\n} from '@devexpress/dx-react-core';\nimport { changeSearchValue, searchFilterExpression } from '@devexpress/dx-grid-core';\nimport { SearchStateProps, SearchStateState } from '../types';\n\nclass SearchStateBase extends React.PureComponent<SearchStateProps, SearchStateState> {\n  static defaultProps = {\n    defaultValue: '',\n  };\n  changeValue: ActionFn<string>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: props.value || props.defaultValue,\n    };\n    const stateHelper = createStateHelper(this, {\n      value: () => {\n        const { onValueChange } = this.props;\n        return onValueChange;\n      },\n    });\n\n    this.changeValue = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'value', changeSearchValue);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      value = prevState.value,\n    } = nextProps;\n\n    return {\n      value,\n    };\n  }\n\n  render() {\n    const { value } = this.state;\n    const filterExpressionComputed = (\n      { filterExpression, columns }: Getters,\n    ) => searchFilterExpression(value, columns, filterExpression);\n\n    return (\n      <Plugin\n        name=\"SearchState\"\n      >\n        <Getter name=\"filterExpression\" computed={filterExpressionComputed} />\n        <Getter name=\"searchValue\" value={value} />\n        <Action name=\"changeSearchValue\" action={this.changeValue} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that manages the search state. */\nexport const SearchState: React.ComponentType<SearchStateProps> = SearchStateBase;\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Template,\n  TemplatePlaceholder,\n  Plugin,\n  TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport {\n  TOP_POSITION,\n} from '@devexpress/dx-grid-core';\nimport { SearchPanelProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'Toolbar' },\n  { name: 'SearchState' },\n];\n\nconst defaultMessages = {\n  searchPlaceholder: 'Search...',\n};\n\nclass SearchPanelBase extends React.PureComponent<SearchPanelProps> {\n  static defaultProps = {\n    messages: {},\n  };\n  static components = {\n    inputComponent: 'Input',\n  };\n  ref: React.RefObject<HTMLElement> = React.createRef();\n\n  render() {\n    const { inputComponent: Input, messages } = this.props;\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    return (\n      <Plugin\n        name=\"SearchPanel\"\n        dependencies={pluginDependencies}\n      >\n        <Template name=\"toolbarContent\">\n          <TemplatePlaceholder />\n          <TemplateConnector>\n            {({ searchValue, isDataRemote },\n            { changeSearchValue, scrollToRow, setSearchPanelRef }) => {\n              const onValueChange = (value) => {\n                if (isDataRemote) {\n                  scrollToRow(TOP_POSITION);\n                }\n                changeSearchValue(value);\n              };\n              if (setSearchPanelRef) {\n                setSearchPanelRef(this.ref);\n              }\n\n              return <Input\n                value={searchValue}\n                inputRef={this.ref}\n                onValueChange={onValueChange}\n                getMessage={getMessage}\n              />;\n            }}\n          </TemplateConnector>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders the Search Panel. */\nexport const SearchPanel: React.ComponentType<SearchPanelProps> = SearchPanelBase;\n","import * as React from 'react';\nimport {\n  Getter,\n  Template,\n  Plugin,\n  TemplatePlaceholder,\n  TemplateConnector,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  isFixedTableRow,\n  tableColumnsWithFixed,\n  tableHeaderRowsWithFixed,\n  tableHeaderColumnChainsWithFixed,\n  calculateFixedColumnProps,\n  isRowHighlighted,\n} from '@devexpress/dx-grid-core';\nimport {\n  TableCellProps, TableRowProps, TableFixedColumnsProps, TableFixedColumnsState,\n} from '../types';\n\nconst tableHeaderRowsComputed = (\n  { tableHeaderRows }: Getters,\n) => tableHeaderRowsWithFixed(tableHeaderRows);\nconst tableHeaderColumnChainsComputed = (\n  { tableColumns, tableHeaderRows, tableHeaderColumnChains }: Getters,\n) => tableHeaderColumnChainsWithFixed(tableHeaderColumnChains, tableHeaderRows, tableColumns);\n\nconst CellPlaceholder = props => <TemplatePlaceholder params={props} />;\n\nconst pluginDependencies = [\n  { name: 'Table' },\n  { name: 'TableBandHeader', optional: true },\n  { name: 'TableColumnReordering', optional: true },\n  { name: 'TableEditColumn', optional: true },\n  { name: 'TableEditRow', optional: true },\n  { name: 'TableFilterRow', optional: true },\n  { name: 'TableGroupRow', optional: true },\n  { name: 'TableHeaderRow', optional: true },\n  { name: 'TableRowDetail', optional: true },\n  { name: 'TableSelection', optional: true },\n  { name: 'TableSummaryRow', optional: true },\n  { name: 'TableTreeColumn', optional: true },\n];\n\n// tslint:disable-next-line: max-line-length\nclass TableFixedColumnsBase extends React.PureComponent<TableFixedColumnsProps, TableFixedColumnsState> {\n  static components = {\n    cellComponent: 'Cell',\n    listenerRowComponent: 'ListenerRow',\n    listenerCellComponent: 'ListenerCell',\n  };\n  static defaultProps = {\n    leftColumns: [],\n    rightColumns: [],\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tableColumnDimensions: {},\n    };\n  }\n\n  handleListenerSizeChange(key, width) {\n    const { tableColumnDimensions } = this.state;\n    if (tableColumnDimensions[key] !== width) {\n      this.setState(state => ({\n        tableColumnDimensions: {\n          ...state.tableColumnDimensions,\n          [key]: width,\n        },\n      }));\n    }\n  }\n\n  render() {\n    const {\n      cellComponent: Cell,\n      listenerRowComponent: ListenerRow,\n      listenerCellComponent: ListenerCell,\n    } = this.props;\n    const leftColumns = this.props.leftColumns!;\n    const rightColumns = this.props.rightColumns!;\n\n    const tableColumnsComputed = ({ tableColumns }: Getters) => tableColumnsWithFixed(\n      tableColumns,\n      leftColumns,\n      rightColumns,\n    );\n\n    return (\n      <Plugin\n        name=\"TableFixedColumns\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        <Getter name=\"tableHeaderColumnChains\" computed={tableHeaderColumnChainsComputed} />\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableColumn }: any) => !!tableColumn.fixed}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({\n                tableColumns, tableHeaderColumnChains, selection, focused, highlightSelectedRow,\n              }) => {\n                const selected = isRowHighlighted(highlightSelectedRow, selection,\n                  params.tableRow, focused);\n                const { tableColumnDimensions } = this.state;\n                const fixedColumnProps = calculateFixedColumnProps(\n                  params,\n                  { leftColumns, rightColumns },\n                  tableColumns,\n                  tableColumnDimensions,\n                  tableHeaderColumnChains,\n                );\n\n                return (\n                  <Cell\n                    {...params}\n                    {...fixedColumnProps}\n                    component={CellPlaceholder}\n                    selected={selected}\n                  />\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isFixedTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <ListenerRow {...params} />\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: any) => !!isFixedTableRow(tableRow)}\n        >\n          {(params: TableCellProps) => (\n            <ListenerCell\n              {...params}\n              listen={!!params.tableColumn.fixed}\n              onSizeChange={({\n                width,\n              }) => this.handleListenerSizeChange(params.tableColumn.key, width)}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that enables you to fix columns to the left and right sides of the grid. */\nexport const TableFixedColumns: React.ComponentType<TableFixedColumnsProps> = TableFixedColumnsBase;\n","import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport { prepareGroupSummaryItems } from '@devexpress/dx-grid-core';\nimport { SummaryStateProps } from '../types';\n\nconst groupSummaryItemsComputed = (\n  { groupSummaryItems }: Getters,\n) => prepareGroupSummaryItems(groupSummaryItems);\n\nclass SummaryStateBase extends React.PureComponent<SummaryStateProps> {\n  static defaultProps = {\n    totalItems: [],\n    groupItems: [],\n    treeItems: [],\n  };\n\n  render() {\n    const { totalItems, groupItems, treeItems } = this.props;\n\n    return (\n      <Plugin\n        name=\"SummaryState\"\n      >\n        <Getter name=\"totalSummaryItems\" value={totalItems} />\n        <Getter name=\"groupSummaryItems\" value={groupItems} />\n        <Getter name=\"groupSummaryItems\" computed={groupSummaryItemsComputed} />\n        <Getter name=\"treeSummaryItems\" value={treeItems} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that provides items for total, group, and tree summaries. */\nexport const SummaryState: React.ComponentType<SummaryStateProps> = SummaryStateBase;\n","import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport {\n  defaultSummaryCalculator,\n  totalSummaryValues,\n  groupSummaryValues,\n  treeSummaryValues,\n  SummaryCalculator,\n} from '@devexpress/dx-grid-core';\nimport { IntegratedSummaryProps, SummaryType } from '../types';\n\nconst pluginDependencies = [\n  { name: 'SummaryState' },\n  { name: 'IntegratedGrouping', optional: true },\n];\n\nclass IntegratedSummaryBase extends React.PureComponent<IntegratedSummaryProps> {\n  static defaultCalculator: SummaryCalculator = defaultSummaryCalculator;\n\n  render() {\n    const { calculator } = this.props;\n\n    const totalSummaryValuesComputed = ({\n      rows,\n      totalSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getCollapsedRows,\n    }: Getters) => totalSummaryValues(\n      rows,\n      totalSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getCollapsedRows,\n      calculator,\n    );\n\n    const groupSummaryValuesComputed = ({\n      rows,\n      groupSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getCollapsedRows,\n    }: Getters) => groupSummaryValues(\n      rows,\n      groupSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getCollapsedRows,\n      calculator,\n    );\n\n    const treeSummaryValuesComputed = ({\n      rows,\n      treeSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getRowId,\n    }: Getters) => treeSummaryValues(\n      rows,\n      treeSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getRowId,\n      calculator,\n    );\n\n    return (\n      <Plugin\n        name=\"IntegratedSummary\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"totalSummaryValues\" computed={totalSummaryValuesComputed} />\n        <Getter name=\"groupSummaryValues\" computed={groupSummaryValuesComputed} />\n        <Getter name=\"treeSummaryValues\" computed={treeSummaryValuesComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that performs a built-in data summary calculation. */\nexport const IntegratedSummary: React.ComponentType<IntegratedSummaryProps> & {\n  /** The built-in summary calculator. */\n  defaultCalculator: (type: SummaryType, rows: Array<any>, getValue: (row: any) => any) => any;\n} = IntegratedSummaryBase;\n","import * as React from 'react';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\nimport { CustomSummaryProps } from '../types/summary/custom-summary.types';\n\nconst pluginDependencies = [\n  { name: 'SummaryState' },\n];\n\nclass CustomSummaryBase extends React.PureComponent<CustomSummaryProps> {\n  render() {\n    const { totalValues, groupValues, treeValues } = this.props;\n\n    return (\n      <Plugin\n        name=\"CustomSummary\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"totalSummaryValues\" value={totalValues} />\n        <Getter name=\"groupSummaryValues\" value={groupValues} />\n        <Getter name=\"treeSummaryValues\" value={treeValues} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that allows you to calculate a custom summary. */\nexport const CustomSummary: React.ComponentType<CustomSummaryProps> = CustomSummaryBase;\n","import * as React from 'react';\nimport {\n  Getter,\n  Template,\n  Plugin,\n  TemplateConnector,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  tableRowsWithSummaries,\n  tableRowsWithTotalSummaries,\n  isTotalSummaryTableCell,\n  isGroupSummaryTableCell,\n  isTreeSummaryTableCell,\n  isTotalSummaryTableRow,\n  isGroupSummaryTableRow,\n  isTreeSummaryTableRow,\n  getColumnSummaries,\n  TABLE_TREE_SUMMARY_TYPE,\n  TABLE_GROUP_SUMMARY_TYPE,\n  TABLE_TOTAL_SUMMARY_TYPE,\n  isFooterSummary,\n} from '@devexpress/dx-grid-core';\nimport { TableCellProps, TableRowProps, TableSummaryRowProps } from '../types';\nimport { TableSummaryContent } from '../components/summary/table-summary-content';\n\nconst dependencies = [\n  { name: 'DataTypeProvider', optional: true },\n  { name: 'SummaryState' },\n  { name: 'CustomSummary', optional: true },\n  { name: 'IntegratedSummary', optional: true },\n  { name: 'Table' },\n  { name: 'TableTreeColumn', optional: true },\n];\n\nconst tableBodyRowsComputed = ({\n  tableBodyRows,\n  getRowLevelKey,\n  isGroupRow,\n  getRowId,\n  groupSummaryItems,\n  treeSummaryItems,\n}: Getters) => tableRowsWithSummaries(\n  tableBodyRows, groupSummaryItems, treeSummaryItems, getRowLevelKey, isGroupRow, getRowId,\n);\nconst tableFooterRowsComputed = ({\n  tableFooterRows, totalSummaryItems,\n}: Getters) => totalSummaryItems.length\n  ? tableRowsWithTotalSummaries(tableFooterRows)\n  : tableFooterRows;\n\nexport class TableSummaryRowBase extends React.PureComponent<TableSummaryRowProps> {\n  static TREE_ROW_TYPE = TABLE_TREE_SUMMARY_TYPE;\n  static GROUP_ROW_TYPE = TABLE_GROUP_SUMMARY_TYPE;\n  static TOTAL_ROW_TYPE = TABLE_TOTAL_SUMMARY_TYPE;\n  static defaultProps = {\n    formatlessSummaryTypes: [],\n    messages: {},\n  };\n  static components = {\n    totalRowComponent: 'TotalRow',\n    groupRowComponent: 'GroupRow',\n    treeRowComponent: 'TreeRow',\n    totalCellComponent: 'TotalCell',\n    groupCellComponent: 'GroupCell',\n    treeCellComponent: 'TreeCell',\n    treeColumnCellComponent: 'TableTreeCell',\n    treeColumnContentComponent: 'TableTreeContent',\n    treeColumnIndentComponent: 'TableTreeIndent',\n    itemComponent: 'Item',\n  };\n\n  renderContent(column, columnSummaries) {\n    const {\n      formatlessSummaryTypes,\n      itemComponent: Item,\n      messages,\n    } = this.props;\n\n    return (\n      <TableSummaryContent\n        column={column}\n        columnSummaries={columnSummaries}\n        formatlessSummaryTypes={formatlessSummaryTypes}\n        itemComponent={Item}\n        messages={messages!}\n      />\n    );\n  }\n\n  render() {\n    const {\n      totalRowComponent: TotalRow,\n      groupRowComponent: GroupRow,\n      treeRowComponent: TreeRow,\n      totalCellComponent: TotalCell,\n      groupCellComponent: GroupCell,\n      treeCellComponent: TreeCell,\n      treeColumnCellComponent: TreeColumnCell,\n      treeColumnContentComponent: TreeColumnContent,\n      treeColumnIndentComponent: TreeColumnIndent,\n    } = this.props;\n\n    return (\n      <Plugin\n        name=\"TableSummaryRow\"\n        dependencies={dependencies}\n      >\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Getter name=\"tableFooterRows\" computed={tableFooterRowsComputed} />\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isTotalSummaryTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({ totalSummaryItems, totalSummaryValues }) => {\n                const columnSummaries = getColumnSummaries(\n                  totalSummaryItems,\n                  params.tableColumn.column!.name,\n                  totalSummaryValues,\n                );\n                return (\n                  <TotalCell\n                    {...params}\n                    column={params.tableColumn.column!}\n                  >\n                    {this.renderContent(params.tableColumn.column, columnSummaries)}\n                  </TotalCell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isGroupSummaryTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({ groupSummaryItems, groupSummaryValues }) => {\n                const columnSummaries = getColumnSummaries(\n                  groupSummaryItems,\n                  params.tableColumn.column!.name,\n                  groupSummaryValues[params.tableRow.row.compoundKey],\n                  summaryItem => isFooterSummary(summaryItem),\n                );\n                return (\n                  <GroupCell\n                    {...params}\n                    column={params.tableColumn.column!}\n                  >\n                    {this.renderContent(params.tableColumn.column, columnSummaries)}\n                  </GroupCell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isTreeSummaryTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({\n                treeSummaryItems,\n                treeSummaryValues,\n                tableTreeColumnName,\n                getRowId,\n                getTreeRowLevel,\n              }) => {\n                const columnSummaries = getColumnSummaries(\n                  treeSummaryItems,\n                  params.tableColumn.column!.name,\n                  treeSummaryValues[getRowId(params.tableRow.row)],\n                );\n                if (tableTreeColumnName === params.tableColumn.column!.name) {\n                  return (\n                    <TreeColumnCell\n                      {...params}\n                      column={params.tableColumn.column!}\n                    >\n                      <TreeColumnIndent\n                        level={getTreeRowLevel(params.tableRow.row)}\n                      />\n                      <TreeColumnContent>\n                        {this.renderContent(params.tableColumn.column, columnSummaries)}\n                      </TreeColumnContent>\n                    </TreeColumnCell>\n                  );\n                }\n                return (\n                  <TreeCell\n                    {...params}\n                    column={params.tableColumn.column!}\n                  >\n                    {this.renderContent(params.tableColumn.column, columnSummaries)}\n                  </TreeCell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isTotalSummaryTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <TotalRow\n              {...params}\n            />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isGroupSummaryTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <GroupRow\n              {...params}\n            />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isTreeSummaryTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <TreeRow\n              {...params}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders table rows that display a total, group, and tree summary. */\nexport const TableSummaryRow: React.ComponentType<TableSummaryRowProps> & {\n  /** The tree summary row type's indentifier. */\n  TREE_ROW_TYPE: symbol;\n  /** The group summary row type's indentifier. */\n  GROUP_ROW_TYPE: symbol;\n  /** The total row type's indentifier. */\n  TOTAL_ROW_TYPE: symbol;\n} = TableSummaryRowBase;\n","import * as React from 'react';\nimport { Getter, Action, Plugin, Getters, Actions } from '@devexpress/dx-react-core';\nimport {\n  virtualRowsWithCache, trimRowsToInterval, emptyVirtualRows, plainRows, loadedRowsStart,\n  VirtualRows, Interval, getAvailableRowCount, needFetchMorePages, getReferenceIndex,\n  shouldSendRequest, getRequestMeta,\n} from '@devexpress/dx-grid-core';\nimport { VirtualTableStateProps, VirtualTableStateState } from '../../types';\n\nconst virtualRowsComputed = (\n  { skip, rows, virtualRowsCache }: Getters,\n) => virtualRowsWithCache(skip, rows, virtualRowsCache);\n\nconst rowsComputed = (\n  { virtualRows, availableRowCount }: Getters,\n) => plainRows(virtualRows, availableRowCount);\n\nconst loadedRowsStartComputed = ({ virtualRows }: Getters) => loadedRowsStart(virtualRows);\n\n// tslint:disable-next-line: max-line-length\nclass VirtualTableStateBase extends React.PureComponent<VirtualTableStateProps, VirtualTableStateState> {\n  static defaultProps = {\n    pageSize: 100,\n  };\n  requestTimer: number = 0;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      virtualRowsCache: emptyVirtualRows,\n      requestedStartIndex: 0,\n      availableRowCount: props.totalRowCount || 0,\n      requestedEndIndex: 2 * props.pageSize,\n    };\n  }\n\n  setViewport = (\n    viewport,\n    { virtualRows }: Getters,\n    { requestNextPage }: Actions,\n  ) => {\n    const { pageSize } = this.props;\n    const referenceIndex = getReferenceIndex(viewport);\n\n    if (needFetchMorePages(virtualRows, referenceIndex, pageSize!)) {\n      requestNextPage({ referenceIndex });\n    }\n  }\n\n  requestNextPageAction = (\n    { referenceIndex, forceReload },\n    { virtualRows }: Getters,\n  ) => {\n    const { pageSize, totalRowCount, infiniteScrolling } = this.props;\n    const { requestedStartIndex, requestedEndIndex } = this.state;\n    const actualVirtualRows = forceReload ? emptyVirtualRows : virtualRows;\n    const { requestedRange, actualBounds } = getRequestMeta(\n      referenceIndex, virtualRows, pageSize!, totalRowCount, forceReload, infiniteScrolling,\n    );\n\n    if (forceReload || shouldSendRequest(requestedRange, requestedStartIndex, requestedEndIndex)) {\n      this.requestNextPage(requestedRange, actualVirtualRows, actualBounds);\n    }\n  }\n\n  requestNextPage(\n    requestedRange: Interval, virtualRows: VirtualRows, actualBounds: Interval,\n  ) {\n    const { getRows, infiniteScrolling, totalRowCount } = this.props;\n    const { availableRowCount: stateAvailableCount } = this.state;\n\n    if (this.requestTimer !== 0) {\n      clearTimeout(this.requestTimer);\n    }\n    this.requestTimer = window.setTimeout(() => {\n      const { start: requestedStartIndex, end } = requestedRange;\n      const loadCount = end - requestedStartIndex;\n      const virtualRowsCache = trimRowsToInterval(virtualRows, actualBounds);\n      const availableRowCount = getAvailableRowCount(\n        infiniteScrolling,\n        actualBounds.end,\n        stateAvailableCount,\n        totalRowCount,\n      );\n\n      getRows(requestedStartIndex, loadCount);\n\n      this.setState({\n        virtualRowsCache,\n        availableRowCount,\n        requestedStartIndex,\n        requestedEndIndex: end,\n      });\n    }, 50);\n  }\n\n  requestFirstPage() {\n    const { getRows, pageSize } = this.props;\n    const startIndex = 0;\n    const endIndex = 2 * pageSize!;\n\n    if (this.requestTimer !== 0) {\n      clearTimeout(this.requestTimer);\n    }\n    this.requestTimer = window.setTimeout(() => {\n      getRows(startIndex, endIndex);\n\n      this.setState({\n        virtualRowsCache: emptyVirtualRows,\n        requestedStartIndex: startIndex,\n        requestedEndIndex: endIndex,\n      });\n    }, 50);\n  }\n\n  clearRowsCacheAction = (\n    _: any,\n    __: Getters,\n    { requestNextPage }: Actions,\n  ) => {\n    this.setState({\n      virtualRowsCache: emptyVirtualRows,\n    });\n    requestNextPage({ forceReload: true });\n  }\n\n  resetVirtualTablePosition = () => this.requestFirstPage();\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      availableRowCount: prevAvailableRowCount = prevState.availableRowCount,\n      totalRowCount,\n      pageSize,\n      infiniteScrolling,\n    } = nextProps;\n    const {\n      requestedStartIndex: prevRequestedStartIndex,\n      virtualRowsCache: prevVirtualRowCache,\n    } = prevState;\n\n    const availableRowCount = getAvailableRowCount(\n      infiniteScrolling,\n      pageSize * 2,\n      prevAvailableRowCount,\n      totalRowCount,\n    );\n    const requestedStartIndex = Math.max(\n      Math.min(prevRequestedStartIndex, availableRowCount - pageSize),\n      0,\n    );\n    const virtualRowsCache =\n      prevRequestedStartIndex === requestedStartIndex\n        ? prevVirtualRowCache\n        : emptyVirtualRows;\n\n    return {\n      availableRowCount,\n      requestedStartIndex,\n      virtualRowsCache,\n    };\n  }\n\n  componentDidMount() {\n    const { getRows, pageSize, infiniteScrolling, totalRowCount } = this.props;\n    getRows(0, 2 * pageSize!);\n\n    const newRowCount = infiniteScrolling ? 2 * pageSize! : totalRowCount;\n    this.setState({\n      availableRowCount: newRowCount,\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.requestTimer !== 0) {\n      window.clearTimeout(this.requestTimer);\n    }\n  }\n\n  render() {\n    const { virtualRowsCache, availableRowCount } = this.state;\n    const { skip, pageSize, loading, infiniteScrolling } = this.props;\n\n    return (\n      <Plugin\n        name=\"VirtualTableState\"\n      >\n        <Getter name=\"isDataRemote\" value />\n        <Getter name=\"isDataLoading\" value={loading} />\n        <Getter name=\"isScrollingInfinite\" value={infiniteScrolling} />\n        <Getter name=\"skip\" value={skip} />\n        <Getter name=\"virtualRowsCache\" value={virtualRowsCache} />\n        <Getter name=\"pageSize\" value={pageSize} />\n        <Getter name=\"availableRowCount\" value={availableRowCount} />\n\n        <Getter name=\"virtualRows\" computed={virtualRowsComputed} />\n        <Getter name=\"rows\" computed={rowsComputed} />\n        <Getter name=\"loadedRowsStart\" computed={loadedRowsStartComputed} />\n\n        <Action name=\"requestNextPage\" action={this.requestNextPageAction} />\n        <Action name=\"setViewport\" action={this.setViewport} />\n        <Action name=\"clearRowCache\" action={this.clearRowsCacheAction} />\n        <Action name=\"changeColumnSorting\" action={this.clearRowsCacheAction} />\n        <Action name=\"changeColumnFilter\" action={this.resetVirtualTablePosition} />\n        <Action name=\"changeSearchValue\" action={this.resetVirtualTablePosition} />\n        <Action name=\"changeColumnGrouping\" action={this.resetVirtualTablePosition} />\n      </Plugin>\n    );\n  }\n}\n\nexport const VirtualTableState: React.ComponentType<VirtualTableStateProps> = VirtualTableStateBase;\n","import * as React from 'react';\nimport {\n  Template,\n  TemplatePlaceholder,\n  TemplateConnector,\n  Plugin,\n  Getter,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  getRowChange,\n  TABLE_DATA_TYPE,\n  rowsWithEditingCells,\n  columnsWithEditingCells,\n} from '@devexpress/dx-grid-core';\nimport { TableInlineCellEditingProps, TableCellProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'EditingState' },\n  { name: 'Table' },\n  { name: 'DataTypeProvider', optional: true },\n];\n\nconst rowsWithEditingCellsComputed = (\n  { tableBodyRows, editingCells }: Getters,\n) => rowsWithEditingCells(tableBodyRows, editingCells);\nconst columnsWithEditingCellsComputed = (\n  { tableColumns, editingCells }: Getters,\n) => columnsWithEditingCells(tableColumns, editingCells);\n\n/* tslint:disable-next-line max-line-length*/\nconst INLINE_CELL_EDITING_ERROR = 'The startEditAction property of the InlineCellEditing plugin is given an invalid value.';\n\n// tslint:disable-next-line: max-line-length\nconst TableInlineCellEditingBase: React.SFC<TableInlineCellEditingProps> & {components: {cellComponent: string}} = (props) => {\n  const { cellComponent: EditCell, startEditAction, selectTextOnEditStart } = props;\n\n  return (\n    <Plugin name=\"TableInlineCellEditing\" dependencies={pluginDependencies}>\n      <Getter name=\"tableBodyRows\" computed={rowsWithEditingCellsComputed} />\n      <Getter name=\"tableColumns\" computed={columnsWithEditingCellsComputed} />\n      <Template\n        name=\"tableCell\"\n        predicate={({ tableRow, tableColumn }: any) =>\n          tableRow.type === TABLE_DATA_TYPE &&\n          tableColumn.type === TABLE_DATA_TYPE\n        }\n      >\n        {(params: TableCellProps) => (\n          <TemplateConnector>\n            {({}, { startEditCells }) => {\n              const { tableRow : { rowId }, tableColumn: { column } } = params;\n              const { name: columnName } = column!;\n\n              if (startEditAction !== 'click' && startEditAction !== 'doubleClick') {\n                throw new Error(INLINE_CELL_EDITING_ERROR);\n              }\n\n              const startEditCellCallback = () =>\n                startEditCells({\n                  editingCells: [{ rowId, columnName }],\n                });\n              const eventName = startEditAction === 'click' ? 'onClick' : 'onDoubleClick';\n              const newParams = { ...params, [eventName]: startEditCellCallback };\n\n              return <TemplatePlaceholder params={newParams} />;\n            }}\n          </TemplateConnector>\n        )}\n      </Template>\n      <Template\n        name=\"tableCell\"\n        predicate={({ tableRow, tableColumn }: any) =>\n          tableRow.hasEditCell && tableColumn.hasEditCell\n        }\n      >\n        {(params: TableCellProps) => (\n          <TemplateConnector>\n            {(\n              { getCellValue, createRowChange, rowChanges, isColumnEditingEnabled },\n              { changeRow, stopEditCells, commitChangedRows, cancelChangedRows },\n            ) => {\n              const { tableRow : { rowId, row }, tableColumn: { column } } = params;\n              const { name: columnName } = column!;\n\n              const changedRow = {\n                ...row,\n                ...getRowChange(rowChanges, rowId!),\n              };\n\n              const value = getCellValue(changedRow, columnName);\n              const onValueChange = (newValue: any) => {\n                const changeArgs = {\n                  rowId,\n                  change: createRowChange(changedRow, newValue, columnName),\n                };\n                changeRow(changeArgs);\n              };\n              const onKeyDown = ({ key }) => {\n                if (key === 'Enter') {\n                  commitChangedRows({ rowIds: [rowId] });\n                  stopEditCells({ editingCells: [{ rowId, columnName }] });\n                } else if (key === 'Escape') {\n                  cancelChangedRows({ rowIds: [rowId] });\n                  stopEditCells({ editingCells: [{ rowId, columnName }] });\n                }\n              };\n              const onBlur = () => {\n                commitChangedRows({ rowIds: [rowId] });\n                stopEditCells({ editingCells: [{ rowId, columnName }] });\n              };\n              const onFocus = selectTextOnEditStart ? e => e.target.select() : () => {};\n              const editingEnabled = isColumnEditingEnabled(columnName);\n\n              return (\n                <TemplatePlaceholder\n                  name=\"valueEditor\"\n                  params={{\n                    column,\n                    row,\n                    value,\n                    onValueChange,\n                    disabled: !editingEnabled,\n                  }}\n                >\n                  {content => (\n                    <EditCell\n                      {...params}\n                      row={row}\n                      column={column!}\n                      value={value}\n                      editingEnabled={editingEnabled}\n                      onValueChange={onValueChange}\n                      autoFocus\n                      onKeyDown={onKeyDown}\n                      onBlur={onBlur}\n                      onFocus={onFocus}\n                    >\n                      {content}\n                    </EditCell>\n                  )}\n                </TemplatePlaceholder>\n              );\n            }}\n          </TemplateConnector>\n        )}\n      </Template>\n    </Plugin>\n  );\n};\n\nTableInlineCellEditingBase.components = {\n  cellComponent: 'Cell',\n};\n\nTableInlineCellEditingBase.defaultProps = {\n  startEditAction: 'click',\n  selectTextOnEditStart: false,\n};\n\n// tslint:disable-next-line: max-line-length\nexport const TableInlineCellEditing: React.ComponentType<TableInlineCellEditingProps> = TableInlineCellEditingBase;\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Template, TemplatePlaceholder, Plugin, TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport { ExportPanelProps, ExportPanelState } from '../types';\n\nconst defaultMessages = {\n  showExportMenu: 'Export',\n  exportAll: 'Export all data',\n  exportSelected: 'Export selected rows',\n};\n\nclass ExportPanelBase extends React.PureComponent<ExportPanelProps, ExportPanelState> {\n  static components = {\n    toggleButtonComponent: 'ToggleButton',\n    menuComponent: 'Menu',\n    menuItemComponent: 'MenuItem',\n  };\n  button!: React.ReactInstance;\n  state = { visible: false };\n\n  setButtonRef = button => this.button = button;\n\n  handleToggle = () => {\n    const { visible } = this.state;\n    this.setState({ visible: !visible });\n  }\n\n  handleHide = () => this.setState({ visible: false });\n\n  render() {\n    const {\n      toggleButtonComponent: ToggleButton,\n      menuComponent: Menu,\n      menuItemComponent: MenuItem,\n      messages,\n      startExport,\n    } = this.props;\n    const {\n      visible,\n    } = this.state;\n\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    return (\n      <Plugin\n        name=\"ExportPanel\"\n        dependencies={[\n          { name: 'SelectionState', optional: true },\n          { name: 'Toolbar' },\n        ]}\n      >\n        <Template name=\"toolbarContent\">\n          <TemplatePlaceholder />\n          <TemplateConnector>\n            {({ selection }) => (\n              <>\n                <ToggleButton\n                  buttonRef={this.setButtonRef}\n                  onToggle={this.handleToggle}\n                  getMessage={getMessage}\n                />\n                <Menu\n                  visible={visible}\n                  onHide={this.handleHide}\n                  target={this.button}\n                >\n                  <MenuItem\n                    key=\"exportAll\"\n                    text={getMessage('exportAll')}\n                    onClick={() => {\n                      this.handleHide();\n                      startExport();\n                    }}\n                  />\n                  {selection?.length ? (\n                    <MenuItem\n                      key=\"exportSelected\"\n                      text={getMessage('exportSelected')}\n                      onClick={() => {\n                        this.handleHide();\n                        startExport({ selectedOnly: true });\n                      }}\n                    />\n                  ) : null}\n                </Menu>\n              </>\n            )}\n          </TemplateConnector>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nexport const ExportPanel: React.ComponentType<any> = ExportPanelBase;\n","import * as React from 'react';\nimport {\n Plugin, TemplateConnector, Action, Template, TemplatePlaceholder, Getter,\n} from '@devexpress/dx-react-core';\nimport {\n  TABLE_ADDED_TYPE, TABLE_DATA_TYPE, TABLE_FLEX_TYPE,\n  getNextFocusedCell,  getPart, getIndexToFocus,\n  isCellExist, focus, isTabArrowUpDown,\n  filterHeaderRows, Elements, isDataTableRow, isRowFocused, getClosestCellByRow,\n  isCellFocused, getFocusing, RIGHT_POSITION, LEFT_POSITION,\n} from '@devexpress/dx-grid-core';\nimport {\n  TableKeyboardNavigationProps, TableKeyboardNavigationCoreProps, TableKeyboardNavigationCoreState,\n  TableCellProps, TableRowProps,\n} from '../types';\n\nconst CellPlaceholder = (props: TableCellProps) => <TemplatePlaceholder params={props} />;\nconst RowPlaceholder = (props: TableRowProps) => <TemplatePlaceholder params={props} />;\n\nclass TableKeyboardNavigationCore extends React.PureComponent<TableKeyboardNavigationCoreProps,\nTableKeyboardNavigationCoreState> {\n  elements: Elements = {};\n  searchPanelRef: React.RefObject<HTMLElement> | undefined;\n\n  constructor(props) {\n    super(props);\n\n    const focusedCell = props.focusedCell || props.defaultFocusedCell;\n\n    this.state = {\n      focusedElement: focusedCell ?\n      { part: TABLE_DATA_TYPE.toString(), ...focusedCell } : focusedCell,\n    };\n    this.handleKeyDownOnWidget = this.handleKeyDownOnWidget.bind(this);\n    this.updateRef = this.updateRef.bind(this);\n    this.setFocusedElement = this.setFocusedElement.bind(this);\n    this.setSearchPanelRef = this.setSearchPanelRef.bind(this);\n  }\n\n  static getDerivedStateFromProps(\n    props: TableKeyboardNavigationCoreProps, state: TableKeyboardNavigationCoreState,\n  ): TableKeyboardNavigationCoreState {\n    const focusedCell = props.focusedCell !== undefined ? props.focusedCell : state.focusedElement;\n    return {\n      focusedElement: focusedCell ? {\n        part: TABLE_DATA_TYPE.toString(),\n        ...focusedCell,\n      } : undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.props.rootRef.current!.addEventListener('keydown', this.handleKeyDownOnWidget);\n  }\n\n  componentWillUnmount() {\n    this.props.rootRef.current!.removeEventListener('keydown', this.handleKeyDownOnWidget);\n  }\n\n  pushRef(ref, key1, key2) {\n    const { focusedElement } = this.state;\n    const { tableColumns } = this.props;\n    if (!this.elements[key1]) {\n      this.elements[key1] = [];\n    }\n    if (!this.elements[key1][key2]) {\n      this.elements[key1][key2] = [];\n    }\n\n    this.elements[key1][key2].push(ref);\n\n    if (focusedElement?.rowKey === key1 && focusedElement?.columnKey === key2) {\n      focus(this.elements, focusedElement, undefined, this.props.onFocusedCellChange);\n    }\n\n    if (key1.toString().includes(TABLE_ADDED_TYPE.toString()) &&\n    key2 === tableColumns[0].key) {\n      this.changeFocusedElement({\n        part: TABLE_DATA_TYPE.toString(),\n        columnKey: key2,\n        rowKey: key1,\n      }, focusedElement);\n    }\n  }\n\n  setSearchPanelRef(ref) {\n    this.searchPanelRef = ref;\n  }\n\n  removeRef(key1, key2) {\n    delete this.elements[key1][key2];\n    if (Object.keys(this.elements[key1]).length === 0) {\n      delete this.elements[key1];\n    }\n  }\n\n  updateRef({ ref, key1, key2, action }) {\n    if (action === 'add') {\n      this.pushRef(ref, key1, key2);\n    } else {\n      this.removeRef(key1, key2);\n    }\n  }\n\n  changeFocusedElement(focusedCell, prevFocusedCell) {\n    const { onFocusedCellChange } = this.props;\n    this.setState({\n      focusedElement: focusedCell,\n    });\n    focus(this.elements, focusedCell, prevFocusedCell, onFocusedCellChange);\n  }\n\n  handleKeyDownOnWidget(event) {\n    const { focusedElement } = this.state;\n    const {\n      tableColumns, tableBodyRows, tableHeaderRows, expandedRowIds, scrollToColumn, inlineEditing,\n    } = this.props;\n\n    if (event.key === 'f' && (event.ctrlKey || event.metaKey)) {\n      if (this.searchPanelRef) {\n        event.preventDefault();\n        this.searchPanelRef.current?.click();\n      }\n      if (focusedElement) {\n        this.changeFocusedElement(undefined, focusedElement);\n      }\n      return;\n    }\n\n    if (focusedElement && !isCellExist(this.elements, focusedElement) && event.key === 'Tab') {\n      const focusedCell = getClosestCellByRow(tableBodyRows, focusedElement, this.elements);\n      event.preventDefault();\n      this.changeFocusedElement(focusedCell, focusedElement);\n      return;\n    }\n\n    if (focusedElement || isTabArrowUpDown(event)) {\n      const { element, scrolling } = getNextFocusedCell(tableColumns, tableBodyRows,\n        tableHeaderRows, expandedRowIds, this.elements, event, inlineEditing,\n        focusedElement, scrollToColumn);\n\n      if (element) {\n        if (scrolling) {\n          scrollToColumn(scrolling === 'left' ? LEFT_POSITION : RIGHT_POSITION);\n        }\n        event.preventDefault();\n        this.changeFocusedElement(element, focusedElement);\n      } else if (isTabArrowUpDown(event) && focusedElement) {\n        this.changeFocusedElement(undefined, focusedElement);\n      }\n    }\n  }\n\n  setFocusedElement({ key1, key2, event }) {\n    const { focusedElement } = this.state;\n    const { inlineEditing } = this.props;\n    if (key1 === 'paging' || key1 === 'toolbar') {\n      this.changeFocusedElement(undefined, focusedElement);\n    } else if (key2.includes(TABLE_FLEX_TYPE.toString())) {\n      const columnKey = this.props.tableColumns[0].key;\n      this.changeFocusedElement({\n        rowKey: key1,\n        columnKey,\n        index: -1,\n        part: getPart(key1),\n      }, focusedElement);\n    } else {\n      const part = getPart(key1);\n      this.changeFocusedElement({\n        rowKey: key1,\n        columnKey: key2,\n        index: getIndexToFocus(key1, key2, this.elements, event, inlineEditing, part),\n        part,\n      }, focusedElement);\n    }\n  }\n\n  render() {\n    const {\n      cellComponent: Cell,\n      rowComponent: Row,\n      focusedRowEnabled,\n      tableBodyRows,\n    } = this.props;\n    const { focusedElement } = this.state;\n    const getFocusedGetter = () => getFocusing(tableBodyRows, focusedElement);\n    return (\n      <Plugin\n        name=\"TableKeyboardNavigationCore\"\n      >\n        <Action name=\"setSearchPanelRef\" action={this.setSearchPanelRef} />\n        {focusedRowEnabled &&\n          <Getter name=\"highlightSelectedRow\" value />\n        }\n        {focusedRowEnabled &&\n          <Getter name=\"focused\" computed={getFocusedGetter} />\n        }\n        <Template name=\"tableCell\">\n          {(params: TableCellProps) => (\n            <Cell\n              {...params}\n              component={CellPlaceholder}\n              tabIndex={0}\n              updateRefForKeyboardNavigation={this.updateRef}\n              setFocusedElement={this.setFocusedElement}\n              focused={isCellFocused(params.tableRow, params.tableColumn, focusedElement)}\n            />\n          )}\n        </Template>\n        <Template name=\"header\">\n          <TemplatePlaceholder\n            params={{\n              updateRefForKeyboardNavigation: this.updateRef,\n              setFocusedElement: this.setFocusedElement,\n            }}\n          />\n        </Template>\n        <Template name=\"footer\">\n          <TemplatePlaceholder\n            params={{\n              updateRefForKeyboardNavigation: this.updateRef,\n              setFocusedElement: this.setFocusedElement,\n            }}\n          />\n        </Template>\n        {(focusedRowEnabled) && (\n          <Template\n            name=\"tableRow\"\n            predicate={({ tableRow }: any) => !!isDataTableRow(tableRow)}\n          >\n            {(params: TableRowProps) => (\n              <Row\n                {...params}\n                component={RowPlaceholder}\n                focused={isRowFocused(params.tableRow, focusedElement?.rowKey)}\n              />\n            )}\n          </Template>\n        )}\n      </Plugin>\n    );\n  }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nclass TableKeyboardNavigationBase extends React.PureComponent<TableKeyboardNavigationProps> {\n  static components = {\n    cellComponent: 'Cell',\n    rowComponent: 'Row',\n  };\n  render() {\n    return (\n      <Plugin\n        name=\"TableKeyboardNavigation\"\n        dependencies={[\n          { name: 'Table' },\n        ]}\n      >\n        <TemplateConnector>\n        {(\n          { tableColumns, tableBodyRows, rootRef, tableHeaderRows, expandedRowIds },\n          { scrollToColumn, stopEditCells, commitChangedRows, cancelChangedRows, startEditCells },\n        ) => {\n          return rootRef.current ? (\n            <TableKeyboardNavigationCore\n              tableColumns={tableColumns}\n              tableBodyRows={tableBodyRows}\n              rootRef={rootRef}\n              tableHeaderRows={filterHeaderRows(tableHeaderRows)}\n              expandedRowIds={expandedRowIds}\n              scrollToColumn={scrollToColumn}\n              inlineEditing={{\n                stopEditCells,\n                commitChangedRows,\n                cancelChangedRows,\n                startEditCells,\n              }}\n              {...this.props}\n            />\n          ) : null;\n        }}\n        </TemplateConnector>\n      </Plugin>\n    );\n  }\n}\n\n// tslint:disable-next-line: max-line-length\nexport const TableKeyboardNavigation: React.ComponentType<TableKeyboardNavigationProps> = TableKeyboardNavigationBase;\n","export const getRowStyle = ({ row }) => (row.height !== undefined\n  ? ({ height: `${row.height}px` })\n  : undefined);\n\nexport const isNumber = (value: string | number) =>\n  typeof value === 'number' || !Number.isNaN(Number(value));\n","/* globals requestAnimationFrame cancelAnimationFrame */\n\nimport * as React from 'react';\nimport {\n  getAnimations,\n  filterActiveAnimations,\n  evalAnimations,\n  TABLE_FLEX_TYPE,\n  ColumnAnimationMap,\n} from '@devexpress/dx-grid-core';\nimport { shallowEqual } from '@devexpress/dx-core';\nimport { TableLayoutCoreProps, TableLayoutCoreState } from '../types';\nimport { isNumber } from '../utils/helpers';\n\nclass TableLayoutBase extends React.PureComponent<TableLayoutCoreProps, TableLayoutCoreState> {\n  animations: ColumnAnimationMap;\n  savedScrollWidth: { [key: number]: number };\n  savedOffsetWidth = -1;\n  tableRef: React.RefObject<HTMLTableElement>;\n  raf = -1;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      animationState: new Map(),\n    };\n\n    this.animations = new Map();\n    this.savedScrollWidth = {};\n    this.tableRef = React.createRef();\n  }\n\n  componentDidMount() {\n    if (this.tableRef.current) {\n      const { forwardedRef } = this.props;\n      if (typeof forwardedRef === 'function') {\n        forwardedRef(this.tableRef.current);\n      } else if (forwardedRef) {\n        forwardedRef.current = this.tableRef.current;\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { columns } = this.props;\n    const { columns: prevColumns } = prevProps;\n    const { animationState } = this.state;\n\n    const activeAnimationExists = !shallowEqual(columns, prevColumns)\n      || !!animationState.size || !!this.animations.size;\n\n    // NOTE: animation should be recomputed only when columns are changed or\n    // an active animation is in progress. Otherwise it will be recalculated on\n    // each scroll event.\n    if (activeAnimationExists) {\n      this.processAnimation(prevColumns);\n    }\n  }\n\n  processAnimation(prevColumns) {\n    const { columns } = this.props;\n    const tableWidth = this.getTableWidth(prevColumns, columns);\n\n    this.animations = getAnimations(prevColumns, columns, tableWidth, this.animations);\n\n    cancelAnimationFrame(this.raf);\n    this.raf = requestAnimationFrame(this.processAnimationFrame.bind(this));\n  }\n\n  getTableWidth(prevColumns, columns) {\n    const { offsetWidth, scrollWidth } = this.tableRef.current!;\n    const { animationState } = this.state;\n\n    const widthChanged = this.savedOffsetWidth !== offsetWidth\n      || !this.savedScrollWidth[columns.length];\n    const columnCountChanged = columns.length !== prevColumns.length;\n\n    if (columnCountChanged || (widthChanged && !animationState.size)) {\n      this.savedScrollWidth = {};\n      this.savedScrollWidth[columns.length] = scrollWidth;\n      this.savedOffsetWidth = offsetWidth;\n    }\n\n    return this.savedScrollWidth[columns.length];\n  }\n\n  getColumns() {\n    const { columns } = this.props;\n    const { animationState } = this.state;\n\n    let result = columns;\n\n    const isFixedWidth = columns\n      .filter(column => column.width === undefined || column.width === 'auto')\n      .length === 0;\n    if (isFixedWidth) {\n      // presumably a flex column added here instead of in a getter in the Table plugin\n      // to make sure that all manipulations on taleColumns have already done earlier\n      result = [...result, { key: TABLE_FLEX_TYPE.toString(), type: TABLE_FLEX_TYPE }];\n    }\n\n    if (animationState.size) {\n      result = result\n        .map(column => (animationState.has(column.key)\n          ? { ...column, animationState: animationState.get(column.key) }\n          : column));\n    }\n\n    return result;\n  }\n\n  processAnimationFrame() {\n    const { animationState: animationComponentState } = this.state;\n    this.animations = filterActiveAnimations(this.animations);\n\n    if (!this.animations.size) {\n      if (animationComponentState.size) {\n        this.setState({ animationState: new Map() });\n      }\n      return;\n    }\n\n    const animationState = evalAnimations(this.animations);\n    this.setState({ animationState });\n  }\n\n  render() {\n    const {\n      layoutComponent: Layout,\n      minColumnWidth,\n      forwardedRef,\n      ...restProps\n    } = this.props;\n    const columns = this.getColumns();\n    const minWidth = columns\n      .map(column => column.width || (column.type === TABLE_FLEX_TYPE ? 0 : minColumnWidth))\n      .filter(value => value !== 'auto' && value !== 0)\n      .map(value => isNumber(value) ? `${value}px` : value)\n      .join(' + ');\n\n    return (\n      <Layout\n        {...restProps}\n        tableRef={this.tableRef}\n        columns={columns}\n        minWidth={minWidth}\n        minColumnWidth={minColumnWidth}\n      />\n    );\n  }\n}\n\n/** @internal */\nexport const TableLayout: React.ComponentType<TableLayoutCoreProps> = TableLayoutBase;\n","import * as React from 'react';\nimport { VirtualRowLayoutProps } from '../../types';\nimport { getRowStyle } from '../../utils/helpers';\n\nconst shouldUpdateRow = (prevProps, nextProps) => {\n  const { cells: prevCells, row: prevRow } = prevProps;\n  const { cells: nextCells, row: nextRow } = nextProps;\n\n  if (prevRow !== nextRow || prevCells.length !== nextCells.length) {\n    return false;\n  }\n\n  return !nextCells.some((nextCell, i) => {\n    const prevCell = prevCells[i];\n    return prevCell.column !== nextCell.column || prevCell.colSpan !== nextCell.colSpan;\n  });\n};\n\nexport const VirtualRowLayout = React.memo<VirtualRowLayoutProps>(({\n  row, cells, rowComponent: Row, cellComponent: Cell, forwardedRef,\n}) => {\n  return (\n    <Row\n      forwardedRef={forwardedRef}\n      tableRow={row}\n      style={getRowStyle({ row })}\n    >\n      {cells.map(({ column, colSpan }) => {\n        return (\n          <Cell\n            key={column.key}\n            tableRow={row}\n            tableColumn={column}\n            colSpan={colSpan}\n          />\n        );\n      })}\n    </Row>\n  );\n}, shouldUpdateRow);\n","import * as React from 'react';\nimport { VirtualTableLayoutBlockProps } from '../../types';\nimport { VirtualRowLayout } from './virtual-row-layout';\n\n// tslint:disable-next-line: max-line-length\nexport class VirtualTableLayoutBlock extends React.PureComponent<VirtualTableLayoutBlockProps, any> {\n  render() {\n    const {\n      collapsedGrid,\n      bodyComponent: Body,\n      cellComponent,\n      rowComponent,\n      isFixed,\n    } = this.props;\n\n    return (\n      <Body isFixed={isFixed}>\n        {collapsedGrid.rows.map((visibleRow) => {\n          const { row, cells = [] } = visibleRow;\n\n          return (\n            <VirtualRowLayout\n              key={row.key}\n              row={row}\n              cells={cells}\n              rowComponent={rowComponent}\n              cellComponent={cellComponent}\n            />\n          );\n        })}\n        </Body>\n    );\n  }\n\n}\n","import * as React from 'react';\nimport { TableColumn } from '@devexpress/dx-grid-core';\n\n/** @internal */\nexport class ColumnGroup extends React.PureComponent<{ columns: TableColumn[] }> {\n  render() {\n    const { columns } = this.props;\n\n    return (\n      <colgroup>\n        {columns.map(({ key, width }) => {\n          const styleWidth = typeof width === 'number' ? `${width}px` : width;\n          return (\n            <col\n              key={key}\n              style={width !== undefined\n                ? { width: styleWidth }\n                : undefined}\n            />\n          );\n        })}\n      </colgroup>\n    );\n  }\n}\n","import * as React from 'react';\nimport { MemoizedFunction, memoize } from '@devexpress/dx-core';\nimport {\n  TableColumn, GetColumnWidthFn, getCollapsedGrids,\n  getColumnWidthGetter, getViewport, GridViewport, getScrollLeft,\n  isColumnsWidthDifferent,\n} from '@devexpress/dx-grid-core';\nimport { VirtualTableLayoutState, VirtualTableLayoutProps } from '../../types';\nimport { VirtualTableLayoutBlock } from './virtual-table-layout-block';\nimport { Sizer } from '@devexpress/dx-react-core';\nimport { ColumnGroup } from './column-group';\n\nconst AUTO_HEIGHT = 'auto';\nconst MAX_WINDOW_HEIGHT = 10000000;\n\nconst defaultProps = {\n  headerRows: [],\n  footerRows: [],\n  headComponent: () => null,\n  footerComponent: () => null,\n  tableComponent: () => null,\n  containerComponent: React.forwardRef(() => null),\n};\ntype PropsType = VirtualTableLayoutProps & typeof defaultProps;\n\n/** @internal */\n// tslint:disable-next-line: max-line-length\nexport class VirtualTableLayout extends React.PureComponent<PropsType, VirtualTableLayoutState> {\n  static defaultProps = defaultProps;\n  getColumnWidthGetter: MemoizedFunction<[TableColumn[], number, number], GetColumnWidthFn>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      viewportTop: 0,\n      skipItems: [0, 0],\n      containerHeight: 600,\n      containerWidth: 800,\n      viewportLeft: 0,\n    };\n\n    this.getColumnWidthGetter = memoize(\n      (tableColumns, tableWidth, minColumnWidth) => (\n        getColumnWidthGetter(tableColumns, tableWidth, minColumnWidth)\n      ),\n    );\n  }\n\n  getCountSkipRows() {\n    const containerHeight = this.props.totalRowCount * this.props.estimatedRowHeight;\n    if (containerHeight > MAX_WINDOW_HEIGHT) {\n      return Math.round(this.props.totalRowCount - MAX_WINDOW_HEIGHT /\n        this.props.estimatedRowHeight);\n    }\n    return 0;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { bodyRows, columns } = this.props;\n\n    // NOTE: the boundaries depend not only on scroll position and container dimensions\n    // but on body rows too. This boundaries update is especially important when\n    // lazy loading is used because by the time that all involved events are handled\n    // no rows are loaded yet.\n    const bodyRowsChanged = prevProps.bodyRows !== bodyRows;\n    // Also it's the only place where we can respond to the column count change\n    const columnCountChanged = prevProps.columns.length !== columns.length;\n\n    const { viewportTop, viewportLeft, containerWidth, containerHeight } = this.state;\n    const viewportTopChanged = prevState.viewportTop !== viewportTop;\n    const viewportLeftChanged = prevState.viewportLeft !== viewportLeft;\n    const containerWidthChanged = prevState.containerWidth !== containerWidth;\n    const containerHeightChanged = prevState.containerHeight !== containerHeight;\n\n    if (prevProps.totalRowCount !== this.props.totalRowCount) {\n      const countSkipRows = this.getCountSkipRows();\n      const { skipItems } = this.state;\n      if (countSkipRows !== 0 && skipItems[0] === 0 && skipItems[1] === 0) {\n        this.setState({\n          skipItems: [0, countSkipRows],\n        });\n      }\n    }\n\n    if (bodyRowsChanged || columnCountChanged || columns[0].width !== undefined &&\n      isColumnsWidthDifferent(prevProps.columns, columns) || viewportTopChanged ||\n      viewportLeftChanged || containerWidthChanged || containerHeightChanged\n      ) {\n      this.updateViewport();\n    }\n  }\n\n  getRowHeight = (row) => {\n    const height = row ? row.height : 0;\n    return height || this.props.estimatedRowHeight;\n  }\n\n  onScroll = (e) => {\n    const node = e.target;\n\n    if (this.shouldSkipScrollEvent(e)) {\n      return;\n    }\n\n    const { scrollTop: viewportTop, scrollLeft: viewportLeft } = node;\n    const {\n      containerHeight,\n      skipItems,\n      viewportTop: prevViewPort,\n    } = this.state;\n\n    const countSkipRows = this.getCountSkipRows();\n    const dif = viewportTop - prevViewPort;\n    const pxInPercent = viewportTop / MAX_WINDOW_HEIGHT;\n    const isDif = Math.abs(dif) < containerHeight;\n    const top = Math.min(Math.round(pxInPercent * countSkipRows), countSkipRows);\n\n    this.setState({\n      viewportTop,\n      viewportLeft,\n      skipItems: isDif ? skipItems : [top, countSkipRows - top],\n    });\n  }\n\n  handleContainerSizeChange = ({ width, height }) => {\n    this.setState({\n      containerHeight: height,\n      containerWidth: width,\n    });\n  }\n\n  shouldSkipScrollEvent(e) {\n    const node = e.target;\n\n    // NOTE: prevent nested scroll to update viewport\n    if (node !== e.currentTarget) {\n      return true;\n    }\n    // NOTE: normalize position:\n    // in Firefox and Chrome (zoom > 100%) when scrolled to the bottom\n    // in Edge when scrolled to the right edge\n    const correction = 1;\n    const nodeHorizontalOffset = parseInt(node.scrollLeft + node.clientWidth, 10) - correction;\n    const nodeVerticalOffset = parseInt(node.scrollTop + node.clientHeight, 10) - correction;\n    // NOTE: prevent iOS to flicker in bounces and correct rendering on high dpi screens\n    if (node.scrollTop < 0\n      || node.scrollLeft < 0\n      || nodeHorizontalOffset > Math.max(node.scrollWidth, node.clientWidth)\n      || nodeVerticalOffset > Math.max(node.scrollHeight, node.clientHeight)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  updateViewport() {\n    const { viewport, setViewport } = this.props;\n    const newViewport = this.calculateViewport();\n\n    if (viewport !== newViewport) {\n      setViewport(newViewport);\n    }\n  }\n\n  calculateViewport() {\n    const { viewportTop, skipItems, viewportLeft, containerHeight, containerWidth } = this.state;\n    const {\n      loadedRowsStart,\n      bodyRows,\n      headerRows,\n      footerRows,\n      columns,\n      minColumnWidth,\n      isDataRemote,\n      viewport,\n    } = this.props;\n    const getColumnWidth = this.getColumnWidthGetter(columns, containerWidth, minColumnWidth!);\n\n    return getViewport(\n      { viewportTop, skipItems, viewportLeft, containerHeight, containerWidth },\n      { loadedRowsStart, columns, bodyRows, headerRows, footerRows, isDataRemote, viewport },\n      this.getRowHeight, getColumnWidth,\n    );\n  }\n\n  getCollapsedGrids(viewport: GridViewport) {\n    const { containerWidth, viewportLeft, skipItems } = this.state;\n    const {\n      headerRows, bodyRows, footerRows,\n      columns, loadedRowsStart, totalRowCount,\n      getCellColSpan, minColumnWidth,\n    } = this.props;\n    const getColumnWidth = this.getColumnWidthGetter(columns, containerWidth, minColumnWidth!);\n\n    return getCollapsedGrids({\n      headerRows,\n      bodyRows,\n      footerRows,\n      columns,\n      loadedRowsStart,\n      totalRowCount,\n      getCellColSpan,\n      viewportLeft,\n      containerWidth,\n      viewport,\n      skipItems,\n      getRowHeight: this.getRowHeight,\n      getColumnWidth,\n    });\n  }\n\n  render() {\n    const {\n      containerComponent: Container,\n      tableComponent: Table,\n      headComponent: Head,\n      bodyComponent: Body,\n      footerComponent: Footer,\n      tableRef,\n      height,\n      headerRows,\n      footerRows,\n      minColumnWidth,\n      minWidth,\n      cellComponent,\n      rowComponent,\n      viewport,\n      scrollTop,\n      columns,\n      nextColumnId,\n    } = this.props;\n\n    const scrollLeft = getScrollLeft(columns.length, minColumnWidth!, nextColumnId);\n\n    const collapsedGrids = this.getCollapsedGrids(viewport);\n    const commonProps = {\n      cellComponent,\n      rowComponent,\n      minColumnWidth,\n      minWidth,\n    };\n    const sizerHeight = height === AUTO_HEIGHT ? null : height;\n\n    return (\n      <Sizer\n        onSizeChange={this.handleContainerSizeChange}\n        containerComponent={Container}\n        style={{ height: sizerHeight }}\n        onScroll={this.onScroll}\n        scrollTop={scrollTop}\n        scrollLeft={scrollLeft}\n      >\n        <Table\n          forwardedRef={tableRef}\n          style={{\n            minWidth: `${minWidth}px`,\n          }}\n        >\n          <ColumnGroup\n            columns={collapsedGrids.bodyGrid.columns as TableColumn[]}\n          />\n          {\n            (!!headerRows.length) && (\n              <VirtualTableLayoutBlock\n                {...commonProps}\n                name=\"header\"\n                isFixed={true}\n                collapsedGrid={collapsedGrids.headerGrid}\n                bodyComponent={Head}\n              />\n            )\n          }\n          <VirtualTableLayoutBlock\n            {...commonProps}\n            name=\"body\"\n            collapsedGrid={collapsedGrids.bodyGrid}\n            bodyComponent={Body}\n          />\n          {\n            (!!footerRows.length) && (\n              <VirtualTableLayoutBlock\n                {...commonProps}\n                name=\"footer\"\n                isFixed={true}\n                collapsedGrid={collapsedGrids.footerGrid}\n                bodyComponent={Footer}\n              />\n            )\n          }\n        </Table>\n      </Sizer>\n    );\n  }\n}\n","import * as React from 'react';\nimport { RowLayoutProps } from '../../types';\nimport { getRowStyle } from '../../utils/helpers';\n\nconst getColumnStyle = ({ column }) => column.animationState;\n\n/** @internal */\nexport const RowLayout: React.SFC<RowLayoutProps> = React.memo((props) => {\n  const {\n    row,\n    columns,\n    rowComponent: Row,\n    cellComponent: Cell,\n    getCellColSpan,\n  } = props;\n\n  const getColSpan = React.useCallback(\n    (tableRow, tableColumn) => getCellColSpan!({ tableRow, tableColumn, tableColumns: columns }),\n    [columns, getCellColSpan],\n  );\n\n  return (\n    <Row\n      tableRow={row}\n      style={getRowStyle({ row })}\n    >\n      {\n        columns\n          .map(column => (\n            <Cell\n              key={column.key}\n              tableRow={row}\n              tableColumn={column}\n              style={getColumnStyle({ column })}\n              colSpan={getColSpan(row, column)}\n            />\n          ))\n      }\n    </Row>\n  );\n});\n","import * as React from 'react';\nimport { RowLayout } from './row-layout';\nimport { RowsBlockLayoutProps } from '../../types';\n\n/** @internal */\nexport class RowsBlockLayout extends React.PureComponent<RowsBlockLayoutProps> {\n  render() {\n    const {\n      rows,\n      columns,\n      blockComponent: Block,\n      rowComponent,\n      cellComponent,\n      getCellColSpan,\n    } = this.props;\n\n    return (\n      <Block>\n        {\n          rows\n            .map(row => (\n              <RowLayout\n                key={row.key}\n                row={row}\n                columns={columns}\n                rowComponent={rowComponent}\n                cellComponent={cellComponent}\n                getCellColSpan={getCellColSpan}\n              />\n            ))\n        }\n      </Block>\n    );\n  }\n}\n","import * as React from 'react';\nimport { ColumnGroup } from './column-group';\nimport { RowsBlockLayout } from './rows-block-layout';\nimport { TableLayoutProps } from '../../types';\n\nconst defaultProps = {\n  headerRows: [],\n  footerRows: [],\n  headComponent: () => null,\n  footerComponent: () => null,\n};\n\n/** @internal */\nexport class StaticTableLayout extends React.PureComponent<TableLayoutProps & typeof defaultProps> {\n  static defaultProps = defaultProps;\n\n  render() {\n    const {\n      headerRows,\n      bodyRows,\n      footerRows,\n      columns,\n      minWidth,\n      containerComponent: Container,\n      tableComponent: Table,\n      headComponent,\n      bodyComponent,\n      footerComponent,\n      rowComponent,\n      cellComponent,\n      getCellColSpan,\n      tableRef,\n    } = this.props;\n\n    const commonProps = {\n      columns,\n      rowComponent,\n      cellComponent,\n      getCellColSpan,\n    };\n\n    return (\n      <Container>\n        <Table\n          forwardedRef={tableRef}\n          style={{ minWidth: `calc(${minWidth})` }}\n        >\n          <ColumnGroup columns={columns} />\n          {!!headerRows.length && (\n            <RowsBlockLayout\n              rows={headerRows}\n              blockComponent={headComponent}\n              {...commonProps}\n            />\n          )}\n          <RowsBlockLayout\n            rows={bodyRows}\n            blockComponent={bodyComponent}\n            {...commonProps}\n          />\n          {!!footerRows.length && (\n            <RowsBlockLayout\n              rows={footerRows}\n              blockComponent={footerComponent}\n              {...commonProps}\n            />\n          )}\n        </Table>\n      </Container>\n    );\n  }\n}\n","import * as React from 'react';\nimport {\n  Plugin, Template, Action,\n  PluginComponents,\n  TemplateConnector,\n  TemplatePlaceholder,\n  Getter,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  isStubTableCell, checkColumnWidths, getScrollTop,\n  TOP_POSITION, BOTTOM_POSITION, getTopRowId,\n} from '@devexpress/dx-grid-core';\nimport {\n  VirtualTableProps,\n  Table as TableNS,\n  TableLayoutProps,\n  VirtualTablePluginState,\n} from '../../types';\n\n/** @internal */\nexport const emptyViewport = {\n  columns: [[0, 0]],\n  rows: [0, 0],\n  headerRows: [0, 0],\n  footerRows: [0, 0],\n  top: 0,\n  left: 0,\n  width: 800,\n  height: 600,\n};\n\nconst tableColumnsComputed = (\n  { tableColumns }: Getters,\n) => {\n  return checkColumnWidths(tableColumns);\n};\n\n/** @internal */\nexport const makeVirtualTable: (...args: any) => any = (Table, {\n  VirtualLayout,\n  FixedHeader,\n  FixedFooter,\n  SkeletonCell,\n  defaultEstimatedRowHeight,\n  defaultHeight,\n}) => {\n  class VirtualTable extends React.PureComponent<VirtualTableProps, VirtualTablePluginState> {\n    static defaultProps = {\n      estimatedRowHeight: defaultEstimatedRowHeight,\n      height: defaultHeight,\n      skeletonCellComponent: SkeletonCell,\n      onTopRowChange: () => {},\n    };\n    static FixedHeader: React.ComponentType;\n    static FixedFooter: React.ComponentType;\n    static SkeletonCell: React.ComponentType;\n    static TOP_POSITION = TOP_POSITION;\n    static BOTTOM_POSITION = BOTTOM_POSITION;\n\n    scrollToRow: (prop: number | string | symbol) => void;\n    scrollToColumn: (prop: symbol) => void;\n\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        viewport: emptyViewport,\n        nextRowId: undefined,\n        nextColumnId: undefined,\n      };\n      this.scrollToRow = nextRowId => this.setState({ nextRowId });\n      this.scrollToColumn = nextColumnId => this.setState({ nextColumnId });\n    }\n\n    setViewport = (viewport) => {\n      this.setState({ viewport });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n      const { nextRowId: prevId } = prevState;\n      const { nextRowId: currentId } = this.state;\n      const areIdsEqual = currentId !== undefined && currentId === prevId;\n\n      if (areIdsEqual) {\n        this.setState({ nextRowId: undefined });\n      }\n    }\n\n    render() {\n      const {\n        height,\n        estimatedRowHeight,\n        skeletonCellComponent: SkeletonStubCell,\n        children,\n        ...restProps\n      } = this.props;\n      const {\n        viewport: stateViewport,\n        nextRowId: nextId,\n        nextColumnId,\n      } = this.state;\n\n      return (\n        <Plugin name=\"VirtualTable\">\n          <Table layoutComponent={VirtualLayout} {...restProps} />\n\n          {/* prevents breaking change */}\n          <Action name=\"setViewport\" action={this.setViewport} />\n          <Action name=\"scrollToRow\" action={this.scrollToRow} />\n          <Action name=\"scrollToColumn\" action={this.scrollToColumn} />\n          <Getter name=\"viewport\" value={stateViewport} />\n          <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n\n          <Template name=\"tableLayout\">\n            {(params: TableLayoutProps) => (\n              <TemplateConnector>\n                {(\n                  { availableRowCount, loadedRowsStart, tableBodyRows, isDataRemote, viewport },\n                  { setViewport },\n                ) => {\n\n                  const { onTopRowChange } = this.props;\n                  const rowId = getTopRowId(viewport, tableBodyRows, isDataRemote);\n\n                  onTopRowChange(rowId);\n\n                  const totalRowCount = availableRowCount || tableBodyRows.length;\n                  const scrollTop = getScrollTop(\n                    tableBodyRows,\n                    totalRowCount,\n                    nextId,\n                    estimatedRowHeight,\n                    isDataRemote,\n                  );\n\n                  return (\n                    <TemplatePlaceholder\n                      params={{\n                        ...params,\n                        totalRowCount,\n                        loadedRowsStart,\n                        isDataRemote,\n                        height,\n                        estimatedRowHeight,\n                        setViewport,\n                        viewport,\n                        scrollTop,\n                        nextColumnId,\n                      }}\n                    />\n                  );\n                }}\n              </TemplateConnector>\n            )}\n          </Template>\n\n          <Template\n            name=\"tableCell\"\n            predicate={({ tableRow }: any) => !!isStubTableCell(tableRow)}\n          >\n            {(params: TableNS.CellProps) => (\n              <TemplateConnector>\n                {({ isDataRemote }) => (\n                  isDataRemote ? <SkeletonStubCell {...params} /> : <TemplatePlaceholder />\n                )}\n              </TemplateConnector>\n            )}\n          </Template>\n        </Plugin>\n      );\n    }\n  }\n\n  Object.values(Table.components as PluginComponents).forEach((name) => {\n    VirtualTable[name] = Table[name];\n  });\n\n  VirtualTable.FixedHeader = FixedHeader;\n  VirtualTable.FixedFooter = FixedFooter;\n  VirtualTable.SkeletonCell = SkeletonCell;\n\n  return VirtualTable;\n};\n","import { RowCache } from '../types';\n\nclass Node {\n  start: number;\n  rows: ReadonlyArray<any>;\n  prev: Node | null = null;\n  next: Node | null = null;\n\n  constructor(start: number, rows: ReadonlyArray<any>) {\n    this.start = start;\n    this.rows = rows;\n  }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nclass LRUCache {\n  pageSize: number;\n  capacity: number;\n  head!: Node;\n  tail!: Node;\n  pages = new Map<number, Node>();\n\n  constructor(pageSize: number, capacity = Number.POSITIVE_INFINITY) {\n    this.pageSize = pageSize;\n    this.capacity = capacity;\n    this.initList();\n  }\n\n  initList() {\n    this.head = new Node(-1, []);\n    this.tail = new Node(-1, []);\n    this.head.next = this.tail;\n    this.tail.prev = this.head;\n  }\n\n  addPage(pageStart: number, rows: ReadonlyArray<any>) {\n    if (this.pages.has(pageStart)) {\n      this.removePage(pageStart);\n    }\n\n    const node = new Node(pageStart, rows);\n    const last = this.tail.prev!;\n    last.next = node;\n    node.next = this.tail;\n    node.prev = last;\n    this.tail.prev = node;\n    this.pages.set(pageStart, node);\n\n    if (this.pages.size > this.capacity) {\n      this.removePage(this.head.next!.start);\n    }\n  }\n\n  removePage(start: number) {\n    const node = this.pages.get(start)!;\n    node.prev!.next = node.next;\n    node.next!.prev = node.prev;\n\n    this.pages.delete(start);\n  }\n\n  getPage(pageStart: number) {\n    if (!this.pages.has(pageStart)) {\n      return null;\n    }\n\n    const { rows } = this.pages.get(pageStart)!;\n    this.removePage(pageStart);\n    this.addPage(pageStart, rows);\n\n    return rows;\n  }\n\n  clear() {\n    this.pages.clear();\n    this.initList();\n  }\n}\n\nexport const createRowCache = (pageSize = 100, capacity = Number.POSITIVE_INFINITY): RowCache => {\n  const cache = new LRUCache(pageSize, capacity / pageSize);\n\n  return {\n    getRows: (skip: number, take: number) => {\n      let result: any[] = [];\n      const pageCount = Math.ceil(take / pageSize);\n      for (let i = 0; i < pageCount; i += 1) {\n        const pageStart = skip + i * pageSize;\n        const chunk = cache.getPage(pageStart);\n\n        if (chunk !== null) {\n          result = result.concat(chunk);\n        }\n\n        // yield if last page is incomplete\n        if (chunk === null || (i !== pageCount - 1 && chunk.length !== pageSize)) {\n          return result;\n        }\n      }\n      return result;\n    },\n    setRows: (skip: number, rows: ReadonlyArray<any>) => {\n      const pageCount = Math.ceil(rows.length / pageSize);\n      for (let i = 0; i < pageCount; i += 1) {\n        const pageStart = i * pageSize;\n        const rowsChunk = rows.slice(pageStart, pageStart + pageSize);\n\n        // put incomplete page only if it is last one\n        if (rowsChunk.length === pageSize || i === pageCount - 1) {\n          cache.addPage(pageStart + skip, rowsChunk);\n        }\n      }\n    },\n    invalidate: () => cache.clear(),\n  };\n};\n","import * as React from 'react';\nimport { KeyboardNavigationComponent, Table } from '../types';\n\nexport const withKeyboardNavigation =\n<T extends KeyboardNavigationComponent>(key1?: string, key2?: string) =>\n(Component: React.ComponentType<Table.CellProps>): React.ComponentType<T> => {\n  class ComponentWithNavigation extends React.PureComponent<T> {\n    ref: React.RefObject<T>;\n    constructor(props) {\n      super(props);\n      this.ref = { current: null };\n      this.handleClick = this.handleClick.bind(this);\n      this.setForwardedRef = this.setForwardedRef.bind(this);\n    }\n\n    setForwardedRef(node) {\n      (this.ref.current as any)?.removeEventListener('mouseup', this.handleClick);\n      (this.ref.current as any) = node;\n      (this.ref.current as any)?.addEventListener('mouseup', this.handleClick);\n    }\n\n    componentDidMount() {\n      const { updateRefForKeyboardNavigation, tableRow, tableColumn } = this.props;\n      if (this.ref.current && updateRefForKeyboardNavigation) {\n        updateRefForKeyboardNavigation({\n          ref: this.ref,\n          key1: key1 || tableRow.key,\n          key2: key2 || tableColumn.key,\n          action: 'add',\n        });\n      }\n    }\n\n    componentWillUnmount() {\n      const { updateRefForKeyboardNavigation, tableRow, tableColumn } = this.props;\n      if (this.ref.current && updateRefForKeyboardNavigation) {\n        updateRefForKeyboardNavigation({\n          ref: this.ref,\n          key1: key1 || tableRow.key,\n          key2: key2 || tableColumn.key,\n          action: 'remove',\n        });\n        (this.ref.current as any).removeEventListener('mouseup', this.handleClick);\n      }\n    }\n\n    handleClick(event) {\n      const { tableRow, tableColumn, setFocusedElement } = this.props;\n      if (setFocusedElement) {\n        setFocusedElement({ key1: key1 || tableRow.key, key2: key2 || tableColumn.key, event });\n      }\n    }\n\n    render() {\n      const { setFocusedElement, updateRefForKeyboardNavigation, ...restProps } = this.props;\n      return <Component forwardedRef={this.setForwardedRef} {...restProps} />;\n    }\n  }\n  return ComponentWithNavigation;\n};\n","import * as React from 'react';\nimport { TableGroupRow } from '../../types';\n\nexport const InlineSummaryItem: React.SFC<TableGroupRow.InlineSummaryItemProps> = React.memo(({\n  summary: { messageKey, columnTitle, component: SummaryComponent },\n  getMessage,\n}) => (\n  <React.Fragment>\n    {getMessage(messageKey, { columnTitle })}\n    <SummaryComponent />\n  </React.Fragment>\n));\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}